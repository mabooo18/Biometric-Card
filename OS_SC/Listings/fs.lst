C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE FS
OBJECT MODULE PLACED IN .\Objects\fs.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE fs.c LARGE BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRINT(.\Listi
                    -ngs\fs.lst) PREPRINT(.\Listings\fs.i) OBJECT(.\Objects\fs.obj)

line level    source

   1          #include "fs.h"
   1      =1  
   2      =1  #ifndef FS_H
   3      =1  
   4      =1  #define FS_H
   5      =1  
   6      =1  // FS_RESPONSE TO COMMAND
   7      =1  #define FS_OK                                                   0
   8      =1  #define FS_ERROR                                                30
   9      =1  #define FS_ERROR_INSUFFICIENT_SPACE             31
  10      =1  #define FS_ERROR_NOT_FOUND                              32
  11      =1  #define FS_ERROR_DUPLICATE_FID                  33
  12      =1  #define FS_ERROR_SECURITY_STATUS                34
  13      =1  #define FS_ERROR_WRONG_FS_STRUCTURE             35
  14      =1  #define FS_NONE                                                 0XFF
  15      =1  
  16      =1  // FS_TAG ID
  17      =1  #define FS_TAG_MF                                               0x3F
  18      =1  #define FS_TAG_DF                                               0x4F
  19      =1  #define FS_TAG_EF                                               0x5F
  20      =1  
  21      =1  #define FS_EF_STRUCTURE_TRANSPARENT             0x01
  22      =1  #define FS_EF_STRUCTURE_RECORD_FIXED    0x02
  23      =1  #define FS_EF_STRUCTURE_RECORD_VAR              0x04
  24      =1  #define FS_EF_STRUCTURE_CYCLIC                  0x06
  25      =1  
  26      =1  #define FS_EF_TYPE_WORKING              0
  27      =1  #define FS_EF_TYPE_INTERNAL             1
  28      =1  
  29      =1  #define FS_OP_READ              0
  30      =1  #define FS_OP_UPDATE    1
  31      =1  #define FS_OP_WRITE             2
  32      =1  
  33      =1  // OFFSET FILE
  34      =1  #define FS_START        CONFIG_FS_START //272
  35      =1  #define FS_BLOCK_SIZE   CONFIG_FS_BLOCK_SIZE //2
  36      =1  #define FS_SIZE         CONFIG_FS_SIZE //512
  37      =1  
  38      =1  // HEADER DEFINITION
  39      =1  #define FS_HEADER_TAG_SIZE                      1
  40      =1  #define FS_HEADER_FID_SIZE                      2
  41      =1  #define FS_HEADER_PARENT_SIZE           2
  42      =1  #define FS_HEADER_CHILD_SIZE            2
  43      =1  #define FS_HEADER_SIBLING_SIZE          2
  44      =1  #define FS_HEADER_BODY_POINTER_SIZE     2
  45      =1  
  46      =1  #define FS_HEADER_SIZE          FS_HEADER_TAG_SIZE + \
  47      =1                                                          FS_HEADER_FID_SIZE + \
  48      =1                                                          FS_HEADER_PARENT_SIZE + \
  49      =1                                                          FS_HEADER_CHILD_SIZE + \
  50      =1                                                          FS_HEADER_SIBLING_SIZE + \
  51      =1                                                          FS_HEADER_BODY_POINTER_SIZE
  52      =1  
  53      =1  
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 2   

  54      =1  #define FS_HEADER_TAG_OFFSET                    0
  55      =1  #define FS_HEADER_FID_OFFSET                    FS_HEADER_TAG_OFFSET + FS_HEADER_TAG_SIZE
  56      =1  #define FS_HEADER_PARENT_OFFSET                 FS_HEADER_FID_OFFSET + FS_HEADER_FID_SIZE
  57      =1  #define FS_HEADER_CHILD_OFFSET                  FS_HEADER_PARENT_OFFSET + FS_HEADER_PARENT_SIZE
  58      =1  #define FS_HEADER_SIBLING_OFFSET                FS_HEADER_CHILD_OFFSET + FS_HEADER_CHILD_SIZE
  59      =1  #define FS_HEADER_BODY_POINTER_OFFSET   FS_HEADER_SIBLING_OFFSET + FS_HEADER_SIBLING_SIZE
  60      =1  
  61      =1  // BODY HEADER DEFINITION
  62      =1  #define FS_BODY_STRUCTURE_OFFSET        0
  63      =1  #define FS_BODY_STRUCTURE_SIZE          1
  64      =1  #define FS_BODY_TYPE_SIZE                       1
  65      =1  #define FS_BODY_AC_SIZE                         1
  66      =1  #define FS_BODY_SIZE_SIZE                       2
  67      =1  #define FS_BODY_RECORD_LENGTH_SIZE      1
  68      =1  
  69      =1  #define FS_BODY_TYPE_OFFSET             FS_BODY_STRUCTURE_OFFSET        + FS_BODY_STRUCTURE_SIZE
  70      =1  #define FS_BODY_AC_OFFSET               FS_BODY_TYPE_OFFSET             + FS_BODY_TYPE_SIZE
  71      =1  #define FS_BODY_SIZE_OFFSET     FS_BODY_AC_OFFSET                       + FS_BODY_AC_SIZE
  72      =1  #define FS_BODY_BODY_OFFSET             FS_BODY_SIZE_OFFSET             + FS_BODY_SIZE_SIZE
  73      =1  
  74      =1  #define FS_BODY_HEADER_SIZE             FS_BODY_STRUCTURE_SIZE + \
  75      =1                                                                  FS_BODY_TYPE_SIZE + \
  76      =1                                                                  FS_BODY_AC_SIZE + \
  77      =1                                                                  FS_BODY_SIZE_SIZE
  78      =1  
  79      =1  
  80      =1  #define FS_BLOCKS                                                               FS_SIZE/FS_BLOCK_SIZE //512/2 =256
  81      =1  #define FS_ALLOC_TABLE_SIZE                                             (FS_BLOCKS/8)/FS_BLOCK_SIZE //(256/8)/2 = 32
  82      =1  #define FS_FILE_TABLE_SIZE                                              CONFIG_FS_FILE_TABLE_SIZE/FS_BLOCK_SIZE // 128/2 = 64
  83      =1  
  84      =1  
  85      =1  #define FS_ALLOC_TABLE_OFFSET                                   0
  86      =1  #define FS_FILE_TABLE_OFFSET                                    FS_ALLOC_TABLE_OFFSET + FS_ALLOC_TABLE_SIZE //0+16 = 16 0x10
  87      =1  #define FS_FILE_BODY_OFFSET                                             FS_FILE_TABLE_OFFSET + FS_FILE_TABLE_SIZE // 16+64 = 80 = 0x50
  88      =1  
  89      =1  #define FS_ALLOC_HEADER(address)                                FSAlloc(CEIL((FS_HEADER_SIZE),FS_BLOCK_SIZE), FS_FILE_TABLE_OFFSET, FS
             -_FILE_BODY_OFFSET, address)
  90      =1  #define FS_ALLOC_BODY(address, length)                  FSAlloc(CEIL((FS_BODY_HEADER_SIZE + length),FS_BLOCK_SIZE), FS_FI
             -LE_BODY_OFFSET, FS_BLOCKS, address);
  91      =1  
  92      =1  #define FS_SET_HEADER_TAG(block, src)                   Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADER_
             -TAG_OFFSET, FS_HEADER_TAG_SIZE, (unsigned char *)src)
  93      =1  #define FS_GET_HEADER_TAG(block, dest)                  Memory_ReadBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADER_
             -TAG_OFFSET, FS_HEADER_TAG_SIZE, (unsigned char *)dest)
  94      =1  #define FS_SET_HEADER_FID(block, src)                   Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADER_
             -FID_OFFSET, FS_HEADER_FID_SIZE, (unsigned char *)src)
  95      =1  #define FS_GET_HEADER_FID(block, dest)                  Memory_ReadBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADER_
             -FID_OFFSET, FS_HEADER_FID_SIZE, (unsigned char *)dest)
  96      =1  #define FS_GET_HEADER_PARENT(block, dest)               Memory_ReadBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADE
             -R_PARENT_OFFSET, FS_HEADER_PARENT_SIZE, (unsigned char *)dest)
  97      =1  #define FS_SET_HEADER_PARENT(block, src)                Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADE
             -R_PARENT_OFFSET, FS_HEADER_PARENT_SIZE, (unsigned char *)src)
  98      =1  #define FS_GET_HEADER_CHILD(block, dest)                Memory_ReadBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADER
             -_CHILD_OFFSET, FS_HEADER_CHILD_SIZE, (unsigned char *)dest)
  99      =1  #define FS_SET_HEADER_CHILD(block, src)                 Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADER
             -_CHILD_OFFSET, FS_HEADER_CHILD_SIZE, (unsigned char *)src)
 100      =1  #define FS_GET_HEADER_SIBLING(block, dest)              Memory_ReadBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEAD
             -ER_SIBLING_OFFSET, FS_HEADER_SIBLING_SIZE, (unsigned char *)dest)
 101      =1  #define FS_SET_HEADER_SIBLING(block, src)               Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEAD
             -ER_SIBLING_OFFSET, FS_HEADER_SIBLING_SIZE, (unsigned char *)src)
 102      =1  #define FS_GET_HEADER_BODY_POINTER(block, dest) Memory_ReadBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_H
             -EADER_BODY_POINTER_OFFSET, FS_HEADER_BODY_POINTER_SIZE, (unsigned char *)dest)
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 3   

 103      =1  #define FS_SET_HEADER_BODY_POINTER(block, src)  Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_
             -HEADER_BODY_POINTER_OFFSET, FS_HEADER_BODY_POINTER_SIZE, (unsigned char *)src)
 104      =1  
 105      =1  
 106      =1  #define FS_GET_BODY_STRUCTURE(block, dest)              Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) + FS_BOD
             -Y_STRUCTURE_OFFSET, FS_BODY_STRUCTURE_SIZE, (unsigned char *)dest)
 107      =1  #define FS_SET_BODY_STRUCTURE(block, src)               Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_BODY
             -_STRUCTURE_OFFSET, FS_BODY_STRUCTURE_SIZE, (unsigned char *)src)
 108      =1  #define FS_GET_BODY_TYPE(block, dest)                   Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_TY
             -PE_OFFSET, FS_BODY_TYPE_SIZE, (unsigned char *)dest)
 109      =1  #define FS_SET_BODY_TYPE(block, src)                    Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_TYP
             -E_OFFSET, FS_BODY_TYPE_SIZE, (unsigned char *)src)
 110      =1  #define FS_GET_BODY_AC(block, dest)                     Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_AC_O
             -FFSET, FS_BODY_AC_SIZE, (unsigned char *)dest)
 111      =1  #define FS_SET_BODY_AC(block, src)                              Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_AC_O
             -FFSET, FS_BODY_AC_SIZE, (unsigned char *)src)
 112      =1  #define FS_GET_BODY_ACUPDATE(block, dest)               Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) + FS_BODY
             -_ACUPDATE_OFFSET, FS_BODY_ACUPDATE_SIZE, (unsigned char *)dest)
 113      =1  #define FS_SET_BODY_ACUPDATE(block, src)                Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_
             -ACUPDATE_OFFSET, FS_BODY_ACUPDATE_SIZE, (unsigned char *)src)
 114      =1  #define FS_GET_BODY_SIZE(block, dest)                   Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_SI
             -ZE_OFFSET, FS_BODY_SIZE_SIZE, (unsigned char *)dest)
 115      =1  #define FS_SET_BODY_SIZE(block, src)                    Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_SIZ
             -E_OFFSET, FS_BODY_SIZE_SIZE, (unsigned char *)src)
 116      =1  #define FS_GET_BODY_BODY(block, length, dest)   Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) + FS_B
             -ODY_BODY_OFFSET + offset, length, (unsigned char *)dest)
 117      =1  #define FS_SET_BODY_BODY(block, length, src)    Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_BO
             -DY_BODY_OFFSET + offset, length, (unsigned char *)src)
 118      =1  
 119      =1  #define FS_GET_RECORD_FIXED_LENGTH(block, dest)                                         Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) 
             -+ FS_BODY_BODY_OFFSET, FS_BODY_RECORD_LENGTH_SIZE, (unsigned char *)dest)
 120      =1  #define FS_SET_RECORD_FIXED_LENGTH(block, src)                                          Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) 
             -+ FS_BODY_BODY_OFFSET, FS_BODY_RECORD_LENGTH_SIZE, (unsigned char *)src)
 121      =1  #define FS_GET_RECORD_FIXED_DATA(block, length, record_num, dest)       Memory_ReadBlock (FS_START + (block * F
             -S_BLOCK_SIZE) + FS_BODY_BODY_OFFSET + FS_BODY_RECORD_LENGTH_SIZE + (record_num-1)*length, length, (unsigned char *)dest)
 122      =1  #define FS_SET_RECORD_FIXED_DATA(block, length, record_num, src)        Memory_WriteBlock(FS_START + (block * FS
             -_BLOCK_SIZE) + FS_BODY_BODY_OFFSET + FS_BODY_RECORD_LENGTH_SIZE + (record_num-1)*length, length, (unsigned char *)src)
 123      =1  
 124      =1  #define FS_GET_RECORD_VAR_LENGTH(block, offset, dest)                           Memory_ReadBlock (FS_START + (block * FS_BLOCK_S
             -IZE) + FS_BODY_BODY_OFFSET + offset, FS_BODY_RECORD_LENGTH_SIZE, (unsigned char *)dest)
 125      =1  #define FS_SET_RECORD_VAR_LENGTH(block, offset, src)                            Memory_WriteBlock(FS_START + (block * FS_BLOCK_SI
             -ZE) + FS_BODY_BODY_OFFSET + offset, FS_BODY_RECORD_LENGTH_SIZE, (unsigned char *)src)
 126      =1  
 127      =1  #define CEIL(A,B)       ((A%B)==0 ? (A/B) : (A/B + 1))
 128      =1  
 129      =1  
 130      =1  /*****************************/
 131      =1  /*        Enumeration        */
 132      =1  /*****************************/
 133      =1  
 134      =1  
 135      =1  /****************************/
 136      =1  /*      Data Structure      */
 137      =1  /****************************/
 138      =1  
 139      =1  struct EF_st
 140      =1  {
 141      =1          unsigned int    FID;            ///< File identifier
 142      =1          unsigned char   structure;      ///< file structure : Transparent or Record
 143      =1          unsigned char   type;           ///< type of file : Working or Internal
 144      =1          unsigned char   AC;                     ///< access control for read operation
 145      =1          unsigned char   *ptr_body;      ///< pointer to file body
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 4   

 146      =1          unsigned int    file_size;      ///< size of file
 147      =1          unsigned char   record_le;      ///< record length
 148      =1  } ;
 149      =1  
 150      =1  struct DF_st
 151      =1  {
 152      =1          unsigned int    FID;                    ///< File identifier
 153      =1          char                    DFname[16];             ///< DF name 
 154      =1          char                    asc_flag;               ///< indication to application specific code
 155      =1          int                             (* asc)(int);           ///< pointer to the ASC handler
 156      =1  } ;
 157      =1  
 158      =1  /**************************/
 159      =1  /*        Variable        */
 160      =1  /**************************/
 161      =1  
 162      =1  
 163      =1  /**************************/
 164      =1  /*        Function        */
 165      =1  /**************************/
 166      =1  unsigned int FS_Init();
 167      =1  unsigned int FSAlloc(unsigned int size_alloc, unsigned int startBlock, unsigned int endBlock, unsigned int
             - * address);
 168      =1  int FSGetHeader(unsigned int block_addr, unsigned char offset, unsigned char * dest);
 169      =1  
 170      =1  unsigned char FS_CheckAC(unsigned int op);
 171      =1  
 172      =1  unsigned char FS_GetAC();
 173      =1  unsigned int FSFormat();
 174      =1  
 175      =1  unsigned int FS_SelectFID(unsigned int fid);
 176      =1  unsigned int FSSelectMF();
 177      =1  unsigned int FS_SearchAllFID(unsigned int fid);
 178      =1  
 179      =1  unsigned int FSAccessBinary(unsigned int op, unsigned int offset, unsigned int length, unsigned char *data
             -byte);
 180      =1  unsigned int FSCreateHeader(unsigned char tag, unsigned int fid, unsigned int * addr);
 181      =1  unsigned int FSCreateBodyEF(struct EF_st * desc, unsigned int * addr);
 182      =1  unsigned int FSCreateFile(unsigned int tag, void * desc);
 183      =1  
 184      =1  unsigned int FSDeleteFile(unsigned int fid);
 185      =1  unsigned int FSFree(unsigned int address, unsigned int length);
 186      =1  unsigned int FS_CheckChildSibling_FID(unsigned int fid, unsigned int current);
 187      =1  #endif
   2          #include "config.h"
   1      =1  #define CONFIG_FS_SIZE                  512
   2      =1  #define CONFIG_FS_START                 272
   3      =1  #define CONFIG_FS_BLOCK_SIZE            2
   4      =1  #define CONFIG_FS_FILE_TABLE_SIZE       128
   5      =1  
   6      =1  #define MAX_BUFFER_SIZE 32
   7      =1  
   8      =1  #define ATR_LEN_ADDR    0x0001
   9      =1  #define ATR_ADDR        0x0002
  10      =1  #define ATR_MAXLEN      24
  11      =1  
  12      =1  #define PIN_ADDR                ATR_ADDR+ATR_MAXLEN //2+24=26
  13      =1  #define PIN_LEN                 4
  14      =1  #define PIN_RETRIES_ADDR        PIN_ADDR+PIN_LEN //30
  15      =1  #define PIN_RETRIES_LEN         1
  16      =1  
  17      =1  #define PIN_MAX_RETRIES         3
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 5   

  18      =1  
  19      =1  #define SERNUM_ADDR             PIN_RETRIES_ADDR + PIN_RETRIES_LEN //31
  20      =1  #define SERNUM_LEN              8
  21      =1  
  22      =1  #define RAND_STATE_ADDR         (SERNUM_ADDR + SERNUM_LEN) //39 27x
  23      =1  #define RAND_STATE_LEN          32
  24      =1  
  25      =1  #define EXT_AUTH_KEY_ADDR       (RAND_STATE_ADDR + RAND_STATE_LEN) //71
  26      =1  #define EXT_AUTH_KEY_LEN        16
  27      =1  
  28      =1  #define EXT_AUTH_RETRIES_ADDR   (EXT_AUTH_KEY_ADDR + EXT_AUTH_KEY_LEN) //87 x57
  29      =1  #define EXT_AUTH_RETRIES_LEN    1
  30      =1  
  31      =1  #define EXT_AUTH_MAX_RETRIES         3
  32      =1  
  33      =1  #define KEY_ECC_ADDR_SC (EXT_AUTH_RETRIES_ADDR+EXT_AUTH_RETRIES_LEN) //88
  34      =1  #define KEY_ECC_SZ 60
  35      =1  
  36      =1  #define KEY_ECC_ADDR_RD (KEY_ECC_ADDR_SC+KEY_ECC_SZ) //148
  37      =1  
  38      =1  
  39      =1  #define PIN_HASH_ADDR (KEY_ECC_ADDR_RD+KEY_ECC_SZ) //208 //D0
  40      =1  #define PIN_HASH_LEN 32
  41      =1  
   3          #include "memory.h"
   1      =1  #ifndef __MEMORY_H__
   2      =1  #define __MEMORY_H__
   3      =1  
   4      =1  extern char eeprom_ID_write;
   5      =1  extern char eeprom_ID_read;
   6      =1  extern char LSB_address;
   7      =1  
   8      =1  unsigned char Memory_ReadByte(unsigned int address);
   9      =1  unsigned char Memory_ReadByte_Ext(unsigned int address);
  10      =1  void Memory_WriteByte_Ext(unsigned int address, char data_to_send);
  11      =1  void Memory_WriteByte(unsigned int address, char data_to_send);
  12      =1  int Memory_ReadBlock(unsigned int address, unsigned int read_size, unsigned char * databyte);
  13      =1  int Memory_WriteBlock(unsigned int address, unsigned int write_size, unsigned char * databyte);
  14      =1  #endif
   4          #include "state.h"      
   1      =1  #ifndef STATE_H
   2      =1  #define STATE_H
   3      =1  
   4      =1  //! Length of key in octets.
   5      =1  #define CRYPT_KEY_LEN   16
   6      =1  //! Length of cipher block in octets.
   7      =1  #define CRYPT_BLOCK_LEN 8
   8      =1  //! Single block encryption function.
   9      =1  #define crypt_enc(v,k) BC3_enc((unsigned long int *)(v),(unsigned long int *)(k))
  10      =1  //! Single block decryption function.
  11      =1  #define crypt_dec(v,k) BC3_dec((unsigned long int *)(v),(unsigned long int *)(k))
  12      =1  
  13      =1  #define STATE_OK                0
  14      =1  #define STATE_ERROR             1
  15      =1  #define STATE_WRONG             2
  16      =1  #define STATE_BLOCKED           3
  17      =1  
  18      =1  #define KEY_SIZE               4
  19      =1  
  20      =1  /********************************/
  21      =1  /*        Data Structure        */
  22      =1  /********************************/
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 6   

  23      =1  
  24      =1  struct state_struct
  25      =1  {
  26      =1    unsigned int        current;     ///< pointer to current DF header
  27      =1    unsigned int        currentKey;    ///< pointer to current Key EF header
  28      =1    unsigned int        currentRecord;  ///< Record number of currently selected EF
  29      =1    unsigned char         securityState;  ///< security state currently active
  30      =1    unsigned char         challenge[CRYPT_BLOCK_LEN];
  31      =1  };
  32      =1  
  33      =1  /**************************/
  34      =1  /*        Variable        */
  35      =1  /**************************/
  36      =1  
  37      =1  
  38      =1  /**************************/
  39      =1  /*        Function        */
  40      =1  /**************************/
  41      =1  
  42      =1  
  43      =1  int State_Init();
  44      =1  
  45      =1  int State_Verify();
  46      =1  
  47      =1  void State_GetChallenge();
  48      =1  
  49      =1  unsigned char State_VerifyAuth();
  50      =1  
  51      =1  int State_SetCurrent(unsigned int newfile);
  52      =1  
  53      =1  int State_SetCurrentRecord(unsigned int record_num);
  54      =1  
  55      =1  int State_SetCurrentKey(unsigned int newKey);
  56      =1  
  57      =1  unsigned int State_GetCurrent();
  58      =1  
  59      =1  unsigned int State_GetCurrentRecord();
  60      =1  
  61      =1  unsigned char State_GetCurrentSecurity();
  62      =1  
  63      =1  void State_GetCurrentChallenge();
  64      =1  
  65      =1  #endif
   5          #include "transmission.h"
   1      =1  #ifndef TRANSMISSION_HEADER_FILE
   2      =1  #define TRANSMISSION_HEADER_FILE 1
   3      =1  
   4      =1  extern unsigned char header[5];
   5      =1  extern unsigned int sw;
   6      =1  
   7      =1  void send_ATR();
   8      =1  void send_ATR_direct();
   9      =1  void Transmission_GetHeader(); 
  10      =1  void Transmission_SendSW();
  11      =1  void Transmission_SendDebug();
  12      =1  char Transmission_GetByte ();
  13      =1  void Transmission_SendByte (char c);
  14      =1  
  15      =1  
  16      =1  #endif
   6          
   7          unsigned int FS_Init(){
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 7   

   8   1              FSSelectMF();
   9   1              return FS_OK;
  10   1      }
  11          
  12          unsigned int FSSelectMF(){
  13   1              State_SetCurrent(FS_FILE_TABLE_OFFSET);
  14   1              return 0;
  15   1      }
  16          
  17          unsigned char FS_GetAC(){
  18   1              unsigned int header, body;
  19   1              unsigned char ac;
  20   1      
  21   1              header = State_GetCurrent();
  22   1      
  23   1              FS_GET_HEADER_BODY_POINTER(header,&body);
  24   1      
  25   1              FS_GET_BODY_AC(body, &ac);
  26   1              
  27   1              return ac;
  28   1      }
  29          
  30          unsigned char FS_CheckAC(unsigned int op){
  31   1              unsigned char ac;
  32   1              unsigned char current = State_GetCurrentSecurity();
  33   1      
  34   1              ac = FS_GetAC();
  35   1              
  36   1              switch(op){
  37   2                      case FS_OP_READ:
  38   2                      {
  39   3                              if( (ac&0x81)==0x81 )
  40   3                                      return FS_OK;
  41   3                              else
  42   3                                      return FS_ERROR_SECURITY_STATUS;
  43   3                              break;
  44   3                      }
  45   2                      case FS_OP_UPDATE:
  46   2                      {
  47   3                              if( (ac&0x82)==0x82 )
  48   3                                      return FS_OK;
  49   3                              else
  50   3                                      return FS_ERROR_SECURITY_STATUS;
  51   3                              break;
  52   3                      }
  53   2                      case FS_OP_WRITE:
  54   2                      {
  55   3                              if( (ac&0x84)==0x84 )
  56   3                                      return FS_OK;
  57   3                              else
  58   3                                      return FS_ERROR_SECURITY_STATUS;
  59   3                              break;
  60   3                      }
  61   2                      default:
  62   2                      {
  63   3                              return FS_ERROR_SECURITY_STATUS;
  64   3                      }
  65   2              }
  66   1               
  67   1      
  68   1              
  69   1      }
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 8   

  70          unsigned int FS_CheckChildSibling_FID(unsigned int fid, unsigned int current){
  71   1              unsigned int tempFID, child,tempChild, sibling, tempSibling;
  72   1              unsigned char tempTag;
  73   1      
  74   1              FS_GET_HEADER_FID(current, &tempFID);
  75   1              if(tempFID==fid){
  76   2                      return current;
  77   2              }
  78   1      
  79   1              // ===== Check Child =====
  80   1              // Check if current tag is DF or MF, because EF don't have child
  81   1              FS_GET_HEADER_TAG(current, &tempTag);
  82   1              if(tempTag == FS_TAG_DF || tempTag == FS_TAG_MF) {
  83   2                      FS_GET_HEADER_CHILD(current, &child);
  84   2                      if(child != FS_NONE){
  85   3                              tempChild = FS_CheckChildSibling_FID(fid, child);
  86   3                              if(tempChild != 0x0FFF){
  87   4                                      return tempChild;
  88   4                              }
  89   3                      }
  90   2              }
  91   1      
  92   1              FS_GET_HEADER_SIBLING(current, &sibling);
  93   1              if(sibling != FS_NONE){
  94   2                      tempSibling = FS_CheckChildSibling_FID(fid, sibling);
  95   2                      if(tempSibling != 0x0FFF){
  96   3                              return tempSibling;
  97   3                      }
  98   2              }
  99   1      
 100   1              return 0x0FFF;
 101   1      }
 102          
 103          unsigned int FS_SearchAllFID(unsigned int fid){
 104   1              unsigned int current, result;
 105   1      
 106   1              current = FS_FILE_TABLE_OFFSET;
 107   1              result = FS_CheckChildSibling_FID(fid, current);
 108   1      
 109   1              return result;
 110   1      }
 111          
 112          unsigned int FSSearchFID(unsigned int fid){
 113   1              unsigned int current, parent, sibling, child;
 114   1              unsigned int tempFID;
 115   1              unsigned char  tempTag;
 116   1      
 117   1              current = State_GetCurrent();
 118   1      
 119   1              // ===== Check Parent =====
 120   1              // Get Address of Header Parent
 121   1              FS_GET_HEADER_PARENT(current, &parent);
 122   1              // Get Parent FID from header parent
 123   1              FS_GET_HEADER_FID(parent, &tempFID);
 124   1              // Check if FID match or not
 125   1              if(tempFID == fid){
 126   2                      return parent;
 127   2              }
 128   1      
 129   1              // ==== Check Sibling ====
 130   1              // Get Address of Header Sibling form parent's child
 131   1              FS_GET_HEADER_CHILD(parent, &sibling);
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 9   

 132   1              // 
 133   1              while(sibling != FS_NONE) {
 134   2                      FS_GET_HEADER_FID(sibling, &tempFID);
 135   2                      if(tempFID == fid){
 136   3                              return sibling;
 137   3                      }
 138   2                      FS_GET_HEADER_SIBLING(sibling, &sibling);
 139   2              }
 140   1      
 141   1              // ===== Check Child =====
 142   1              // Check if current tag is DF or MF, because EF don't have child
 143   1              FS_GET_HEADER_TAG(current, &tempTag);
 144   1              if(tempTag == FS_TAG_DF || tempTag == FS_TAG_MF) {
 145   2                      // Get Child FID from header child
 146   2                      FS_GET_HEADER_CHILD(current, &child);
 147   2      
 148   2                      while (child != FS_NONE) {
 149   3                              FS_GET_HEADER_FID(child, &tempFID);
 150   3                              if(tempFID == fid){
 151   4                                      return child;
 152   4                              }
 153   3                              FS_GET_HEADER_SIBLING(child, &child);
 154   3                      }
 155   2              }
 156   1              return FS_NONE;
 157   1      }
 158          
 159          unsigned int FS_SelectFID(unsigned int fid){
 160   1              unsigned int file;
 161   1              // Search FID is exist or not
 162   1              file = FSSearchFID(fid);
 163   1              if( file == FS_NONE )
 164   1                      return FS_ERROR_NOT_FOUND;
 165   1              // If found, set current state to address of found file
 166   1              State_SetCurrent(file);
 167   1              return FS_OK;
 168   1      }
 169          
 170          unsigned int FSAccessBinary(unsigned int op, unsigned  int offset, unsigned int length, unsigned char *dat
             -abyte){
 171   1              unsigned int header, body;
 172   1      
 173   1              header = State_GetCurrent();
 174   1              FS_GET_HEADER_BODY_POINTER(header,&body);
 175   1              
 176   1              if(op == FS_OP_READ) {
 177   2                      if(length == 0)
 178   2                              FS_GET_BODY_SIZE(body, &length);
 179   2      
 180   2                      if(length > 256)
 181   2                              length = 256;
 182   2      
 183   2                      FS_GET_BODY_BODY(body, length, databyte);
 184   2              }else
 185   1              if(op == FS_OP_UPDATE) {
 186   2                      FS_SET_BODY_BODY(body, length, databyte);
 187   2              }
 188   1              return length;
 189   1      }
 190          
 191          unsigned int FSAlloc(unsigned int size_alloc, unsigned int startBlock, unsigned int endBlock, unsigned int
             - * address){
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 10  

 192   1              unsigned int i, j, k, m, n;
 193   1              unsigned int startbyte, startbit, startSearchBit;
 194   1              unsigned int stopbyte, stopbit, stopSearchBit;
 195   1              unsigned int tempAddress;
 196   1              unsigned int free = 0;
 197   1              unsigned char temp = 0;
 198   1              bit cont = 0;
 199   1      
 200   1              for(i = (startBlock/8); i < (endBlock/8); i++) {
 201   2                      //read allocation table (byte -> 8 block)
 202   2                      temp = Memory_ReadByte(FS_START + FS_ALLOC_TABLE_OFFSET + i);
 203   2      
 204   2                      startSearchBit = (i == startBlock/8) ? startBlock%8 : 0;
 205   2                      stopSearchBit  = (i == (endBlock/8)-1) ? endBlock%8 : 8;
 206   2      
 207   2                      // bit per bit operation
 208   2                      for(j = startSearchBit; j < stopSearchBit; j++) {
 209   3                              //check if MSB = 0
 210   3                              if((temp & 0x80) == 0X80) {
 211   4                                      //check if this the first 0
 212   4                                      if(cont == 0) {
 213   5                                              //make a mark and save the address
 214   5                                              cont = 1;
 215   5                                              tempAddress = (i*8)+j;
 216   5                                              startbyte = i;
 217   5                                              startbit = j;
 218   5                                      }
 219   4      
 220   4                                      //increment free block
 221   4                                      free ++;
 222   4      
 223   4                                      //if free block is sufficient
 224   4                                      if(free == size_alloc) {
 225   5                                              stopbyte = i;
 226   5                                              stopbit = j;
 227   5      
 228   5                                              k = startbyte;
 229   5                                              while(k <= stopbyte) {
 230   6                                                      m = 0;
 231   6                                                      n = 8;
 232   6                                                      if(k == startbyte) m = startbit;
 233   6                                                      if(k == stopbyte) n = stopbit;
 234   6      
 235   6                                                      for(m;m<=n;m++){
 236   7                                                              temp = Memory_ReadByte(FS_START + FS_ALLOC_TABLE_OFFSET + k);
 237   7                                                              temp = temp & ~((unsigned char)128>>m);
 238   7                                                              Memory_WriteByte(FS_START + FS_ALLOC_TABLE_OFFSET + k, temp);
 239   7                                                      }
 240   6                                                      k++;
 241   6                                              }
 242   5      
 243   5                                              //return the first address of free block
 244   5                                              *address = tempAddress;
 245   5                                              return FS_OK;
 246   5                                      }
 247   4                              } else {
 248   4                                      //if the MSB == 1 and continue
 249   4                                      if(cont == 1) {
 250   5                                              cont = 0;
 251   5                                              free = 0;
 252   5                                      }
 253   4                              }
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 11  

 254   3                              temp = temp << 1;
 255   3                      }
 256   2              }
 257   1              return FS_ERROR_INSUFFICIENT_SPACE;
 258   1      }
 259          
 260          unsigned int FSFormat() {
 261   1              unsigned int i;
 262   1              unsigned int headerBlock;
 263   1              unsigned int none16 = FS_NONE;
 264   1              unsigned int fidMF  = 0x3F00;
 265   1              unsigned char  tagMF  = FS_TAG_MF;
 266   1              unsigned  int status;
 267   1      
 268   1              //Initialize Block Allocation Table
 269   1              for(i=FS_ALLOC_TABLE_OFFSET; i<(FS_FILE_TABLE_OFFSET*FS_BLOCK_SIZE); i++){ //i =0 ; i<(16*2 =32)
 270   2                      Memory_WriteByte(FS_START + i, 0xFF); //64
 271   2              }
 272   1              status = FS_ALLOC_HEADER(&headerBlock);
 273   1      
 274   1              if(status == FS_OK && headerBlock == FS_FILE_TABLE_OFFSET){
 275   2                      FS_SET_HEADER_TAG(headerBlock, &tagMF);
 276   2                      FS_SET_HEADER_FID(headerBlock, &fidMF);
 277   2                      FS_SET_HEADER_PARENT(headerBlock, &headerBlock);
 278   2                      FS_SET_HEADER_CHILD(headerBlock, &none16);
 279   2                      FS_SET_HEADER_SIBLING(headerBlock, &none16);
 280   2                      return FS_OK;
 281   2              } else {
 282   2                      return FS_ERROR;
 283   2              }
 284   1      }
 285          
 286          unsigned int FSCreateHeader(unsigned char tag, unsigned int fid, unsigned int * addr){
 287   1              unsigned int    current, currentChild, currentChildTemp;
 288   1              unsigned int    headerBlock;
 289   1              unsigned int    none16 = (unsigned int)FS_NONE;
 290   1              unsigned int    status;
 291   1      
 292   1              current = State_GetCurrent();
 293   1      
 294   1              // Alloc some space for header
 295   1              status = FS_ALLOC_HEADER(&headerBlock);
 296   1      
 297   1              if(status == FS_ERROR_INSUFFICIENT_SPACE){
 298   2                      return status;
 299   2              }
 300   1      
 301   1              // Update header
 302   1              FS_SET_HEADER_TAG(headerBlock, &tag);
 303   1              FS_SET_HEADER_FID(headerBlock, &fid);
 304   1              FS_SET_HEADER_PARENT(headerBlock, &current);
 305   1              FS_SET_HEADER_CHILD(headerBlock, &none16);
 306   1              FS_SET_HEADER_SIBLING(headerBlock, &none16);
 307   1      
 308   1              // Update parent/sibling DF header
 309   1              FS_GET_HEADER_CHILD(current, &currentChild);
 310   1      
 311   1              if (currentChild == none16) {
 312   2                      FS_SET_HEADER_CHILD(current, &headerBlock);
 313   2              } else {
 314   2                      while (currentChild != FS_NONE){
 315   3                              currentChildTemp = currentChild;
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 12  

 316   3                              FS_GET_HEADER_SIBLING(currentChild, &currentChild);
 317   3                      }
 318   2                      currentChild = currentChildTemp;
 319   2                      FS_SET_HEADER_SIBLING(currentChild, &headerBlock);
 320   2              }
 321   1              *addr = headerBlock;
 322   1              return FS_OK;
 323   1      }
 324          
 325          // edited create body EF (only one byte ac is needed)
 326          unsigned int FSCreateBodyEF(struct EF_st * desc, unsigned int * addr){
 327   1              unsigned int i, bodyBlock;
 328   1              unsigned int status;
 329   1              unsigned char var_length[255];  
 330   1              unsigned char sum=0;
 331   1              // unsigned char *var_length;
 332   1              // var_length=(char*)malloc((desc->file_size)*sizeof(char));
 333   1      
 334   1              switch(desc->structure){
 335   2                      case FS_EF_STRUCTURE_TRANSPARENT: { 
 336   3                              //alloc body
 337   3                              status = FS_ALLOC_BODY(&bodyBlock, desc->file_size);
 338   3                              if(status == FS_ERROR_INSUFFICIENT_SPACE){
 339   4                                      return status;
 340   4                              }
 341   3                              FS_SET_BODY_STRUCTURE(bodyBlock, &(desc->structure));
 342   3                              FS_SET_BODY_TYPE(bodyBlock, &(desc->type));
 343   3                              FS_SET_BODY_AC(bodyBlock, &(desc->AC));
 344   3                              FS_SET_BODY_SIZE(bodyBlock, &(desc->file_size));
 345   3      
 346   3                              *addr = bodyBlock;
 347   3                              break;
 348   3                      }
 349   2                      case FS_EF_STRUCTURE_RECORD_FIXED: {
 350   3                              //alloc body
 351   3                              status = FS_ALLOC_BODY(&bodyBlock, (desc->file_size)*(desc->record_le)+FS_BODY_RECORD_LENGTH_SIZE);
 352   3                              if(status == FS_ERROR_INSUFFICIENT_SPACE){
 353   4                                      return status;
 354   4                              }
 355   3      
 356   3                              FS_SET_BODY_STRUCTURE(bodyBlock, &(desc->structure));
 357   3                              FS_SET_BODY_TYPE(bodyBlock, &(desc->type));
 358   3                              FS_SET_BODY_AC(bodyBlock, &(desc->AC));
 359   3                              FS_SET_BODY_SIZE(bodyBlock, &(desc->file_size));
 360   3                              FS_SET_RECORD_FIXED_LENGTH(bodyBlock, &(desc->record_le));
 361   3      
 362   3                              *addr = bodyBlock;
 363   3                              break;
 364   3                      }
 365   2                      case FS_EF_STRUCTURE_RECORD_VAR: {
 366   3                              for(i=0;i<(desc->file_size);i++){
 367   4                                      //ack
 368   4                                      Transmission_SendByte( ~header[1] );
 369   4                                      var_length[i]=Transmission_GetByte();
 370   4                                      sum=sum+var_length[i];
 371   4                              }
 372   3      
 373   3                              //alloc body
 374   3                              status = FS_ALLOC_BODY(&bodyBlock, (desc->file_size)+sum+1);
 375   3                              if(status == FS_ERROR_INSUFFICIENT_SPACE){
 376   4                                      return status;
 377   4                              }
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 13  

 378   3      
 379   3                              FS_SET_BODY_STRUCTURE(bodyBlock, &(desc->structure));
 380   3                              FS_SET_BODY_TYPE(bodyBlock, &(desc->type));
 381   3                              FS_SET_BODY_AC(bodyBlock, &(desc->AC));
 382   3                              FS_SET_BODY_SIZE(bodyBlock, &(desc->file_size));
 383   3                              sum=0;
 384   3                              for(i=0;i<(desc->file_size);i++){
 385   4                                      FS_SET_RECORD_VAR_LENGTH(bodyBlock,i,&(sum) );
 386   4                                      sum=sum+var_length[i];
 387   4                              }
 388   3                              FS_SET_RECORD_VAR_LENGTH(bodyBlock,(desc->file_size),&(sum) );
 389   3                              *addr = bodyBlock;
 390   3                              break;
 391   3                      }
 392   2              }
 393   1              return FS_OK;
 394   1      }
 395          
 396          unsigned int FSCreateFile(unsigned int tag, void * desc){
 397   1              unsigned int header, body;
 398   1              unsigned int current;
 399   1              unsigned int fid;
 400   1              unsigned char currentTag;
 401   1              int status;
 402   1      
 403   1              if(tag == FS_TAG_DF){
 404   2                      fid = ((struct DF_st *)desc)->FID;
 405   2              } else
 406   1              if (tag == FS_TAG_EF) {
 407   2                      fid = ((struct EF_st *)desc)->FID;
 408   2              }
 409   1      
 410   1              // Check if current is DF
 411   1              current = State_GetCurrent();
 412   1              FS_GET_HEADER_TAG(current, (unsigned char *)&currentTag);
 413   1              if(currentTag == FS_TAG_EF){
 414   2                      return FS_ERROR_WRONG_FS_STRUCTURE;
 415   2              }
 416   1      
 417   1              // // Check consistency
 418   1              // // Check all FID of current DF
 419   1              // status = FSSearchFID(fid);
 420   1              // if(status != FS_NONE){
 421   1              //      return FS_ERROR_DUPLICATE_FID;
 422   1              // }
 423   1      
 424   1              //create file header
 425   1              status = FSCreateHeader((unsigned char)tag, fid, &header);
 426   1              if (status != FS_OK){
 427   2                      return status;
 428   2              }
 429   1      
 430   1              //create file body
 431   1              if(tag == FS_TAG_EF) {
 432   2                      status = FSCreateBodyEF((struct EF_st *)desc, &body);
 433   2                      if (status != FS_OK){
 434   3                              return status;
 435   3                      }
 436   2                      FS_SET_HEADER_BODY_POINTER(header, &body);
 437   2              }
 438   1              State_SetCurrent(header);
 439   1              return 0;
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 14  

 440   1      }
 441          
 442          
 443          unsigned int FSFree(unsigned int address, unsigned int length){
 444   1              unsigned int startbyte, stopbyte;
 445   1              unsigned char startbit, stopbit;
 446   1              unsigned char startXOR, stopXOR;
 447   1              unsigned char temp, tempXOR;
 448   1              unsigned int i,j;
 449   1      
 450   1              startbyte = address/8;
 451   1              startbit = address%8;
 452   1              stopbyte = (address+length)/8;
 453   1              stopbit = (address+length)%8;
 454   1      
 455   1              for(i = startbyte; i <= stopbyte; i++){
 456   2                      temp = Memory_ReadByte(FS_START + FS_ALLOC_TABLE_OFFSET + i);
 457   2      
 458   2                      startXOR = (i == startbyte) ? startbit : 0;
 459   2                      stopXOR = (i == stopbyte) ? stopbit : 8;
 460   2      
 461   2                      tempXOR = 0;
 462   2      
 463   2                      for(j = startXOR; j < stopXOR; j++)
 464   2                              tempXOR = tempXOR ^ (128 >> j);
 465   2      
 466   2                      temp = temp ^ tempXOR;
 467   2      
 468   2                      Memory_WriteByte(FS_START + FS_ALLOC_TABLE_OFFSET + i, temp);
 469   2              }
 470   1              return FS_OK;
 471   1      }
 472          
 473          unsigned int FSDeleteFile(unsigned int fid){
 474   1              unsigned int header, parent, sibling, siblingBefore, siblingNext;
 475   1              unsigned int body, bodySize;
 476   1              unsigned char  tag;
 477   1      
 478   1              //check FID
 479   1              header = FSSearchFID(fid);
 480   1      
 481   1              if(header == FS_NONE){
 482   2                      return FS_ERROR_NOT_FOUND;
 483   2              }
 484   1      
 485   1              //if DF, make sure it doesn't have any child
 486   1              //if first child, untie from parent, and change parent's child to sibling (if any)
 487   1              FS_GET_HEADER_PARENT(header, &parent);
 488   1      
 489   1              FS_GET_HEADER_CHILD(parent, &sibling);
 490   1      
 491   1              if(sibling == header) {
 492   2                      FS_GET_HEADER_SIBLING(header, &sibling);
 493   2                      FS_SET_HEADER_CHILD(parent, &sibling);
 494   2              }
 495   1              //else, change the sibling before to chain to sibling after
 496   1              else {
 497   2                      while(sibling != header) {
 498   3                      siblingBefore = sibling;
 499   3                      FS_GET_HEADER_SIBLING(sibling, &sibling);
 500   3                      }
 501   2                      FS_GET_HEADER_SIBLING(header, &siblingNext);
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 15  

 502   2                      FS_SET_HEADER_SIBLING(siblingBefore, &siblingNext);
 503   2              }
 504   1      
 505   1              //free body
 506   1              FS_GET_HEADER_TAG(header, &tag);
 507   1      
 508   1              if(tag == FS_TAG_EF){
 509   2                      FS_GET_HEADER_BODY_POINTER(header, &body);
 510   2                      FS_GET_BODY_SIZE(body, &bodySize);
 511   2                      FSFree(body, CEIL(((FS_BODY_HEADER_SIZE)+bodySize),FS_BLOCK_SIZE));
 512   2              }
 513   1      
 514   1              //free header
 515   1              FSFree(header, CEIL((FS_HEADER_SIZE),FS_BLOCK_SIZE));
 516   1              return FS_OK;
 517   1      }
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 16  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION FS_Init (BEGIN)
                                           ; SOURCE LINE # 7
                                           ; SOURCE LINE # 8
0000 120000      R     LCALL   FSSelectMF
                                           ; SOURCE LINE # 9
0003 E4                CLR     A
0004 FE                MOV     R6,A
0005 FF                MOV     R7,A
                                           ; SOURCE LINE # 10
0006         ?C0001:
0006 22                RET     
             ; FUNCTION FS_Init (END)

             ; FUNCTION FSSelectMF (BEGIN)
                                           ; SOURCE LINE # 12
                                           ; SOURCE LINE # 13
0000 7F10              MOV     R7,#010H
0002 7E00              MOV     R6,#00H
0004 120000      E     LCALL   _State_SetCurrent
                                           ; SOURCE LINE # 14
0007 E4                CLR     A
0008 FE                MOV     R6,A
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 15
000A         ?C0002:
000A 22                RET     
             ; FUNCTION FSSelectMF (END)

             ; FUNCTION FS_GetAC (BEGIN)
                                           ; SOURCE LINE # 17
                                           ; SOURCE LINE # 21
0000 120000      E     LCALL   State_GetCurrent
;---- Variable 'header' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 23
0003 EF                MOV     A,R7
0004 25E0              ADD     A,ACC
0006 FF                MOV     R7,A
0007 EE                MOV     A,R6
0008 33                RLC     A
0009 FE                MOV     R6,A
000A EF                MOV     A,R7
000B 2419              ADD     A,#019H
000D FF                MOV     R7,A
000E EE                MOV     A,R6
000F 3401              ADDC    A,#01H
0011 FE                MOV     R6,A
0012 7B01              MOV     R3,#01H
0014 7A00        R     MOV     R2,#HIGH body
0016 7900        R     MOV     R1,#LOW body
0018 7D02              MOV     R5,#02H
001A 7C00              MOV     R4,#00H
001C 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 25
001F 900000      R     MOV     DPTR,#body+01H
0022 E0                MOVX    A,@DPTR
0023 25E0              ADD     A,ACC
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#body
0029 E0                MOVX    A,@DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 17  

002A 33                RLC     A
002B FE                MOV     R6,A
002C EF                MOV     A,R7
002D 2412              ADD     A,#012H
002F FF                MOV     R7,A
0030 EE                MOV     A,R6
0031 3401              ADDC    A,#01H
0033 FE                MOV     R6,A
0034 7B01              MOV     R3,#01H
0036 7A00        R     MOV     R2,#HIGH ac
0038 7900        R     MOV     R1,#LOW ac
003A 7D01              MOV     R5,#01H
003C 7C00              MOV     R4,#00H
003E 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 27
0041 900000      R     MOV     DPTR,#ac
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
                                           ; SOURCE LINE # 28
0046         ?C0003:
0046 22                RET     
             ; FUNCTION FS_GetAC (END)

             ; FUNCTION _FS_CheckAC (BEGIN)
                                           ; SOURCE LINE # 30
0000 900000      R     MOV     DPTR,#op
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 32
0008 120000      E     LCALL   State_GetCurrentSecurity
000B 900000      R     MOV     DPTR,#current
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 34
0010 120000      R     LCALL   FS_GetAC
;---- Variable 'ac' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 36
0013 900000      R     MOV     DPTR,#op
0016 E0                MOVX    A,@DPTR
0017 FC                MOV     R4,A
0018 A3                INC     DPTR
0019 E0                MOVX    A,@DPTR
001A FD                MOV     R5,A
001B EC                MOV     A,R4
001C 7032              JNZ     ?C0015
001E ED                MOV     A,R5
001F 14                DEC     A
0020 6014              JZ      ?C0009
0022 14                DEC     A
0023 601E              JZ      ?C0012
0025 2402              ADD     A,#02H
0027 7027              JNZ     ?C0015
                                           ; SOURCE LINE # 37
0029         ?C0005:
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
0029 EF                MOV     A,R7
002A 5481              ANL     A,#081H
002C FE                MOV     R6,A
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 18  

002D BE8103            CJNE    R6,#081H,?C0006
                                           ; SOURCE LINE # 40
0030 7F00              MOV     R7,#00H
0032 22                RET     
0033         ?C0006:
                                           ; SOURCE LINE # 42
0033 7F22              MOV     R7,#022H
0035 22                RET     
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 45
0036         ?C0009:
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
0036 EF                MOV     A,R7
0037 5482              ANL     A,#082H
0039 FE                MOV     R6,A
003A BE8203            CJNE    R6,#082H,?C0010
                                           ; SOURCE LINE # 48
003D 7F00              MOV     R7,#00H
003F 22                RET     
0040         ?C0010:
                                           ; SOURCE LINE # 50
0040 7F22              MOV     R7,#022H
0042 22                RET     
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 53
0043         ?C0012:
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
0043 EF                MOV     A,R7
0044 5484              ANL     A,#084H
0046 FF                MOV     R7,A
0047 BF8403            CJNE    R7,#084H,?C0013
                                           ; SOURCE LINE # 56
004A 7F00              MOV     R7,#00H
004C 22                RET     
004D         ?C0013:
                                           ; SOURCE LINE # 58
004D 7F22              MOV     R7,#022H
004F 22                RET     
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 61
0050         ?C0015:
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
0050 7F22              MOV     R7,#022H
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 69
0052         ?C0007:
0052 22                RET     
             ; FUNCTION _FS_CheckAC (END)

             ; FUNCTION L?0181 (BEGIN)
0000 900000      R     MOV     DPTR,#fid
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 19  

0007 FF                MOV     R7,A
             ; FUNCTION _FS_CheckChildSibling_FID (BEGIN)
                                           ; SOURCE LINE # 70
0008 900000      R     MOV     DPTR,#fid
000B EE                MOV     A,R6
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 EC                MOV     A,R4
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 ED                MOV     A,R5
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
0016 E0                MOVX    A,@DPTR
0017 25E0              ADD     A,ACC
0019 FF                MOV     R7,A
001A 900000      R     MOV     DPTR,#current
001D E0                MOVX    A,@DPTR
001E 33                RLC     A
001F FE                MOV     R6,A
0020 EF                MOV     A,R7
0021 2411              ADD     A,#011H
0023 FF                MOV     R7,A
0024 EE                MOV     A,R6
0025 3401              ADDC    A,#01H
0027 FE                MOV     R6,A
0028 7B01              MOV     R3,#01H
002A 7A00        R     MOV     R2,#HIGH tempFID
002C 7900        R     MOV     R1,#LOW tempFID
002E 7D02              MOV     R5,#02H
0030 7C00              MOV     R4,#00H
0032 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 75
0035 900000      R     MOV     DPTR,#fid
0038 E0                MOVX    A,@DPTR
0039 FE                MOV     R6,A
003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D 900000      R     MOV     DPTR,#tempFID
0040 E0                MOVX    A,@DPTR
0041 B5060E            CJNE    A,AR6,?C0016
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 B50709            CJNE    A,AR7,?C0016
                                           ; SOURCE LINE # 76
0049 900000      R     MOV     DPTR,#current
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 22                RET     
                                           ; SOURCE LINE # 77
0052         ?C0016:
                                           ; SOURCE LINE # 81
0052 900000      R     MOV     DPTR,#current+01H
0055 E0                MOVX    A,@DPTR
0056 25E0              ADD     A,ACC
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 20  

0058 FF                MOV     R7,A
0059 900000      R     MOV     DPTR,#current
005C E0                MOVX    A,@DPTR
005D 33                RLC     A
005E FE                MOV     R6,A
005F EF                MOV     A,R7
0060 2410              ADD     A,#010H
0062 FF                MOV     R7,A
0063 EE                MOV     A,R6
0064 3401              ADDC    A,#01H
0066 FE                MOV     R6,A
0067 7B01              MOV     R3,#01H
0069 7A00        R     MOV     R2,#HIGH tempTag
006B 7900        R     MOV     R1,#LOW tempTag
006D 7D01              MOV     R5,#01H
006F 7C00              MOV     R4,#00H
0071 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 82
0074 900000      R     MOV     DPTR,#tempTag
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
0079 644F              XRL     A,#04FH
007B 6005              JZ      ?C0019
007D EF                MOV     A,R7
007E 643F              XRL     A,#03FH
0080 703B              JNZ     ?C0018
0082         ?C0019:
                                           ; SOURCE LINE # 83
0082 900000      R     MOV     DPTR,#current+01H
0085 E0                MOVX    A,@DPTR
0086 25E0              ADD     A,ACC
0088 FF                MOV     R7,A
0089 900000      R     MOV     DPTR,#current
008C E0                MOVX    A,@DPTR
008D 33                RLC     A
008E FE                MOV     R6,A
008F EF                MOV     A,R7
0090 2415              ADD     A,#015H
0092 FF                MOV     R7,A
0093 EE                MOV     A,R6
0094 3401              ADDC    A,#01H
0096 FE                MOV     R6,A
0097 7B01              MOV     R3,#01H
0099 7A00        R     MOV     R2,#HIGH child
009B 7900        R     MOV     R1,#LOW child
009D 7D02              MOV     R5,#02H
009F 7C00              MOV     R4,#00H
00A1 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 84
00A4 900000      R     MOV     DPTR,#child
00A7 E0                MOVX    A,@DPTR
00A8 FC                MOV     R4,A
00A9 A3                INC     DPTR
00AA E0                MOVX    A,@DPTR
00AB FD                MOV     R5,A
00AC F4                CPL     A
00AD 4C                ORL     A,R4
00AE 600D              JZ      ?C0018
                                           ; SOURCE LINE # 85
00B0 120000      R     LCALL   L?0181
;---- Variable 'tempChild' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 86
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 21  

00B3 EF                MOV     A,R7
00B4 F4                CPL     A
00B5 7003              JNZ     ?C0127
00B7 EE                MOV     A,R6
00B8 640F              XRL     A,#0FH
00BA         ?C0127:
00BA 6001              JZ      ?C0018
                                           ; SOURCE LINE # 87
00BC 22                RET     
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
00BD         ?C0018:
                                           ; SOURCE LINE # 92
00BD 900000      R     MOV     DPTR,#current+01H
00C0 E0                MOVX    A,@DPTR
00C1 25E0              ADD     A,ACC
00C3 FF                MOV     R7,A
00C4 900000      R     MOV     DPTR,#current
00C7 E0                MOVX    A,@DPTR
00C8 33                RLC     A
00C9 FE                MOV     R6,A
00CA EF                MOV     A,R7
00CB 2417              ADD     A,#017H
00CD FF                MOV     R7,A
00CE EE                MOV     A,R6
00CF 3401              ADDC    A,#01H
00D1 FE                MOV     R6,A
00D2 7B01              MOV     R3,#01H
00D4 7A00        R     MOV     R2,#HIGH sibling
00D6 7900        R     MOV     R1,#LOW sibling
00D8 7D02              MOV     R5,#02H
00DA 7C00              MOV     R4,#00H
00DC 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 93
00DF 900000      R     MOV     DPTR,#sibling
00E2 E0                MOVX    A,@DPTR
00E3 FC                MOV     R4,A
00E4 A3                INC     DPTR
00E5 E0                MOVX    A,@DPTR
00E6 FD                MOV     R5,A
00E7 F4                CPL     A
00E8 4C                ORL     A,R4
00E9 600D              JZ      ?C0022
                                           ; SOURCE LINE # 94
00EB 120000      R     LCALL   L?0181
;---- Variable 'tempSibling' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 95
00EE EF                MOV     A,R7
00EF F4                CPL     A
00F0 7003              JNZ     ?C0128
00F2 EE                MOV     A,R6
00F3 640F              XRL     A,#0FH
00F5         ?C0128:
00F5 6001              JZ      ?C0022
                                           ; SOURCE LINE # 96
00F7 22                RET     
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
00F8         ?C0022:
                                           ; SOURCE LINE # 100
00F8 7E0F              MOV     R6,#0FH
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 22  

00FA 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 101
00FC         ?C0017:
00FC 22                RET     
             ; FUNCTION _FS_CheckChildSibling_FID (END)

             ; FUNCTION _FS_SearchAllFID (BEGIN)
                                           ; SOURCE LINE # 103
;---- Variable 'fid' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 106
;---- Variable 'current' assigned to Register 'R4/R5' ----
0000 7D10              MOV     R5,#010H
0002 7C00              MOV     R4,#00H
                                           ; SOURCE LINE # 107
0004 120000      R     LCALL   _FS_CheckChildSibling_FID
;---- Variable 'result' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
0007         ?C0024:
0007 22                RET     
             ; FUNCTION _FS_SearchAllFID (END)

             ; FUNCTION _FSSearchFID (BEGIN)
                                           ; SOURCE LINE # 112
0000 900000      R     MOV     DPTR,#fid
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
0008 120000      E     LCALL   State_GetCurrent
000B 900000      R     MOV     DPTR,#current
000E EE                MOV     A,R6
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 121
0013 E0                MOVX    A,@DPTR
0014 25E0              ADD     A,ACC
0016 FF                MOV     R7,A
0017 900000      R     MOV     DPTR,#current
001A E0                MOVX    A,@DPTR
001B 33                RLC     A
001C FE                MOV     R6,A
001D EF                MOV     A,R7
001E 2413              ADD     A,#013H
0020 FF                MOV     R7,A
0021 EE                MOV     A,R6
0022 3401              ADDC    A,#01H
0024 FE                MOV     R6,A
0025 7B01              MOV     R3,#01H
0027 7A00        R     MOV     R2,#HIGH parent
0029 7900        R     MOV     R1,#LOW parent
002B 7D02              MOV     R5,#02H
002D 7C00              MOV     R4,#00H
002F 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 123
0032 900000      R     MOV     DPTR,#parent+01H
0035 E0                MOVX    A,@DPTR
0036 25E0              ADD     A,ACC
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 23  

0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#parent
003C E0                MOVX    A,@DPTR
003D 33                RLC     A
003E FE                MOV     R6,A
003F EF                MOV     A,R7
0040 2411              ADD     A,#011H
0042 FF                MOV     R7,A
0043 EE                MOV     A,R6
0044 3401              ADDC    A,#01H
0046 FE                MOV     R6,A
0047 7B01              MOV     R3,#01H
0049 7A00        R     MOV     R2,#HIGH tempFID
004B 7900        R     MOV     R1,#LOW tempFID
004D 7D02              MOV     R5,#02H
004F 7C00              MOV     R4,#00H
0051 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 125
0054 900000      R     MOV     DPTR,#fid
0057 E0                MOVX    A,@DPTR
0058 FE                MOV     R6,A
0059 A3                INC     DPTR
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C 900000      R     MOV     DPTR,#tempFID
005F E0                MOVX    A,@DPTR
0060 B5060B            CJNE    A,AR6,?C0025
0063 A3                INC     DPTR
0064 E0                MOVX    A,@DPTR
0065 B50706            CJNE    A,AR7,?C0025
                                           ; SOURCE LINE # 126
0068 900000      R     MOV     DPTR,#parent
006B 020000      R     LJMP    ?C0170
                                           ; SOURCE LINE # 127
006E         ?C0025:
                                           ; SOURCE LINE # 131
006E 900000      R     MOV     DPTR,#parent+01H
0071 E0                MOVX    A,@DPTR
0072 25E0              ADD     A,ACC
0074 FF                MOV     R7,A
0075 900000      R     MOV     DPTR,#parent
0078 E0                MOVX    A,@DPTR
0079 33                RLC     A
007A FE                MOV     R6,A
007B EF                MOV     A,R7
007C 2415              ADD     A,#015H
007E 8052              SJMP    ?C0169
0080         ?C0027:
                                           ; SOURCE LINE # 133
0080 900000      R     MOV     DPTR,#sibling
0083 E0                MOVX    A,@DPTR
0084 FE                MOV     R6,A
0085 A3                INC     DPTR
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 F4                CPL     A
0089 4E                ORL     A,R6
008A 605A              JZ      ?C0028
                                           ; SOURCE LINE # 134
008C EF                MOV     A,R7
008D 25E0              ADD     A,ACC
008F FF                MOV     R7,A
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 24  

0090 EE                MOV     A,R6
0091 33                RLC     A
0092 FE                MOV     R6,A
0093 EF                MOV     A,R7
0094 2411              ADD     A,#011H
0096 FF                MOV     R7,A
0097 EE                MOV     A,R6
0098 3401              ADDC    A,#01H
009A FE                MOV     R6,A
009B 7B01              MOV     R3,#01H
009D 7A00        R     MOV     R2,#HIGH tempFID
009F 7900        R     MOV     R1,#LOW tempFID
00A1 7D02              MOV     R5,#02H
00A3 7C00              MOV     R4,#00H
00A5 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 135
00A8 900000      R     MOV     DPTR,#fid
00AB E0                MOVX    A,@DPTR
00AC FE                MOV     R6,A
00AD A3                INC     DPTR
00AE E0                MOVX    A,@DPTR
00AF FF                MOV     R7,A
00B0 900000      R     MOV     DPTR,#tempFID
00B3 E0                MOVX    A,@DPTR
00B4 B5060B            CJNE    A,AR6,?C0029
00B7 A3                INC     DPTR
00B8 E0                MOVX    A,@DPTR
00B9 B50706            CJNE    A,AR7,?C0029
                                           ; SOURCE LINE # 136
00BC 900000      R     MOV     DPTR,#sibling
00BF         ?C0168:
00BF 020000      R     LJMP    ?C0170
                                           ; SOURCE LINE # 137
00C2         ?C0029:
                                           ; SOURCE LINE # 138
00C2 900000      R     MOV     DPTR,#sibling+01H
00C5 E0                MOVX    A,@DPTR
00C6 25E0              ADD     A,ACC
00C8 FF                MOV     R7,A
00C9 900000      R     MOV     DPTR,#sibling
00CC E0                MOVX    A,@DPTR
00CD 33                RLC     A
00CE FE                MOV     R6,A
00CF EF                MOV     A,R7
00D0 2417              ADD     A,#017H
00D2         ?C0169:
00D2 FF                MOV     R7,A
00D3 EE                MOV     A,R6
00D4 3401              ADDC    A,#01H
00D6 FE                MOV     R6,A
00D7 7B01              MOV     R3,#01H
00D9 7A00        R     MOV     R2,#HIGH sibling
00DB 7900        R     MOV     R1,#LOW sibling
00DD 7D02              MOV     R5,#02H
00DF 7C00              MOV     R4,#00H
00E1 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 139
00E4 809A              SJMP    ?C0027
00E6         ?C0028:
                                           ; SOURCE LINE # 143
00E6 900000      R     MOV     DPTR,#current+01H
00E9 E0                MOVX    A,@DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 25  

00EA 25E0              ADD     A,ACC
00EC FF                MOV     R7,A
00ED 900000      R     MOV     DPTR,#current
00F0 E0                MOVX    A,@DPTR
00F1 33                RLC     A
00F2 FE                MOV     R6,A
00F3 EF                MOV     A,R7
00F4 2410              ADD     A,#010H
00F6 FF                MOV     R7,A
00F7 EE                MOV     A,R6
00F8 3401              ADDC    A,#01H
00FA FE                MOV     R6,A
00FB 7B01              MOV     R3,#01H
00FD 7A00        R     MOV     R2,#HIGH tempTag
00FF 7900        R     MOV     R1,#LOW tempTag
0101 7D01              MOV     R5,#01H
0103 7C00              MOV     R4,#00H
0105 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 144
0108 900000      R     MOV     DPTR,#tempTag
010B E0                MOVX    A,@DPTR
010C FF                MOV     R7,A
010D 644F              XRL     A,#04FH
010F 6005              JZ      ?C0031
0111 EF                MOV     A,R7
0112 643F              XRL     A,#03FH
0114 707B              JNZ     ?C0030
0116         ?C0031:
                                           ; SOURCE LINE # 146
0116 900000      R     MOV     DPTR,#current+01H
0119 E0                MOVX    A,@DPTR
011A 25E0              ADD     A,ACC
011C FF                MOV     R7,A
011D 900000      R     MOV     DPTR,#current
0120 E0                MOVX    A,@DPTR
0121 33                RLC     A
0122 FE                MOV     R6,A
0123 EF                MOV     A,R7
0124 2415              ADD     A,#015H
0126 8055              SJMP    ?C0171
0128         ?C0032:
                                           ; SOURCE LINE # 148
0128 900000      R     MOV     DPTR,#child
012B E0                MOVX    A,@DPTR
012C FE                MOV     R6,A
012D A3                INC     DPTR
012E E0                MOVX    A,@DPTR
012F FF                MOV     R7,A
0130 F4                CPL     A
0131 4E                ORL     A,R6
0132 605D              JZ      ?C0030
                                           ; SOURCE LINE # 149
0134 EF                MOV     A,R7
0135 25E0              ADD     A,ACC
0137 FF                MOV     R7,A
0138 EE                MOV     A,R6
0139 33                RLC     A
013A FE                MOV     R6,A
013B EF                MOV     A,R7
013C 2411              ADD     A,#011H
013E FF                MOV     R7,A
013F EE                MOV     A,R6
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 26  

0140 3401              ADDC    A,#01H
0142 FE                MOV     R6,A
0143 7B01              MOV     R3,#01H
0145 7A00        R     MOV     R2,#HIGH tempFID
0147 7900        R     MOV     R1,#LOW tempFID
0149 7D02              MOV     R5,#02H
014B 7C00              MOV     R4,#00H
014D 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 150
0150 900000      R     MOV     DPTR,#fid
0153 E0                MOVX    A,@DPTR
0154 FE                MOV     R6,A
0155 A3                INC     DPTR
0156 E0                MOVX    A,@DPTR
0157 FF                MOV     R7,A
0158 900000      R     MOV     DPTR,#tempFID
015B E0                MOVX    A,@DPTR
015C B5060E            CJNE    A,AR6,?C0034
015F A3                INC     DPTR
0160 E0                MOVX    A,@DPTR
0161 B50709            CJNE    A,AR7,?C0034
                                           ; SOURCE LINE # 151
0164 900000      R     MOV     DPTR,#child
0167         ?C0170:
0167 E0                MOVX    A,@DPTR
0168 FE                MOV     R6,A
0169 A3                INC     DPTR
016A E0                MOVX    A,@DPTR
016B FF                MOV     R7,A
016C 22                RET     
                                           ; SOURCE LINE # 152
016D         ?C0034:
                                           ; SOURCE LINE # 153
016D 900000      R     MOV     DPTR,#child+01H
0170 E0                MOVX    A,@DPTR
0171 25E0              ADD     A,ACC
0173 FF                MOV     R7,A
0174 900000      R     MOV     DPTR,#child
0177 E0                MOVX    A,@DPTR
0178 33                RLC     A
0179 FE                MOV     R6,A
017A EF                MOV     A,R7
017B 2417              ADD     A,#017H
017D         ?C0171:
017D FF                MOV     R7,A
017E EE                MOV     A,R6
017F 3401              ADDC    A,#01H
0181 FE                MOV     R6,A
0182 7B01              MOV     R3,#01H
0184 7A00        R     MOV     R2,#HIGH child
0186 7900        R     MOV     R1,#LOW child
0188 7D02              MOV     R5,#02H
018A 7C00              MOV     R4,#00H
018C 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 154
018F 8097              SJMP    ?C0032
                                           ; SOURCE LINE # 155
0191         ?C0030:
                                           ; SOURCE LINE # 156
0191 7E00              MOV     R6,#00H
0193 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 157
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 27  

0195         ?C0026:
0195 22                RET     
             ; FUNCTION _FSSearchFID (END)

             ; FUNCTION _FS_SelectFID (BEGIN)
                                           ; SOURCE LINE # 159
;---- Variable 'fid' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 162
0000 120000      R     LCALL   _FSSearchFID
;---- Variable 'file' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 163
0003 EF                MOV     A,R7
0004 F4                CPL     A
0005 4E                ORL     A,R6
0006 7004              JNZ     ?C0035
                                           ; SOURCE LINE # 164
0008 FE                MOV     R6,A
0009 7F20              MOV     R7,#020H
000B 22                RET     
000C         ?C0035:
                                           ; SOURCE LINE # 166
000C 120000      E     LCALL   _State_SetCurrent
                                           ; SOURCE LINE # 167
000F E4                CLR     A
0010 FE                MOV     R6,A
0011 FF                MOV     R7,A
                                           ; SOURCE LINE # 168
0012         ?C0036:
0012 22                RET     
             ; FUNCTION _FS_SelectFID (END)

             ; FUNCTION _FSAccessBinary (BEGIN)
                                           ; SOURCE LINE # 170
0000 900000      R     MOV     DPTR,#op
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EC                MOV     A,R4
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EA                MOV     A,R2
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 EB                MOV     A,R3
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
0014 120000      E     LCALL   State_GetCurrent
;---- Variable 'header' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 174
0017 EF                MOV     A,R7
0018 25E0              ADD     A,ACC
001A FF                MOV     R7,A
001B EE                MOV     A,R6
001C 33                RLC     A
001D FE                MOV     R6,A
001E EF                MOV     A,R7
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 28  

001F 2419              ADD     A,#019H
0021 FF                MOV     R7,A
0022 EE                MOV     A,R6
0023 3401              ADDC    A,#01H
0025 FE                MOV     R6,A
0026 7B01              MOV     R3,#01H
0028 7A00        R     MOV     R2,#HIGH body
002A 7900        R     MOV     R1,#LOW body
002C 7D02              MOV     R5,#02H
002E 7C00              MOV     R4,#00H
0030 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 176
0033 900000      R     MOV     DPTR,#op
0036 E0                MOVX    A,@DPTR
0037 7002              JNZ     ?C0132
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B         ?C0132:
003B 7078              JNZ     ?C0037
                                           ; SOURCE LINE # 177
003D 900000      R     MOV     DPTR,#length
0040 E0                MOVX    A,@DPTR
0041 7002              JNZ     ?C0133
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045         ?C0133:
0045 7022              JNZ     ?C0038
                                           ; SOURCE LINE # 178
0047 900000      R     MOV     DPTR,#body+01H
004A E0                MOVX    A,@DPTR
004B 25E0              ADD     A,ACC
004D FF                MOV     R7,A
004E 900000      R     MOV     DPTR,#body
0051 E0                MOVX    A,@DPTR
0052 33                RLC     A
0053 FE                MOV     R6,A
0054 EF                MOV     A,R7
0055 2413              ADD     A,#013H
0057 FF                MOV     R7,A
0058 EE                MOV     A,R6
0059 3401              ADDC    A,#01H
005B FE                MOV     R6,A
005C 7B01              MOV     R3,#01H
005E 7A00        R     MOV     R2,#HIGH length
0060 7900        R     MOV     R1,#LOW length
0062 7D02              MOV     R5,#02H
0064 7C00              MOV     R4,#00H
0066 120000      E     LCALL   _Memory_ReadBlock
0069         ?C0038:
                                           ; SOURCE LINE # 180
0069 D3                SETB    C
006A 900000      R     MOV     DPTR,#length+01H
006D E0                MOVX    A,@DPTR
006E 9400              SUBB    A,#00H
0070 900000      R     MOV     DPTR,#length
0073 E0                MOVX    A,@DPTR
0074 9401              SUBB    A,#01H
0076 4006              JC      ?C0039
                                           ; SOURCE LINE # 181
0078 7401              MOV     A,#01H
007A F0                MOVX    @DPTR,A
007B A3                INC     DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 29  

007C E4                CLR     A
007D F0                MOVX    @DPTR,A
007E         ?C0039:
                                           ; SOURCE LINE # 183
007E 900000      R     MOV     DPTR,#body+01H
0081 E0                MOVX    A,@DPTR
0082 25E0              ADD     A,ACC
0084 FF                MOV     R7,A
0085 900000      R     MOV     DPTR,#body
0088 E0                MOVX    A,@DPTR
0089 33                RLC     A
008A FE                MOV     R6,A
008B EF                MOV     A,R7
008C 2415              ADD     A,#015H
008E FF                MOV     R7,A
008F EE                MOV     A,R6
0090 3401              ADDC    A,#01H
0092 FE                MOV     R6,A
0093 900000      R     MOV     DPTR,#offset+01H
0096 E0                MOVX    A,@DPTR
0097 2F                ADD     A,R7
0098 FF                MOV     R7,A
0099 900000      R     MOV     DPTR,#offset
009C E0                MOVX    A,@DPTR
009D 3E                ADDC    A,R6
009E FE                MOV     R6,A
009F 900000      R     MOV     DPTR,#length
00A2 E0                MOVX    A,@DPTR
00A3 FC                MOV     R4,A
00A4 A3                INC     DPTR
00A5 E0                MOVX    A,@DPTR
00A6 FD                MOV     R5,A
00A7 A3                INC     DPTR
00A8 E0                MOVX    A,@DPTR
00A9 FB                MOV     R3,A
00AA A3                INC     DPTR
00AB E0                MOVX    A,@DPTR
00AC FA                MOV     R2,A
00AD A3                INC     DPTR
00AE E0                MOVX    A,@DPTR
00AF F9                MOV     R1,A
00B0 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 184
00B3 8041              SJMP    ?C0040
00B5         ?C0037:
                                           ; SOURCE LINE # 185
00B5 900000      R     MOV     DPTR,#op
00B8 E0                MOVX    A,@DPTR
00B9 7004              JNZ     ?C0134
00BB A3                INC     DPTR
00BC E0                MOVX    A,@DPTR
00BD 6401              XRL     A,#01H
00BF         ?C0134:
00BF 7035              JNZ     ?C0040
                                           ; SOURCE LINE # 186
00C1 900000      R     MOV     DPTR,#body+01H
00C4 E0                MOVX    A,@DPTR
00C5 25E0              ADD     A,ACC
00C7 FF                MOV     R7,A
00C8 900000      R     MOV     DPTR,#body
00CB E0                MOVX    A,@DPTR
00CC 33                RLC     A
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 30  

00CD FE                MOV     R6,A
00CE EF                MOV     A,R7
00CF 2415              ADD     A,#015H
00D1 FF                MOV     R7,A
00D2 EE                MOV     A,R6
00D3 3401              ADDC    A,#01H
00D5 FE                MOV     R6,A
00D6 900000      R     MOV     DPTR,#offset+01H
00D9 E0                MOVX    A,@DPTR
00DA 2F                ADD     A,R7
00DB FF                MOV     R7,A
00DC 900000      R     MOV     DPTR,#offset
00DF E0                MOVX    A,@DPTR
00E0 3E                ADDC    A,R6
00E1 FE                MOV     R6,A
00E2 900000      R     MOV     DPTR,#length
00E5 E0                MOVX    A,@DPTR
00E6 FC                MOV     R4,A
00E7 A3                INC     DPTR
00E8 E0                MOVX    A,@DPTR
00E9 FD                MOV     R5,A
00EA A3                INC     DPTR
00EB E0                MOVX    A,@DPTR
00EC FB                MOV     R3,A
00ED A3                INC     DPTR
00EE E0                MOVX    A,@DPTR
00EF FA                MOV     R2,A
00F0 A3                INC     DPTR
00F1 E0                MOVX    A,@DPTR
00F2 F9                MOV     R1,A
00F3 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 187
00F6         ?C0040:
                                           ; SOURCE LINE # 188
00F6 900000      R     MOV     DPTR,#length
00F9 E0                MOVX    A,@DPTR
00FA FE                MOV     R6,A
00FB A3                INC     DPTR
00FC E0                MOVX    A,@DPTR
00FD FF                MOV     R7,A
                                           ; SOURCE LINE # 189
00FE         ?C0042:
00FE 22                RET     
             ; FUNCTION _FSAccessBinary (END)

             ; FUNCTION L?0179 (BEGIN)
0000         L?0180:
0000 900000      R     MOV     DPTR,#?_FSAlloc?BYTE+06H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 7400        R     MOV     A,#HIGH bodyBlock
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B 7400        R     MOV     A,#LOW bodyBlock
000D F0                MOVX    @DPTR,A
000E 7B00              MOV     R3,#00H
0010 7A01              MOV     R2,#01H
0012 7D50              MOV     R5,#050H
0014 7C00              MOV     R4,#00H
             ; FUNCTION _FSAlloc (BEGIN)
                                           ; SOURCE LINE # 191
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 31  

0016 900000      R     MOV     DPTR,#size_alloc
0019 EE                MOV     A,R6
001A F0                MOVX    @DPTR,A
001B A3                INC     DPTR
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
001E A3                INC     DPTR
001F EC                MOV     A,R4
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 ED                MOV     A,R5
0023 F0                MOVX    @DPTR,A
0024 A3                INC     DPTR
0025 EA                MOV     A,R2
0026 F0                MOVX    @DPTR,A
0027 A3                INC     DPTR
0028 EB                MOV     A,R3
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
002A E4                CLR     A
002B 900000      R     MOV     DPTR,#free
002E F0                MOVX    @DPTR,A
002F A3                INC     DPTR
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
0031 A3                INC     DPTR
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
0033 C200        R     CLR     cont
                                           ; SOURCE LINE # 200
0035 900000      R     MOV     DPTR,#startBlock
0038 E0                MOVX    A,@DPTR
0039 FE                MOV     R6,A
003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
003C 7803              MOV     R0,#03H
003E         ?C0135:
003E CE                XCH     A,R6
003F C3                CLR     C
0040 13                RRC     A
0041 CE                XCH     A,R6
0042 13                RRC     A
0043 D8F9              DJNZ    R0,?C0135
0045 FF                MOV     R7,A
0046 900000      R     MOV     DPTR,#i
0049 EE                MOV     A,R6
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
004E         ?C0043:
004E 900000      R     MOV     DPTR,#endBlock
0051 E0                MOVX    A,@DPTR
0052 FE                MOV     R6,A
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 7803              MOV     R0,#03H
0057         ?C0136:
0057 CE                XCH     A,R6
0058 C3                CLR     C
0059 13                RRC     A
005A CE                XCH     A,R6
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 32  

005B 13                RRC     A
005C D8F9              DJNZ    R0,?C0136
005E FF                MOV     R7,A
005F 900000      R     MOV     DPTR,#i
0062 E0                MOVX    A,@DPTR
0063 FC                MOV     R4,A
0064 A3                INC     DPTR
0065 E0                MOVX    A,@DPTR
0066 FD                MOV     R5,A
0067 C3                CLR     C
0068 9F                SUBB    A,R7
0069 EC                MOV     A,R4
006A 9E                SUBB    A,R6
006B 4003              JC      $ + 5H
006D 020000      R     LJMP    ?C0044
                                           ; SOURCE LINE # 202
0070 ED                MOV     A,R5
0071 2410              ADD     A,#010H
0073 FF                MOV     R7,A
0074 EC                MOV     A,R4
0075 3401              ADDC    A,#01H
0077 FE                MOV     R6,A
0078 120000      E     LCALL   _Memory_ReadByte
007B 900000      R     MOV     DPTR,#temp
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0080 900000      R     MOV     DPTR,#startBlock
0083 E0                MOVX    A,@DPTR
0084 FC                MOV     R4,A
0085 A3                INC     DPTR
0086 E0                MOVX    A,@DPTR
0087 FD                MOV     R5,A
0088 AE04              MOV     R6,AR4
008A 7803              MOV     R0,#03H
008C         ?C0137:
008C CE                XCH     A,R6
008D C3                CLR     C
008E 13                RRC     A
008F CE                XCH     A,R6
0090 13                RRC     A
0091 D8F9              DJNZ    R0,?C0137
0093 FF                MOV     R7,A
0094 900000      R     MOV     DPTR,#i
0097 E0                MOVX    A,@DPTR
0098 FA                MOV     R2,A
0099 A3                INC     DPTR
009A E0                MOVX    A,@DPTR
009B FB                MOV     R3,A
009C B5070C            CJNE    A,AR7,?C0046
009F EA                MOV     A,R2
00A0 B50608            CJNE    A,AR6,?C0046
00A3 7E00              MOV     R6,#00H
00A5 ED                MOV     A,R5
00A6 5407              ANL     A,#07H
00A8 FF                MOV     R7,A
00A9 8004              SJMP    ?C0047
00AB         ?C0046:
00AB 7E00              MOV     R6,#00H
00AD 7F00              MOV     R7,#00H
00AF         ?C0047:
;---- Variable 'startSearchBit' assigned to Register 'R4/R5' ----
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 33  

00AF AD07              MOV     R5,AR7
00B1 AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 205
00B3 900000      R     MOV     DPTR,#endBlock
00B6 E0                MOVX    A,@DPTR
00B7 FE                MOV     R6,A
00B8 A3                INC     DPTR
00B9 E0                MOVX    A,@DPTR
00BA 7803              MOV     R0,#03H
00BC         ?C0139:
00BC CE                XCH     A,R6
00BD C3                CLR     C
00BE 13                RRC     A
00BF CE                XCH     A,R6
00C0 13                RRC     A
00C1 D8F9              DJNZ    R0,?C0139
00C3 24FF              ADD     A,#0FFH
00C5 FF                MOV     R7,A
00C6 EE                MOV     A,R6
00C7 34FF              ADDC    A,#0FFH
00C9 FE                MOV     R6,A
00CA EB                MOV     A,R3
00CB B5070F            CJNE    A,AR7,?C0048
00CE EA                MOV     A,R2
00CF B5060B            CJNE    A,AR6,?C0048
00D2 7E00              MOV     R6,#00H
00D4 900000      R     MOV     DPTR,#endBlock+01H
00D7 E0                MOVX    A,@DPTR
00D8 5407              ANL     A,#07H
00DA FF                MOV     R7,A
00DB 8004              SJMP    ?C0049
00DD         ?C0048:
00DD 7E00              MOV     R6,#00H
00DF 7F08              MOV     R7,#08H
00E1         ?C0049:
00E1 900000      R     MOV     DPTR,#stopSearchBit
00E4 EE                MOV     A,R6
00E5 F0                MOVX    @DPTR,A
00E6 A3                INC     DPTR
00E7 EF                MOV     A,R7
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
00E9 AF05              MOV     R7,AR5
00EB 900000      R     MOV     DPTR,#j
00EE EC                MOV     A,R4
00EF F0                MOVX    @DPTR,A
00F0 A3                INC     DPTR
00F1 EF                MOV     A,R7
00F2 F0                MOVX    @DPTR,A
00F3         ?C0050:
00F3 900000      R     MOV     DPTR,#stopSearchBit
00F6 E0                MOVX    A,@DPTR
00F7 FE                MOV     R6,A
00F8 A3                INC     DPTR
00F9 E0                MOVX    A,@DPTR
00FA FF                MOV     R7,A
00FB 900000      R     MOV     DPTR,#j
00FE E0                MOVX    A,@DPTR
00FF FC                MOV     R4,A
0100 A3                INC     DPTR
0101 E0                MOVX    A,@DPTR
0102 FD                MOV     R5,A
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 34  

0103 C3                CLR     C
0104 9F                SUBB    A,R7
0105 EC                MOV     A,R4
0106 9E                SUBB    A,R6
0107 4003              JC      $ + 5H
0109 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 210
010C 900000      R     MOV     DPTR,#temp
010F E0                MOVX    A,@DPTR
0110 20E703            JB      ACC.7,$ + 6H
0113 020000      R     LJMP    ?C0053
                                           ; SOURCE LINE # 212
0116 20002E      R     JB      cont,?C0054
                                           ; SOURCE LINE # 214
0119 D200        R     SETB    cont
                                           ; SOURCE LINE # 215
011B 900000      R     MOV     DPTR,#i
011E E0                MOVX    A,@DPTR
011F FA                MOV     R2,A
0120 A3                INC     DPTR
0121 E0                MOVX    A,@DPTR
0122 FB                MOV     R3,A
0123 AE02              MOV     R6,AR2
0125 7803              MOV     R0,#03H
0127         ?C0141:
0127 C3                CLR     C
0128 33                RLC     A
0129 CE                XCH     A,R6
012A 33                RLC     A
012B CE                XCH     A,R6
012C D8F9              DJNZ    R0,?C0141
012E 2D                ADD     A,R5
012F FF                MOV     R7,A
0130 EC                MOV     A,R4
0131 3E                ADDC    A,R6
0132 900000      R     MOV     DPTR,#tempAddress
0135 F0                MOVX    @DPTR,A
0136 A3                INC     DPTR
0137 EF                MOV     A,R7
0138 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
0139 900000      R     MOV     DPTR,#startbyte
013C EA                MOV     A,R2
013D F0                MOVX    @DPTR,A
013E A3                INC     DPTR
013F EB                MOV     A,R3
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0141 A3                INC     DPTR
0142 EC                MOV     A,R4
0143 F0                MOVX    @DPTR,A
0144 A3                INC     DPTR
0145 ED                MOV     A,R5
0146 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
0147         ?C0054:
                                           ; SOURCE LINE # 221
0147 900000      R     MOV     DPTR,#free+01H
014A E0                MOVX    A,@DPTR
014B 04                INC     A
014C F0                MOVX    @DPTR,A
014D 7006              JNZ     ?C0142
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 35  

014F 900000      R     MOV     DPTR,#free
0152 E0                MOVX    A,@DPTR
0153 04                INC     A
0154 F0                MOVX    @DPTR,A
0155         ?C0142:
                                           ; SOURCE LINE # 224
0155 900000      R     MOV     DPTR,#size_alloc
0158 E0                MOVX    A,@DPTR
0159 FE                MOV     R6,A
015A A3                INC     DPTR
015B E0                MOVX    A,@DPTR
015C FF                MOV     R7,A
015D 900000      R     MOV     DPTR,#free
0160 E0                MOVX    A,@DPTR
0161 6E                XRL     A,R6
0162 7003              JNZ     ?C0143
0164 A3                INC     DPTR
0165 E0                MOVX    A,@DPTR
0166 6F                XRL     A,R7
0167         ?C0143:
0167 6003              JZ      $ + 5H
0169 020000      R     LJMP    ?C0064
                                           ; SOURCE LINE # 225
016C 900000      R     MOV     DPTR,#i
016F E0                MOVX    A,@DPTR
0170 FF                MOV     R7,A
0171 A3                INC     DPTR
0172 E0                MOVX    A,@DPTR
0173 900000      R     MOV     DPTR,#stopbyte
0176 CF                XCH     A,R7
0177 F0                MOVX    @DPTR,A
0178 A3                INC     DPTR
0179 EF                MOV     A,R7
017A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
017B 900000      R     MOV     DPTR,#j
017E E0                MOVX    A,@DPTR
017F FF                MOV     R7,A
0180 A3                INC     DPTR
0181 E0                MOVX    A,@DPTR
0182 900000      R     MOV     DPTR,#stopbit
0185 CF                XCH     A,R7
0186 F0                MOVX    @DPTR,A
0187 A3                INC     DPTR
0188 EF                MOV     A,R7
0189 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
018A 900000      R     MOV     DPTR,#startbyte
018D E0                MOVX    A,@DPTR
018E FF                MOV     R7,A
018F A3                INC     DPTR
0190 E0                MOVX    A,@DPTR
0191 900000      R     MOV     DPTR,#k
0194 CF                XCH     A,R7
0195 F0                MOVX    @DPTR,A
0196 A3                INC     DPTR
0197 EF                MOV     A,R7
0198 F0                MOVX    @DPTR,A
0199         ?C0056:
                                           ; SOURCE LINE # 229
0199 900000      R     MOV     DPTR,#stopbyte
019C E0                MOVX    A,@DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 36  

019D FE                MOV     R6,A
019E A3                INC     DPTR
019F E0                MOVX    A,@DPTR
01A0 FF                MOV     R7,A
01A1 900000      R     MOV     DPTR,#k
01A4 E0                MOVX    A,@DPTR
01A5 FC                MOV     R4,A
01A6 A3                INC     DPTR
01A7 E0                MOVX    A,@DPTR
01A8 FD                MOV     R5,A
01A9 D3                SETB    C
01AA 9F                SUBB    A,R7
01AB EC                MOV     A,R4
01AC 9E                SUBB    A,R6
01AD 4003              JC      $ + 5H
01AF 020000      R     LJMP    ?C0057
                                           ; SOURCE LINE # 230
01B2 E4                CLR     A
01B3 A3                INC     DPTR
01B4 F0                MOVX    @DPTR,A
01B5 A3                INC     DPTR
01B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
01B7 A3                INC     DPTR
01B8 F0                MOVX    @DPTR,A
01B9 A3                INC     DPTR
01BA 7408              MOV     A,#08H
01BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
01BD A3                INC     DPTR
01BE E0                MOVX    A,@DPTR
01BF FA                MOV     R2,A
01C0 A3                INC     DPTR
01C1 E0                MOVX    A,@DPTR
01C2 FB                MOV     R3,A
01C3 ED                MOV     A,R5
01C4 B50311            CJNE    A,AR3,?C0058
01C7 EC                MOV     A,R4
01C8 B5020D            CJNE    A,AR2,?C0058
01CB A3                INC     DPTR
01CC E0                MOVX    A,@DPTR
01CD FB                MOV     R3,A
01CE A3                INC     DPTR
01CF E0                MOVX    A,@DPTR
01D0 900000      R     MOV     DPTR,#m
01D3 CB                XCH     A,R3
01D4 F0                MOVX    @DPTR,A
01D5 A3                INC     DPTR
01D6 EB                MOV     A,R3
01D7 F0                MOVX    @DPTR,A
01D8         ?C0058:
                                           ; SOURCE LINE # 233
01D8 ED                MOV     A,R5
01D9 B50713            CJNE    A,AR7,?C0059
01DC EC                MOV     A,R4
01DD B5060F            CJNE    A,AR6,?C0059
01E0 900000      R     MOV     DPTR,#stopbit
01E3 E0                MOVX    A,@DPTR
01E4 FF                MOV     R7,A
01E5 A3                INC     DPTR
01E6 E0                MOVX    A,@DPTR
01E7 900000      R     MOV     DPTR,#n
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 37  

01EA CF                XCH     A,R7
01EB F0                MOVX    @DPTR,A
01EC A3                INC     DPTR
01ED EF                MOV     A,R7
01EE F0                MOVX    @DPTR,A
01EF         ?C0059:
                                           ; SOURCE LINE # 235
01EF         ?C0060:
01EF 900000      R     MOV     DPTR,#n
01F2 E0                MOVX    A,@DPTR
01F3 FE                MOV     R6,A
01F4 A3                INC     DPTR
01F5 E0                MOVX    A,@DPTR
01F6 FF                MOV     R7,A
01F7 D3                SETB    C
01F8 900000      R     MOV     DPTR,#m+01H
01FB E0                MOVX    A,@DPTR
01FC 9F                SUBB    A,R7
01FD 900000      R     MOV     DPTR,#m
0200 E0                MOVX    A,@DPTR
0201 9E                SUBB    A,R6
0202 504F              JNC     ?C0061
                                           ; SOURCE LINE # 236
0204 900000      R     MOV     DPTR,#k+01H
0207 E0                MOVX    A,@DPTR
0208 2410              ADD     A,#010H
020A FF                MOV     R7,A
020B 900000      R     MOV     DPTR,#k
020E E0                MOVX    A,@DPTR
020F 3401              ADDC    A,#01H
0211 FE                MOV     R6,A
0212 120000      E     LCALL   _Memory_ReadByte
0215 900000      R     MOV     DPTR,#temp
0218 EF                MOV     A,R7
0219 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
021A 900000      R     MOV     DPTR,#m
021D A3                INC     DPTR
021E E0                MOVX    A,@DPTR
021F FE                MOV     R6,A
0220 7480              MOV     A,#080H
0222 A806              MOV     R0,AR6
0224 08                INC     R0
0225 8002              SJMP    ?C0147
0227         ?C0146:
0227 C3                CLR     C
0228 13                RRC     A
0229         ?C0147:
0229 D8FC              DJNZ    R0,?C0146
022B F4                CPL     A
022C 5F                ANL     A,R7
022D 900000      R     MOV     DPTR,#temp
0230 F0                MOVX    @DPTR,A
0231 FD                MOV     R5,A
                                           ; SOURCE LINE # 238
0232 900000      R     MOV     DPTR,#k+01H
0235 E0                MOVX    A,@DPTR
0236 2410              ADD     A,#010H
0238 FF                MOV     R7,A
0239 900000      R     MOV     DPTR,#k
023C E0                MOVX    A,@DPTR
023D 3401              ADDC    A,#01H
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 38  

023F FE                MOV     R6,A
0240 120000      E     LCALL   _Memory_WriteByte
                                           ; SOURCE LINE # 239
0243 900000      R     MOV     DPTR,#m+01H
0246 E0                MOVX    A,@DPTR
0247 04                INC     A
0248 F0                MOVX    @DPTR,A
0249 70A4              JNZ     ?C0060
024B 900000      R     MOV     DPTR,#m
024E E0                MOVX    A,@DPTR
024F 04                INC     A
0250 F0                MOVX    @DPTR,A
0251         ?C0148:
0251 809C              SJMP    ?C0060
0253         ?C0061:
                                           ; SOURCE LINE # 240
0253 900000      R     MOV     DPTR,#k+01H
0256 E0                MOVX    A,@DPTR
0257 04                INC     A
0258 F0                MOVX    @DPTR,A
0259 7006              JNZ     ?C0149
025B 900000      R     MOV     DPTR,#k
025E E0                MOVX    A,@DPTR
025F 04                INC     A
0260 F0                MOVX    @DPTR,A
0261         ?C0149:
                                           ; SOURCE LINE # 241
0261 020000      R     LJMP    ?C0056
0264         ?C0057:
                                           ; SOURCE LINE # 244
0264 900000      R     MOV     DPTR,#tempAddress
0267 E0                MOVX    A,@DPTR
0268 F9                MOV     R1,A
0269 A3                INC     DPTR
026A E0                MOVX    A,@DPTR
026B FF                MOV     R7,A
026C 900000      R     MOV     DPTR,#address
026F E0                MOVX    A,@DPTR
0270 FB                MOV     R3,A
0271 A3                INC     DPTR
0272 E0                MOVX    A,@DPTR
0273 FA                MOV     R2,A
0274 A3                INC     DPTR
0275 E0                MOVX    A,@DPTR
0276 C9                XCH     A,R1
0277 8FF0              MOV     B,R7
0279 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 245
027C E4                CLR     A
027D FE                MOV     R6,A
027E FF                MOV     R7,A
027F 22                RET     
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
0280         ?C0053:
                                           ; SOURCE LINE # 249
0280 300009      R     JNB     cont,?C0064
                                           ; SOURCE LINE # 250
0283 C200        R     CLR     cont
                                           ; SOURCE LINE # 251
0285 E4                CLR     A
0286 900000      R     MOV     DPTR,#free
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 39  

0289 F0                MOVX    @DPTR,A
028A A3                INC     DPTR
028B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
028C         ?C0064:
                                           ; SOURCE LINE # 254
028C 900000      R     MOV     DPTR,#temp
028F E0                MOVX    A,@DPTR
0290 25E0              ADD     A,ACC
0292 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
0293 900000      R     MOV     DPTR,#j+01H
0296 E0                MOVX    A,@DPTR
0297 04                INC     A
0298 F0                MOVX    @DPTR,A
0299 7006              JNZ     ?C0150
029B 900000      R     MOV     DPTR,#j
029E E0                MOVX    A,@DPTR
029F 04                INC     A
02A0 F0                MOVX    @DPTR,A
02A1         ?C0150:
02A1 020000      R     LJMP    ?C0050
                                           ; SOURCE LINE # 256
02A4         ?C0045:
02A4 900000      R     MOV     DPTR,#i+01H
02A7 E0                MOVX    A,@DPTR
02A8 04                INC     A
02A9 F0                MOVX    @DPTR,A
02AA 6003              JZ      $ + 5H
02AC 020000      R     LJMP    ?C0043
02AF 900000      R     MOV     DPTR,#i
02B2 E0                MOVX    A,@DPTR
02B3 04                INC     A
02B4 F0                MOVX    @DPTR,A
02B5         ?C0151:
02B5 020000      R     LJMP    ?C0043
02B8         ?C0044:
                                           ; SOURCE LINE # 257
02B8 7E00              MOV     R6,#00H
02BA 7F1F              MOV     R7,#01FH
                                           ; SOURCE LINE # 258
02BC         ?C0063:
02BC 22                RET     
             ; FUNCTION _FSAlloc (END)

             ; FUNCTION FSFormat (BEGIN)
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 263
0000 900000      R     MOV     DPTR,#none16
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 74FF              MOV     A,#0FFH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
0009 A3                INC     DPTR
000A 743F              MOV     A,#03FH
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 40  

                                           ; SOURCE LINE # 265
0010 A3                INC     DPTR
0011 743F              MOV     A,#03FH
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
0014 E4                CLR     A
0015 900000      R     MOV     DPTR,#i
0018 F0                MOVX    @DPTR,A
0019 A3                INC     DPTR
001A F0                MOVX    @DPTR,A
001B         ?C0066:
001B 900000      R     MOV     DPTR,#i
001E E0                MOVX    A,@DPTR
001F FE                MOV     R6,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 C3                CLR     C
0024 9420              SUBB    A,#020H
0026 EE                MOV     A,R6
0027 9400              SUBB    A,#00H
0029 501D              JNC     ?C0067
                                           ; SOURCE LINE # 270
002B EF                MOV     A,R7
002C 2410              ADD     A,#010H
002E FF                MOV     R7,A
002F EE                MOV     A,R6
0030 3401              ADDC    A,#01H
0032 FE                MOV     R6,A
0033 7DFF              MOV     R5,#0FFH
0035 120000      E     LCALL   _Memory_WriteByte
                                           ; SOURCE LINE # 271
0038 900000      R     MOV     DPTR,#i+01H
003B E0                MOVX    A,@DPTR
003C 04                INC     A
003D F0                MOVX    @DPTR,A
003E 70DB              JNZ     ?C0066
0040 900000      R     MOV     DPTR,#i
0043 E0                MOVX    A,@DPTR
0044 04                INC     A
0045 F0                MOVX    @DPTR,A
0046         ?C0152:
0046 80D3              SJMP    ?C0066
0048         ?C0067:
                                           ; SOURCE LINE # 272
0048 900000      R     MOV     DPTR,#?_FSAlloc?BYTE+06H
004B 7401              MOV     A,#01H
004D F0                MOVX    @DPTR,A
004E A3                INC     DPTR
004F 7400        R     MOV     A,#HIGH headerBlock
0051 F0                MOVX    @DPTR,A
0052 A3                INC     DPTR
0053 7400        R     MOV     A,#LOW headerBlock
0055 F0                MOVX    @DPTR,A
0056 7B50              MOV     R3,#050H
0058 7A00              MOV     R2,#00H
005A 7D10              MOV     R5,#010H
005C 7C00              MOV     R4,#00H
005E 7F06              MOV     R7,#06H
0060 7E00              MOV     R6,#00H
0062 120000      R     LCALL   _FSAlloc
;---- Variable 'status' assigned to Register 'R6/R7' ----
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 41  

                                           ; SOURCE LINE # 274
0065 EF                MOV     A,R7
0066 4E                ORL     A,R6
0067 6003              JZ      $ + 5H
0069 020000      R     LJMP    ?C0069
006C 900000      R     MOV     DPTR,#headerBlock
006F E0                MOVX    A,@DPTR
0070 FE                MOV     R6,A
0071 A3                INC     DPTR
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 6410              XRL     A,#010H
0076 4E                ORL     A,R6
0077 6003              JZ      $ + 5H
0079 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 275
007C EF                MOV     A,R7
007D 25E0              ADD     A,ACC
007F FF                MOV     R7,A
0080 EE                MOV     A,R6
0081 33                RLC     A
0082 FE                MOV     R6,A
0083 EF                MOV     A,R7
0084 2410              ADD     A,#010H
0086 FF                MOV     R7,A
0087 EE                MOV     A,R6
0088 3401              ADDC    A,#01H
008A FE                MOV     R6,A
008B 7B01              MOV     R3,#01H
008D 7A00        R     MOV     R2,#HIGH tagMF
008F 7900        R     MOV     R1,#LOW tagMF
0091 7D01              MOV     R5,#01H
0093 7C00              MOV     R4,#00H
0095 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 276
0098 900000      R     MOV     DPTR,#headerBlock+01H
009B E0                MOVX    A,@DPTR
009C 25E0              ADD     A,ACC
009E FF                MOV     R7,A
009F 900000      R     MOV     DPTR,#headerBlock
00A2 E0                MOVX    A,@DPTR
00A3 33                RLC     A
00A4 FE                MOV     R6,A
00A5 EF                MOV     A,R7
00A6 2411              ADD     A,#011H
00A8 FF                MOV     R7,A
00A9 EE                MOV     A,R6
00AA 3401              ADDC    A,#01H
00AC FE                MOV     R6,A
00AD 7B01              MOV     R3,#01H
00AF 7A00        R     MOV     R2,#HIGH fidMF
00B1 7900        R     MOV     R1,#LOW fidMF
00B3 7D02              MOV     R5,#02H
00B5 7C00              MOV     R4,#00H
00B7 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 277
00BA 900000      R     MOV     DPTR,#headerBlock+01H
00BD E0                MOVX    A,@DPTR
00BE 25E0              ADD     A,ACC
00C0 FF                MOV     R7,A
00C1 900000      R     MOV     DPTR,#headerBlock
00C4 E0                MOVX    A,@DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 42  

00C5 33                RLC     A
00C6 FE                MOV     R6,A
00C7 EF                MOV     A,R7
00C8 2413              ADD     A,#013H
00CA FF                MOV     R7,A
00CB EE                MOV     A,R6
00CC 3401              ADDC    A,#01H
00CE FE                MOV     R6,A
00CF 7B01              MOV     R3,#01H
00D1 7A00        R     MOV     R2,#HIGH headerBlock
00D3 7900        R     MOV     R1,#LOW headerBlock
00D5 7D02              MOV     R5,#02H
00D7 7C00              MOV     R4,#00H
00D9 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 278
00DC 900000      R     MOV     DPTR,#headerBlock+01H
00DF E0                MOVX    A,@DPTR
00E0 25E0              ADD     A,ACC
00E2 FF                MOV     R7,A
00E3 900000      R     MOV     DPTR,#headerBlock
00E6 E0                MOVX    A,@DPTR
00E7 33                RLC     A
00E8 FE                MOV     R6,A
00E9 EF                MOV     A,R7
00EA 2415              ADD     A,#015H
00EC FF                MOV     R7,A
00ED EE                MOV     A,R6
00EE 3401              ADDC    A,#01H
00F0 FE                MOV     R6,A
00F1 7B01              MOV     R3,#01H
00F3 7A00        R     MOV     R2,#HIGH none16
00F5 7900        R     MOV     R1,#LOW none16
00F7 7D02              MOV     R5,#02H
00F9 7C00              MOV     R4,#00H
00FB 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 279
00FE 900000      R     MOV     DPTR,#headerBlock+01H
0101 E0                MOVX    A,@DPTR
0102 25E0              ADD     A,ACC
0104 FF                MOV     R7,A
0105 900000      R     MOV     DPTR,#headerBlock
0108 E0                MOVX    A,@DPTR
0109 33                RLC     A
010A FE                MOV     R6,A
010B EF                MOV     A,R7
010C 2417              ADD     A,#017H
010E FF                MOV     R7,A
010F EE                MOV     A,R6
0110 3401              ADDC    A,#01H
0112 FE                MOV     R6,A
0113 7B01              MOV     R3,#01H
0115 7A00        R     MOV     R2,#HIGH none16
0117 7900        R     MOV     R1,#LOW none16
0119 7D02              MOV     R5,#02H
011B 7C00              MOV     R4,#00H
011D 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 280
0120 E4                CLR     A
0121 FE                MOV     R6,A
0122 FF                MOV     R7,A
0123 22                RET     
                                           ; SOURCE LINE # 281
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 43  

0124         ?C0069:
                                           ; SOURCE LINE # 282
0124 7E00              MOV     R6,#00H
0126 7F1E              MOV     R7,#01EH
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
0128         ?C0070:
0128 22                RET     
             ; FUNCTION FSFormat (END)

             ; FUNCTION _FSCreateHeader (BEGIN)
                                           ; SOURCE LINE # 286
0000 900000      R     MOV     DPTR,#tag
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EA                MOV     A,R2
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 E9                MOV     A,R1
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 289
0014 900000      R     MOV     DPTR,#none16
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
0019 A3                INC     DPTR
001A 74FF              MOV     A,#0FFH
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
001D 120000      E     LCALL   State_GetCurrent
0020 900000      R     MOV     DPTR,#current
0023 EE                MOV     A,R6
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
0028 900000      R     MOV     DPTR,#?_FSAlloc?BYTE+06H
002B 7401              MOV     A,#01H
002D F0                MOVX    @DPTR,A
002E A3                INC     DPTR
002F 7400        R     MOV     A,#HIGH headerBlock
0031 F0                MOVX    @DPTR,A
0032 A3                INC     DPTR
0033 7400        R     MOV     A,#LOW headerBlock
0035 F0                MOVX    @DPTR,A
0036 7B50              MOV     R3,#050H
0038 7A00              MOV     R2,#00H
003A 7D10              MOV     R5,#010H
003C 7C00              MOV     R4,#00H
003E 7F06              MOV     R7,#06H
0040 7E00              MOV     R6,#00H
0042 120000      R     LCALL   _FSAlloc
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 44  

;---- Variable 'status' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 297
0045 EF                MOV     A,R7
0046 641F              XRL     A,#01FH
0048 4E                ORL     A,R6
0049 7001              JNZ     ?C0072
                                           ; SOURCE LINE # 298
004B 22                RET     
                                           ; SOURCE LINE # 299
004C         ?C0072:
                                           ; SOURCE LINE # 302
004C 900000      R     MOV     DPTR,#headerBlock+01H
004F E0                MOVX    A,@DPTR
0050 25E0              ADD     A,ACC
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#headerBlock
0056 E0                MOVX    A,@DPTR
0057 33                RLC     A
0058 FE                MOV     R6,A
0059 EF                MOV     A,R7
005A 2410              ADD     A,#010H
005C FF                MOV     R7,A
005D EE                MOV     A,R6
005E 3401              ADDC    A,#01H
0060 FE                MOV     R6,A
0061 7B01              MOV     R3,#01H
0063 7A00        R     MOV     R2,#HIGH tag
0065 7900        R     MOV     R1,#LOW tag
0067 7D01              MOV     R5,#01H
0069 7C00              MOV     R4,#00H
006B 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 303
006E 900000      R     MOV     DPTR,#headerBlock+01H
0071 E0                MOVX    A,@DPTR
0072 25E0              ADD     A,ACC
0074 FF                MOV     R7,A
0075 900000      R     MOV     DPTR,#headerBlock
0078 E0                MOVX    A,@DPTR
0079 33                RLC     A
007A FE                MOV     R6,A
007B EF                MOV     A,R7
007C 2411              ADD     A,#011H
007E FF                MOV     R7,A
007F EE                MOV     A,R6
0080 3401              ADDC    A,#01H
0082 FE                MOV     R6,A
0083 7B01              MOV     R3,#01H
0085 7A00        R     MOV     R2,#HIGH fid
0087 7900        R     MOV     R1,#LOW fid
0089 7D02              MOV     R5,#02H
008B 7C00              MOV     R4,#00H
008D 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 304
0090 900000      R     MOV     DPTR,#headerBlock+01H
0093 E0                MOVX    A,@DPTR
0094 25E0              ADD     A,ACC
0096 FF                MOV     R7,A
0097 900000      R     MOV     DPTR,#headerBlock
009A E0                MOVX    A,@DPTR
009B 33                RLC     A
009C FE                MOV     R6,A
009D EF                MOV     A,R7
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 45  

009E 2413              ADD     A,#013H
00A0 FF                MOV     R7,A
00A1 EE                MOV     A,R6
00A2 3401              ADDC    A,#01H
00A4 FE                MOV     R6,A
00A5 7B01              MOV     R3,#01H
00A7 7A00        R     MOV     R2,#HIGH current
00A9 7900        R     MOV     R1,#LOW current
00AB 7D02              MOV     R5,#02H
00AD 7C00              MOV     R4,#00H
00AF 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 305
00B2 900000      R     MOV     DPTR,#headerBlock+01H
00B5 E0                MOVX    A,@DPTR
00B6 25E0              ADD     A,ACC
00B8 FF                MOV     R7,A
00B9 900000      R     MOV     DPTR,#headerBlock
00BC E0                MOVX    A,@DPTR
00BD 33                RLC     A
00BE FE                MOV     R6,A
00BF EF                MOV     A,R7
00C0 2415              ADD     A,#015H
00C2 FF                MOV     R7,A
00C3 EE                MOV     A,R6
00C4 3401              ADDC    A,#01H
00C6 FE                MOV     R6,A
00C7 7B01              MOV     R3,#01H
00C9 7A00        R     MOV     R2,#HIGH none16
00CB 7900        R     MOV     R1,#LOW none16
00CD 7D02              MOV     R5,#02H
00CF 7C00              MOV     R4,#00H
00D1 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 306
00D4 900000      R     MOV     DPTR,#headerBlock+01H
00D7 E0                MOVX    A,@DPTR
00D8 25E0              ADD     A,ACC
00DA FF                MOV     R7,A
00DB 900000      R     MOV     DPTR,#headerBlock
00DE E0                MOVX    A,@DPTR
00DF 33                RLC     A
00E0 FE                MOV     R6,A
00E1 EF                MOV     A,R7
00E2 2417              ADD     A,#017H
00E4 FF                MOV     R7,A
00E5 EE                MOV     A,R6
00E6 3401              ADDC    A,#01H
00E8 FE                MOV     R6,A
00E9 7B01              MOV     R3,#01H
00EB 7A00        R     MOV     R2,#HIGH none16
00ED 7900        R     MOV     R1,#LOW none16
00EF 7D02              MOV     R5,#02H
00F1 7C00              MOV     R4,#00H
00F3 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 309
00F6 900000      R     MOV     DPTR,#current+01H
00F9 E0                MOVX    A,@DPTR
00FA 25E0              ADD     A,ACC
00FC FF                MOV     R7,A
00FD 900000      R     MOV     DPTR,#current
0100 E0                MOVX    A,@DPTR
0101 33                RLC     A
0102 FE                MOV     R6,A
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 46  

0103 EF                MOV     A,R7
0104 2415              ADD     A,#015H
0106 FF                MOV     R7,A
0107 EE                MOV     A,R6
0108 3401              ADDC    A,#01H
010A FE                MOV     R6,A
010B 7B01              MOV     R3,#01H
010D 7A00        R     MOV     R2,#HIGH currentChild
010F 7900        R     MOV     R1,#LOW currentChild
0111 7D02              MOV     R5,#02H
0113 7C00              MOV     R4,#00H
0115 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 311
0118 900000      R     MOV     DPTR,#none16
011B E0                MOVX    A,@DPTR
011C FE                MOV     R6,A
011D A3                INC     DPTR
011E E0                MOVX    A,@DPTR
011F FF                MOV     R7,A
0120 900000      R     MOV     DPTR,#currentChild
0123 E0                MOVX    A,@DPTR
0124 B50617            CJNE    A,AR6,?C0076
0127 A3                INC     DPTR
0128 E0                MOVX    A,@DPTR
0129 B50712            CJNE    A,AR7,?C0076
                                           ; SOURCE LINE # 312
012C 900000      R     MOV     DPTR,#current+01H
012F E0                MOVX    A,@DPTR
0130 25E0              ADD     A,ACC
0132 FF                MOV     R7,A
0133 900000      R     MOV     DPTR,#current
0136 E0                MOVX    A,@DPTR
0137 33                RLC     A
0138 FE                MOV     R6,A
0139 EF                MOV     A,R7
013A 2415              ADD     A,#015H
                                           ; SOURCE LINE # 313
013C 804B              SJMP    ?C0172
013E         ?C0076:
                                           ; SOURCE LINE # 314
013E 900000      R     MOV     DPTR,#currentChild
0141 E0                MOVX    A,@DPTR
0142 FE                MOV     R6,A
0143 A3                INC     DPTR
0144 E0                MOVX    A,@DPTR
0145 FF                MOV     R7,A
0146 F4                CPL     A
0147 4E                ORL     A,R6
0148 6023              JZ      ?C0077
                                           ; SOURCE LINE # 315
014A A3                INC     DPTR
014B EE                MOV     A,R6
014C F0                MOVX    @DPTR,A
014D A3                INC     DPTR
014E EF                MOV     A,R7
014F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0150 25E0              ADD     A,ACC
0152 FF                MOV     R7,A
0153 EE                MOV     A,R6
0154 33                RLC     A
0155 FE                MOV     R6,A
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 47  

0156 EF                MOV     A,R7
0157 2417              ADD     A,#017H
0159 FF                MOV     R7,A
015A EE                MOV     A,R6
015B 3401              ADDC    A,#01H
015D FE                MOV     R6,A
015E 7B01              MOV     R3,#01H
0160 7A00        R     MOV     R2,#HIGH currentChild
0162 7900        R     MOV     R1,#LOW currentChild
0164 7D02              MOV     R5,#02H
0166 7C00              MOV     R4,#00H
0168 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 317
016B 80D1              SJMP    ?C0076
016D         ?C0077:
                                           ; SOURCE LINE # 318
016D 900000      R     MOV     DPTR,#currentChildTemp
0170 E0                MOVX    A,@DPTR
0171 FF                MOV     R7,A
0172 A3                INC     DPTR
0173 E0                MOVX    A,@DPTR
0174 900000      R     MOV     DPTR,#currentChild
0177 CF                XCH     A,R7
0178 F0                MOVX    @DPTR,A
0179 A3                INC     DPTR
017A EF                MOV     A,R7
017B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 319
017C E0                MOVX    A,@DPTR
017D 25E0              ADD     A,ACC
017F FF                MOV     R7,A
0180 900000      R     MOV     DPTR,#currentChild
0183 E0                MOVX    A,@DPTR
0184 33                RLC     A
0185 FE                MOV     R6,A
0186 EF                MOV     A,R7
0187 2417              ADD     A,#017H
0189         ?C0172:
0189 FF                MOV     R7,A
018A EE                MOV     A,R6
018B 3401              ADDC    A,#01H
018D FE                MOV     R6,A
018E 7B01              MOV     R3,#01H
0190 7A00        R     MOV     R2,#HIGH headerBlock
0192 7900        R     MOV     R1,#LOW headerBlock
0194 7D02              MOV     R5,#02H
0196 7C00              MOV     R4,#00H
0198 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 320
019B         ?C0075:
                                           ; SOURCE LINE # 321
019B 900000      R     MOV     DPTR,#headerBlock
019E E0                MOVX    A,@DPTR
019F F9                MOV     R1,A
01A0 A3                INC     DPTR
01A1 E0                MOVX    A,@DPTR
01A2 FF                MOV     R7,A
01A3 900000      R     MOV     DPTR,#addr
01A6 E0                MOVX    A,@DPTR
01A7 FB                MOV     R3,A
01A8 A3                INC     DPTR
01A9 E0                MOVX    A,@DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 48  

01AA FA                MOV     R2,A
01AB A3                INC     DPTR
01AC E0                MOVX    A,@DPTR
01AD C9                XCH     A,R1
01AE 8FF0              MOV     B,R7
01B0 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 322
01B3 E4                CLR     A
01B4 FE                MOV     R6,A
01B5 FF                MOV     R7,A
                                           ; SOURCE LINE # 323
01B6         ?C0073:
01B6 22                RET     
             ; FUNCTION _FSCreateHeader (END)

             ; FUNCTION _FSCreateBodyEF (BEGIN)
                                           ; SOURCE LINE # 326
0000 900000      R     MOV     DPTR,#desc
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 330
000B E4                CLR     A
000C 900000      R     MOV     DPTR,#sum
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
0010 900000      R     MOV     DPTR,#desc
0013 E0                MOVX    A,@DPTR
0014 FB                MOV     R3,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FA                MOV     R2,A
0018 A3                INC     DPTR
0019 E0                MOVX    A,@DPTR
001A F9                MOV     R1,A
001B 900002            MOV     DPTR,#02H
001E 120000      E     LCALL   ?C?CLDOPTR
0021 24FE              ADD     A,#0FEH
0023 7003              JNZ     $ + 5H
0025 020000      R     LJMP    ?C0084
0028 24FE              ADD     A,#0FEH
002A 7003              JNZ     $ + 5H
002C 020000      R     LJMP    ?C0088
002F 2403              ADD     A,#03H
0031 6003              JZ      $ + 5H
0033 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 335
0036         ?C0079:
                                           ; SOURCE LINE # 337
0036 900008            MOV     DPTR,#08H
0039 120000      E     LCALL   ?C?ILDOPTR
003C 2405              ADD     A,#05H
003E FF                MOV     R7,A
003F E4                CLR     A
0040 35F0              ADDC    A,B
0042 FE                MOV     R6,A
0043 EF                MOV     A,R7
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 49  

0044 20E009            JB      ACC.0,?C0080
0047 EE                MOV     A,R6
0048 C3                CLR     C
0049 13                RRC     A
004A FE                MOV     R6,A
004B EF                MOV     A,R7
004C 13                RRC     A
004D FF                MOV     R7,A
004E 8017              SJMP    ?C0081
0050         ?C0080:
0050 900008            MOV     DPTR,#08H
0053 120000      E     LCALL   ?C?ILDOPTR
0056 2405              ADD     A,#05H
0058 FF                MOV     R7,A
0059 E4                CLR     A
005A 35F0              ADDC    A,B
005C C3                CLR     C
005D 13                RRC     A
005E FE                MOV     R6,A
005F EF                MOV     A,R7
0060 13                RRC     A
0061 2401              ADD     A,#01H
0063 FF                MOV     R7,A
0064 E4                CLR     A
0065 3E                ADDC    A,R6
0066 FE                MOV     R6,A
0067         ?C0081:
0067 120000      R     LCALL   L?0179
006A 900000      R     MOV     DPTR,#status
006D EE                MOV     A,R6
006E F0                MOVX    @DPTR,A
006F A3                INC     DPTR
0070 EF                MOV     A,R7
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
0072 641F              XRL     A,#01FH
0074 4E                ORL     A,R6
0075 7003              JNZ     ?C0082
                                           ; SOURCE LINE # 339
0077 020000      R     LJMP    ?C0175
                                           ; SOURCE LINE # 340
007A         ?C0082:
                                           ; SOURCE LINE # 341
007A 900000      R     MOV     DPTR,#bodyBlock+01H
007D E0                MOVX    A,@DPTR
007E 25E0              ADD     A,ACC
0080 FF                MOV     R7,A
0081 900000      R     MOV     DPTR,#bodyBlock
0084 E0                MOVX    A,@DPTR
0085 33                RLC     A
0086 FE                MOV     R6,A
0087 EF                MOV     A,R7
0088 2410              ADD     A,#010H
008A FF                MOV     R7,A
008B EE                MOV     A,R6
008C 3401              ADDC    A,#01H
008E FE                MOV     R6,A
008F 900000      R     MOV     DPTR,#desc
0092 E0                MOVX    A,@DPTR
0093 FB                MOV     R3,A
0094 A3                INC     DPTR
0095 E0                MOVX    A,@DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 50  

0096 FA                MOV     R2,A
0097 A3                INC     DPTR
0098 E0                MOVX    A,@DPTR
0099 2402              ADD     A,#02H
009B F9                MOV     R1,A
009C E4                CLR     A
009D 3A                ADDC    A,R2
009E FA                MOV     R2,A
009F 7D01              MOV     R5,#01H
00A1 7C00              MOV     R4,#00H
00A3 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 342
00A6 900000      R     MOV     DPTR,#bodyBlock+01H
00A9 E0                MOVX    A,@DPTR
00AA 25E0              ADD     A,ACC
00AC FF                MOV     R7,A
00AD 900000      R     MOV     DPTR,#bodyBlock
00B0 E0                MOVX    A,@DPTR
00B1 33                RLC     A
00B2 FE                MOV     R6,A
00B3 EF                MOV     A,R7
00B4 2411              ADD     A,#011H
00B6 FF                MOV     R7,A
00B7 EE                MOV     A,R6
00B8 3401              ADDC    A,#01H
00BA FE                MOV     R6,A
00BB 900000      R     MOV     DPTR,#desc
00BE E0                MOVX    A,@DPTR
00BF FB                MOV     R3,A
00C0 A3                INC     DPTR
00C1 E0                MOVX    A,@DPTR
00C2 FA                MOV     R2,A
00C3 A3                INC     DPTR
00C4 E0                MOVX    A,@DPTR
00C5 2403              ADD     A,#03H
00C7 F9                MOV     R1,A
00C8 E4                CLR     A
00C9 3A                ADDC    A,R2
00CA FA                MOV     R2,A
00CB 7D01              MOV     R5,#01H
00CD 7C00              MOV     R4,#00H
00CF 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 343
00D2 900000      R     MOV     DPTR,#bodyBlock+01H
00D5 E0                MOVX    A,@DPTR
00D6 25E0              ADD     A,ACC
00D8 FF                MOV     R7,A
00D9 900000      R     MOV     DPTR,#bodyBlock
00DC E0                MOVX    A,@DPTR
00DD 33                RLC     A
00DE FE                MOV     R6,A
00DF EF                MOV     A,R7
00E0 2412              ADD     A,#012H
00E2 FF                MOV     R7,A
00E3 EE                MOV     A,R6
00E4 3401              ADDC    A,#01H
00E6 FE                MOV     R6,A
00E7 900000      R     MOV     DPTR,#desc
00EA E0                MOVX    A,@DPTR
00EB FB                MOV     R3,A
00EC A3                INC     DPTR
00ED E0                MOVX    A,@DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 51  

00EE FA                MOV     R2,A
00EF A3                INC     DPTR
00F0 E0                MOVX    A,@DPTR
00F1 2404              ADD     A,#04H
00F3 F9                MOV     R1,A
00F4 E4                CLR     A
00F5 3A                ADDC    A,R2
00F6 FA                MOV     R2,A
00F7 7D01              MOV     R5,#01H
00F9 7C00              MOV     R4,#00H
00FB 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 344
00FE 900000      R     MOV     DPTR,#bodyBlock+01H
0101 E0                MOVX    A,@DPTR
0102 25E0              ADD     A,ACC
0104 FF                MOV     R7,A
0105 900000      R     MOV     DPTR,#bodyBlock
0108 E0                MOVX    A,@DPTR
0109 33                RLC     A
010A FE                MOV     R6,A
010B EF                MOV     A,R7
010C 2413              ADD     A,#013H
010E FF                MOV     R7,A
010F EE                MOV     A,R6
0110 3401              ADDC    A,#01H
0112 FE                MOV     R6,A
0113 900000      R     MOV     DPTR,#desc
0116 E0                MOVX    A,@DPTR
0117 FB                MOV     R3,A
0118 A3                INC     DPTR
0119 E0                MOVX    A,@DPTR
011A FA                MOV     R2,A
011B A3                INC     DPTR
011C E0                MOVX    A,@DPTR
011D 2408              ADD     A,#08H
011F F9                MOV     R1,A
0120 E4                CLR     A
0121 3A                ADDC    A,R2
0122 FA                MOV     R2,A
0123 7D02              MOV     R5,#02H
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
0125 020000      R     LJMP    ?C0176
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
0128         ?C0084:
                                           ; SOURCE LINE # 351
0128 900000      R     MOV     DPTR,#desc
012B E0                MOVX    A,@DPTR
012C FB                MOV     R3,A
012D A3                INC     DPTR
012E E0                MOVX    A,@DPTR
012F FA                MOV     R2,A
0130 A3                INC     DPTR
0131 E0                MOVX    A,@DPTR
0132 F9                MOV     R1,A
0133 90000A            MOV     DPTR,#0AH
0136 120000      E     LCALL   ?C?CLDOPTR
0139 FF                MOV     R7,A
013A 7E00              MOV     R6,#00H
013C 900008            MOV     DPTR,#08H
013F 120000      E     LCALL   ?C?ILDOPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 52  

0142 FD                MOV     R5,A
0143 ACF0              MOV     R4,B
0145 120000      E     LCALL   ?C?IMUL
0148 EF                MOV     A,R7
0149 2406              ADD     A,#06H
014B FF                MOV     R7,A
014C E4                CLR     A
014D 3E                ADDC    A,R6
014E FE                MOV     R6,A
014F EF                MOV     A,R7
0150 20E009            JB      ACC.0,?C0085
0153 EE                MOV     A,R6
0154 C3                CLR     C
0155 13                RRC     A
0156 FE                MOV     R6,A
0157 EF                MOV     A,R7
0158 13                RRC     A
0159 FF                MOV     R7,A
015A 8031              SJMP    ?C0086
015C         ?C0085:
015C 900000      R     MOV     DPTR,#desc
015F E0                MOVX    A,@DPTR
0160 FB                MOV     R3,A
0161 A3                INC     DPTR
0162 E0                MOVX    A,@DPTR
0163 FA                MOV     R2,A
0164 A3                INC     DPTR
0165 E0                MOVX    A,@DPTR
0166 F9                MOV     R1,A
0167 90000A            MOV     DPTR,#0AH
016A 120000      E     LCALL   ?C?CLDOPTR
016D FF                MOV     R7,A
016E 7E00              MOV     R6,#00H
0170 900008            MOV     DPTR,#08H
0173 120000      E     LCALL   ?C?ILDOPTR
0176 FD                MOV     R5,A
0177 ACF0              MOV     R4,B
0179 120000      E     LCALL   ?C?IMUL
017C EF                MOV     A,R7
017D 2406              ADD     A,#06H
017F FF                MOV     R7,A
0180 E4                CLR     A
0181 3E                ADDC    A,R6
0182 C3                CLR     C
0183 13                RRC     A
0184 FE                MOV     R6,A
0185 EF                MOV     A,R7
0186 13                RRC     A
0187 2401              ADD     A,#01H
0189 FF                MOV     R7,A
018A E4                CLR     A
018B 3E                ADDC    A,R6
018C FE                MOV     R6,A
018D         ?C0086:
018D 120000      R     LCALL   L?0179
0190 900000      R     MOV     DPTR,#status
0193 EE                MOV     A,R6
0194 F0                MOVX    @DPTR,A
0195 A3                INC     DPTR
0196 EF                MOV     A,R7
0197 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 53  

0198 641F              XRL     A,#01FH
019A 4E                ORL     A,R6
019B 7003              JNZ     ?C0087
                                           ; SOURCE LINE # 353
019D         ?C0173:
019D 020000      R     LJMP    ?C0175
                                           ; SOURCE LINE # 354
01A0         ?C0087:
                                           ; SOURCE LINE # 356
01A0 900000      R     MOV     DPTR,#bodyBlock+01H
01A3 E0                MOVX    A,@DPTR
01A4 25E0              ADD     A,ACC
01A6 FF                MOV     R7,A
01A7 900000      R     MOV     DPTR,#bodyBlock
01AA E0                MOVX    A,@DPTR
01AB 33                RLC     A
01AC FE                MOV     R6,A
01AD EF                MOV     A,R7
01AE 2410              ADD     A,#010H
01B0 FF                MOV     R7,A
01B1 EE                MOV     A,R6
01B2 3401              ADDC    A,#01H
01B4 FE                MOV     R6,A
01B5 900000      R     MOV     DPTR,#desc
01B8 E0                MOVX    A,@DPTR
01B9 FB                MOV     R3,A
01BA A3                INC     DPTR
01BB E0                MOVX    A,@DPTR
01BC FA                MOV     R2,A
01BD A3                INC     DPTR
01BE E0                MOVX    A,@DPTR
01BF 2402              ADD     A,#02H
01C1 F9                MOV     R1,A
01C2 E4                CLR     A
01C3 3A                ADDC    A,R2
01C4 FA                MOV     R2,A
01C5 7D01              MOV     R5,#01H
01C7 7C00              MOV     R4,#00H
01C9 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 357
01CC 900000      R     MOV     DPTR,#bodyBlock+01H
01CF E0                MOVX    A,@DPTR
01D0 25E0              ADD     A,ACC
01D2 FF                MOV     R7,A
01D3 900000      R     MOV     DPTR,#bodyBlock
01D6 E0                MOVX    A,@DPTR
01D7 33                RLC     A
01D8 FE                MOV     R6,A
01D9 EF                MOV     A,R7
01DA 2411              ADD     A,#011H
01DC FF                MOV     R7,A
01DD EE                MOV     A,R6
01DE 3401              ADDC    A,#01H
01E0 FE                MOV     R6,A
01E1 900000      R     MOV     DPTR,#desc
01E4 E0                MOVX    A,@DPTR
01E5 FB                MOV     R3,A
01E6 A3                INC     DPTR
01E7 E0                MOVX    A,@DPTR
01E8 FA                MOV     R2,A
01E9 A3                INC     DPTR
01EA E0                MOVX    A,@DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 54  

01EB 2403              ADD     A,#03H
01ED F9                MOV     R1,A
01EE E4                CLR     A
01EF 3A                ADDC    A,R2
01F0 FA                MOV     R2,A
01F1 7D01              MOV     R5,#01H
01F3 7C00              MOV     R4,#00H
01F5 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 358
01F8 900000      R     MOV     DPTR,#bodyBlock+01H
01FB E0                MOVX    A,@DPTR
01FC 25E0              ADD     A,ACC
01FE FF                MOV     R7,A
01FF 900000      R     MOV     DPTR,#bodyBlock
0202 E0                MOVX    A,@DPTR
0203 33                RLC     A
0204 FE                MOV     R6,A
0205 EF                MOV     A,R7
0206 2412              ADD     A,#012H
0208 FF                MOV     R7,A
0209 EE                MOV     A,R6
020A 3401              ADDC    A,#01H
020C FE                MOV     R6,A
020D 900000      R     MOV     DPTR,#desc
0210 E0                MOVX    A,@DPTR
0211 FB                MOV     R3,A
0212 A3                INC     DPTR
0213 E0                MOVX    A,@DPTR
0214 FA                MOV     R2,A
0215 A3                INC     DPTR
0216 E0                MOVX    A,@DPTR
0217 2404              ADD     A,#04H
0219 F9                MOV     R1,A
021A E4                CLR     A
021B 3A                ADDC    A,R2
021C FA                MOV     R2,A
021D 7D01              MOV     R5,#01H
021F 7C00              MOV     R4,#00H
0221 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 359
0224 900000      R     MOV     DPTR,#bodyBlock+01H
0227 E0                MOVX    A,@DPTR
0228 25E0              ADD     A,ACC
022A FF                MOV     R7,A
022B 900000      R     MOV     DPTR,#bodyBlock
022E E0                MOVX    A,@DPTR
022F 33                RLC     A
0230 FE                MOV     R6,A
0231 EF                MOV     A,R7
0232 2413              ADD     A,#013H
0234 FF                MOV     R7,A
0235 EE                MOV     A,R6
0236 3401              ADDC    A,#01H
0238 FE                MOV     R6,A
0239 900000      R     MOV     DPTR,#desc
023C E0                MOVX    A,@DPTR
023D FB                MOV     R3,A
023E A3                INC     DPTR
023F E0                MOVX    A,@DPTR
0240 FA                MOV     R2,A
0241 A3                INC     DPTR
0242 E0                MOVX    A,@DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 55  

0243 2408              ADD     A,#08H
0245 F9                MOV     R1,A
0246 E4                CLR     A
0247 3A                ADDC    A,R2
0248 FA                MOV     R2,A
0249 7D02              MOV     R5,#02H
024B 7C00              MOV     R4,#00H
024D 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 360
0250 900000      R     MOV     DPTR,#bodyBlock+01H
0253 E0                MOVX    A,@DPTR
0254 25E0              ADD     A,ACC
0256 FF                MOV     R7,A
0257 900000      R     MOV     DPTR,#bodyBlock
025A E0                MOVX    A,@DPTR
025B 33                RLC     A
025C FE                MOV     R6,A
025D EF                MOV     A,R7
025E 2415              ADD     A,#015H
0260 FF                MOV     R7,A
0261 EE                MOV     A,R6
0262 3401              ADDC    A,#01H
0264 FE                MOV     R6,A
0265 900000      R     MOV     DPTR,#desc
0268 E0                MOVX    A,@DPTR
0269 FB                MOV     R3,A
026A A3                INC     DPTR
026B E0                MOVX    A,@DPTR
026C FA                MOV     R2,A
026D A3                INC     DPTR
026E E0                MOVX    A,@DPTR
026F 240A              ADD     A,#0AH
0271 F9                MOV     R1,A
0272 E4                CLR     A
0273 3A                ADDC    A,R2
0274 FA                MOV     R2,A
0275 7D01              MOV     R5,#01H
0277         ?C0174:
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
0277 020000      R     LJMP    ?C0176
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 365
027A         ?C0088:
                                           ; SOURCE LINE # 366
027A E4                CLR     A
027B 900000      R     MOV     DPTR,#i
027E F0                MOVX    @DPTR,A
027F A3                INC     DPTR
0280 F0                MOVX    @DPTR,A
0281         ?C0089:
0281 900000      R     MOV     DPTR,#desc
0284 E0                MOVX    A,@DPTR
0285 FB                MOV     R3,A
0286 A3                INC     DPTR
0287 E0                MOVX    A,@DPTR
0288 FA                MOV     R2,A
0289 A3                INC     DPTR
028A E0                MOVX    A,@DPTR
028B F9                MOV     R1,A
028C 900008            MOV     DPTR,#08H
028F 120000      E     LCALL   ?C?ILDOPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 56  

0292 FF                MOV     R7,A
0293 C3                CLR     C
0294 900000      R     MOV     DPTR,#i+01H
0297 E0                MOVX    A,@DPTR
0298 9F                SUBB    A,R7
0299 900000      R     MOV     DPTR,#i
029C E0                MOVX    A,@DPTR
029D 95F0              SUBB    A,B
029F 503F              JNC     ?C0090
                                           ; SOURCE LINE # 368
02A1 900000      E     MOV     DPTR,#header+01H
02A4 E0                MOVX    A,@DPTR
02A5 F4                CPL     A
02A6 FF                MOV     R7,A
02A7 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 369
02AA 120000      E     LCALL   Transmission_GetByte
02AD 900000      R     MOV     DPTR,#i
02B0 A3                INC     DPTR
02B1 E0                MOVX    A,@DPTR
02B2 FE                MOV     R6,A
02B3 2400        R     ADD     A,#LOW var_length
02B5 F582              MOV     DPL,A
02B7 E4                CLR     A
02B8 3400        R     ADDC    A,#HIGH var_length
02BA F583              MOV     DPH,A
02BC EF                MOV     A,R7
02BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
02BE 7400        R     MOV     A,#LOW var_length
02C0 2E                ADD     A,R6
02C1 F582              MOV     DPL,A
02C3 E4                CLR     A
02C4 3400        R     ADDC    A,#HIGH var_length
02C6 F583              MOV     DPH,A
02C8 E0                MOVX    A,@DPTR
02C9 FF                MOV     R7,A
02CA 900000      R     MOV     DPTR,#sum
02CD E0                MOVX    A,@DPTR
02CE 2F                ADD     A,R7
02CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
02D0 900000      R     MOV     DPTR,#i+01H
02D3 E0                MOVX    A,@DPTR
02D4 04                INC     A
02D5 F0                MOVX    @DPTR,A
02D6 70A9              JNZ     ?C0089
02D8 900000      R     MOV     DPTR,#i
02DB E0                MOVX    A,@DPTR
02DC 04                INC     A
02DD F0                MOVX    @DPTR,A
02DE         ?C0154:
02DE 80A1              SJMP    ?C0089
02E0         ?C0090:
                                           ; SOURCE LINE # 374
02E0 900000      R     MOV     DPTR,#desc
02E3 E0                MOVX    A,@DPTR
02E4 FB                MOV     R3,A
02E5 A3                INC     DPTR
02E6 E0                MOVX    A,@DPTR
02E7 FA                MOV     R2,A
02E8 A3                INC     DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 57  

02E9 E0                MOVX    A,@DPTR
02EA F9                MOV     R1,A
02EB 900008            MOV     DPTR,#08H
02EE 120000      E     LCALL   ?C?ILDOPTR
02F1 FF                MOV     R7,A
02F2 900000      R     MOV     DPTR,#sum
02F5 E0                MOVX    A,@DPTR
02F6 2F                ADD     A,R7
02F7 FF                MOV     R7,A
02F8 E4                CLR     A
02F9 35F0              ADDC    A,B
02FB CF                XCH     A,R7
02FC 2406              ADD     A,#06H
02FE CF                XCH     A,R7
02FF 3400              ADDC    A,#00H
0301 FE                MOV     R6,A
0302 EF                MOV     A,R7
0303 20E009            JB      ACC.0,?C0092
0306 EE                MOV     A,R6
0307 C3                CLR     C
0308 13                RRC     A
0309 FE                MOV     R6,A
030A EF                MOV     A,R7
030B 13                RRC     A
030C FF                MOV     R7,A
030D 802C              SJMP    ?C0093
030F         ?C0092:
030F 900000      R     MOV     DPTR,#desc
0312 E0                MOVX    A,@DPTR
0313 FB                MOV     R3,A
0314 A3                INC     DPTR
0315 E0                MOVX    A,@DPTR
0316 FA                MOV     R2,A
0317 A3                INC     DPTR
0318 E0                MOVX    A,@DPTR
0319 F9                MOV     R1,A
031A 900008            MOV     DPTR,#08H
031D 120000      E     LCALL   ?C?ILDOPTR
0320 FF                MOV     R7,A
0321 900000      R     MOV     DPTR,#sum
0324 E0                MOVX    A,@DPTR
0325 2F                ADD     A,R7
0326 FF                MOV     R7,A
0327 E4                CLR     A
0328 35F0              ADDC    A,B
032A CF                XCH     A,R7
032B 2406              ADD     A,#06H
032D CF                XCH     A,R7
032E 3400              ADDC    A,#00H
0330 C3                CLR     C
0331 13                RRC     A
0332 FE                MOV     R6,A
0333 EF                MOV     A,R7
0334 13                RRC     A
0335 2401              ADD     A,#01H
0337 FF                MOV     R7,A
0338 E4                CLR     A
0339 3E                ADDC    A,R6
033A FE                MOV     R6,A
033B         ?C0093:
033B 120000      R     LCALL   L?0180
033E 900000      R     MOV     DPTR,#status
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 58  

0341 EE                MOV     A,R6
0342 F0                MOVX    @DPTR,A
0343 A3                INC     DPTR
0344 EF                MOV     A,R7
0345 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
0346 641F              XRL     A,#01FH
0348 4E                ORL     A,R6
0349 7009              JNZ     ?C0094
                                           ; SOURCE LINE # 376
034B         ?C0175:
034B 900000      R     MOV     DPTR,#status
034E E0                MOVX    A,@DPTR
034F FE                MOV     R6,A
0350 A3                INC     DPTR
0351 E0                MOVX    A,@DPTR
0352 FF                MOV     R7,A
0353 22                RET     
                                           ; SOURCE LINE # 377
0354         ?C0094:
                                           ; SOURCE LINE # 379
0354 900000      R     MOV     DPTR,#bodyBlock+01H
0357 E0                MOVX    A,@DPTR
0358 25E0              ADD     A,ACC
035A FF                MOV     R7,A
035B 900000      R     MOV     DPTR,#bodyBlock
035E E0                MOVX    A,@DPTR
035F 33                RLC     A
0360 FE                MOV     R6,A
0361 EF                MOV     A,R7
0362 2410              ADD     A,#010H
0364 FF                MOV     R7,A
0365 EE                MOV     A,R6
0366 3401              ADDC    A,#01H
0368 FE                MOV     R6,A
0369 900000      R     MOV     DPTR,#desc
036C E0                MOVX    A,@DPTR
036D FB                MOV     R3,A
036E A3                INC     DPTR
036F E0                MOVX    A,@DPTR
0370 FA                MOV     R2,A
0371 A3                INC     DPTR
0372 E0                MOVX    A,@DPTR
0373 2402              ADD     A,#02H
0375 F9                MOV     R1,A
0376 E4                CLR     A
0377 3A                ADDC    A,R2
0378 FA                MOV     R2,A
0379 7D01              MOV     R5,#01H
037B 7C00              MOV     R4,#00H
037D 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 380
0380 900000      R     MOV     DPTR,#bodyBlock+01H
0383 E0                MOVX    A,@DPTR
0384 25E0              ADD     A,ACC
0386 FF                MOV     R7,A
0387 900000      R     MOV     DPTR,#bodyBlock
038A E0                MOVX    A,@DPTR
038B 33                RLC     A
038C FE                MOV     R6,A
038D EF                MOV     A,R7
038E 2411              ADD     A,#011H
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 59  

0390 FF                MOV     R7,A
0391 EE                MOV     A,R6
0392 3401              ADDC    A,#01H
0394 FE                MOV     R6,A
0395 900000      R     MOV     DPTR,#desc
0398 E0                MOVX    A,@DPTR
0399 FB                MOV     R3,A
039A A3                INC     DPTR
039B E0                MOVX    A,@DPTR
039C FA                MOV     R2,A
039D A3                INC     DPTR
039E E0                MOVX    A,@DPTR
039F 2403              ADD     A,#03H
03A1 F9                MOV     R1,A
03A2 E4                CLR     A
03A3 3A                ADDC    A,R2
03A4 FA                MOV     R2,A
03A5 7D01              MOV     R5,#01H
03A7 7C00              MOV     R4,#00H
03A9 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 381
03AC 900000      R     MOV     DPTR,#bodyBlock+01H
03AF E0                MOVX    A,@DPTR
03B0 25E0              ADD     A,ACC
03B2 FF                MOV     R7,A
03B3 900000      R     MOV     DPTR,#bodyBlock
03B6 E0                MOVX    A,@DPTR
03B7 33                RLC     A
03B8 FE                MOV     R6,A
03B9 EF                MOV     A,R7
03BA 2412              ADD     A,#012H
03BC FF                MOV     R7,A
03BD EE                MOV     A,R6
03BE 3401              ADDC    A,#01H
03C0 FE                MOV     R6,A
03C1 900000      R     MOV     DPTR,#desc
03C4 E0                MOVX    A,@DPTR
03C5 FB                MOV     R3,A
03C6 A3                INC     DPTR
03C7 E0                MOVX    A,@DPTR
03C8 FA                MOV     R2,A
03C9 A3                INC     DPTR
03CA E0                MOVX    A,@DPTR
03CB 2404              ADD     A,#04H
03CD F9                MOV     R1,A
03CE E4                CLR     A
03CF 3A                ADDC    A,R2
03D0 FA                MOV     R2,A
03D1 7D01              MOV     R5,#01H
03D3 7C00              MOV     R4,#00H
03D5 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 382
03D8 900000      R     MOV     DPTR,#bodyBlock+01H
03DB E0                MOVX    A,@DPTR
03DC 25E0              ADD     A,ACC
03DE FF                MOV     R7,A
03DF 900000      R     MOV     DPTR,#bodyBlock
03E2 E0                MOVX    A,@DPTR
03E3 33                RLC     A
03E4 FE                MOV     R6,A
03E5 EF                MOV     A,R7
03E6 2413              ADD     A,#013H
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 60  

03E8 FF                MOV     R7,A
03E9 EE                MOV     A,R6
03EA 3401              ADDC    A,#01H
03EC FE                MOV     R6,A
03ED 900000      R     MOV     DPTR,#desc
03F0 E0                MOVX    A,@DPTR
03F1 FB                MOV     R3,A
03F2 A3                INC     DPTR
03F3 E0                MOVX    A,@DPTR
03F4 FA                MOV     R2,A
03F5 A3                INC     DPTR
03F6 E0                MOVX    A,@DPTR
03F7 2408              ADD     A,#08H
03F9 F9                MOV     R1,A
03FA E4                CLR     A
03FB 3A                ADDC    A,R2
03FC FA                MOV     R2,A
03FD 7D02              MOV     R5,#02H
03FF 7C00              MOV     R4,#00H
0401 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 383
0404 E4                CLR     A
0405 900000      R     MOV     DPTR,#sum
0408 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 384
0409 900000      R     MOV     DPTR,#i
040C F0                MOVX    @DPTR,A
040D A3                INC     DPTR
040E F0                MOVX    @DPTR,A
040F         ?C0095:
040F 900000      R     MOV     DPTR,#desc
0412 E0                MOVX    A,@DPTR
0413 FB                MOV     R3,A
0414 A3                INC     DPTR
0415 E0                MOVX    A,@DPTR
0416 FA                MOV     R2,A
0417 A3                INC     DPTR
0418 E0                MOVX    A,@DPTR
0419 F9                MOV     R1,A
041A 900008            MOV     DPTR,#08H
041D 120000      E     LCALL   ?C?ILDOPTR
0420 FF                MOV     R7,A
0421 900000      R     MOV     DPTR,#i
0424 E0                MOVX    A,@DPTR
0425 FC                MOV     R4,A
0426 A3                INC     DPTR
0427 E0                MOVX    A,@DPTR
0428 FD                MOV     R5,A
0429 C3                CLR     C
042A 9F                SUBB    A,R7
042B EC                MOV     A,R4
042C 95F0              SUBB    A,B
042E 504C              JNC     ?C0096
                                           ; SOURCE LINE # 385
0430 900000      R     MOV     DPTR,#bodyBlock+01H
0433 E0                MOVX    A,@DPTR
0434 25E0              ADD     A,ACC
0436 FF                MOV     R7,A
0437 900000      R     MOV     DPTR,#bodyBlock
043A E0                MOVX    A,@DPTR
043B 33                RLC     A
043C FE                MOV     R6,A
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 61  

043D EF                MOV     A,R7
043E 2415              ADD     A,#015H
0440 FF                MOV     R7,A
0441 EE                MOV     A,R6
0442 3401              ADDC    A,#01H
0444 CF                XCH     A,R7
0445 2D                ADD     A,R5
0446 CF                XCH     A,R7
0447 3C                ADDC    A,R4
0448 FE                MOV     R6,A
0449 7B01              MOV     R3,#01H
044B 7A00        R     MOV     R2,#HIGH sum
044D 7900        R     MOV     R1,#LOW sum
044F 7D01              MOV     R5,#01H
0451 7C00              MOV     R4,#00H
0453 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 386
0456 900000      R     MOV     DPTR,#i
0459 A3                INC     DPTR
045A E0                MOVX    A,@DPTR
045B 2400        R     ADD     A,#LOW var_length
045D F582              MOV     DPL,A
045F E4                CLR     A
0460 3400        R     ADDC    A,#HIGH var_length
0462 F583              MOV     DPH,A
0464 E0                MOVX    A,@DPTR
0465 FF                MOV     R7,A
0466 900000      R     MOV     DPTR,#sum
0469 E0                MOVX    A,@DPTR
046A 2F                ADD     A,R7
046B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 387
046C 900000      R     MOV     DPTR,#i+01H
046F E0                MOVX    A,@DPTR
0470 04                INC     A
0471 F0                MOVX    @DPTR,A
0472 709B              JNZ     ?C0095
0474 900000      R     MOV     DPTR,#i
0477 E0                MOVX    A,@DPTR
0478 04                INC     A
0479 F0                MOVX    @DPTR,A
047A         ?C0155:
047A 8093              SJMP    ?C0095
047C         ?C0096:
                                           ; SOURCE LINE # 388
047C 900000      R     MOV     DPTR,#desc
047F E0                MOVX    A,@DPTR
0480 FB                MOV     R3,A
0481 A3                INC     DPTR
0482 E0                MOVX    A,@DPTR
0483 FA                MOV     R2,A
0484 A3                INC     DPTR
0485 E0                MOVX    A,@DPTR
0486 F9                MOV     R1,A
0487 900008            MOV     DPTR,#08H
048A 120000      E     LCALL   ?C?ILDOPTR
048D FD                MOV     R5,A
048E 900000      R     MOV     DPTR,#bodyBlock+01H
0491 E0                MOVX    A,@DPTR
0492 25E0              ADD     A,ACC
0494 FF                MOV     R7,A
0495 900000      R     MOV     DPTR,#bodyBlock
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 62  

0498 E0                MOVX    A,@DPTR
0499 33                RLC     A
049A FE                MOV     R6,A
049B EF                MOV     A,R7
049C 2415              ADD     A,#015H
049E FF                MOV     R7,A
049F EE                MOV     A,R6
04A0 3401              ADDC    A,#01H
04A2 CF                XCH     A,R7
04A3 2D                ADD     A,R5
04A4 CF                XCH     A,R7
04A5 35F0              ADDC    A,B
04A7 FE                MOV     R6,A
04A8 7B01              MOV     R3,#01H
04AA 7A00        R     MOV     R2,#HIGH sum
04AC 7900        R     MOV     R1,#LOW sum
04AE 7D01              MOV     R5,#01H
04B0         ?C0176:
04B0 7C00              MOV     R4,#00H
04B2 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 389
04B5 900000      R     MOV     DPTR,#bodyBlock
04B8 E0                MOVX    A,@DPTR
04B9 F9                MOV     R1,A
04BA A3                INC     DPTR
04BB E0                MOVX    A,@DPTR
04BC FF                MOV     R7,A
04BD 900000      R     MOV     DPTR,#addr
04C0 E0                MOVX    A,@DPTR
04C1 FB                MOV     R3,A
04C2 A3                INC     DPTR
04C3 E0                MOVX    A,@DPTR
04C4 FA                MOV     R2,A
04C5 A3                INC     DPTR
04C6 E0                MOVX    A,@DPTR
04C7 C9                XCH     A,R1
04C8 8FF0              MOV     B,R7
04CA 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
04CD         ?C0078:
                                           ; SOURCE LINE # 393
04CD E4                CLR     A
04CE FE                MOV     R6,A
04CF FF                MOV     R7,A
                                           ; SOURCE LINE # 394
04D0         ?C0083:
04D0 22                RET     
             ; FUNCTION _FSCreateBodyEF (END)

             ; FUNCTION _FSCreateFile (BEGIN)
                                           ; SOURCE LINE # 396
0000 900000      R     MOV     DPTR,#desc
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 63  

000B 900000      R     MOV     DPTR,#tag
000E EE                MOV     A,R6
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
0013 644F              XRL     A,#04FH
0015 4E                ORL     A,R6
0016 7003              JNZ     ?C0098
                                           ; SOURCE LINE # 404
0018 A3                INC     DPTR
                                           ; SOURCE LINE # 405
0019 800F              SJMP    ?C0177
001B         ?C0098:
                                           ; SOURCE LINE # 406
001B 900000      R     MOV     DPTR,#tag
001E E0                MOVX    A,@DPTR
001F 7004              JNZ     ?C0156
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023 645F              XRL     A,#05FH
0025         ?C0156:
0025 7018              JNZ     ?C0099
                                           ; SOURCE LINE # 407
0027 900000      R     MOV     DPTR,#desc
002A         ?C0177:
002A E0                MOVX    A,@DPTR
002B FB                MOV     R3,A
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FA                MOV     R2,A
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031 F9                MOV     R1,A
0032 120000      E     LCALL   ?C?ILDPTR
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#fid
0039 E5F0              MOV     A,B
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 408
003F         ?C0099:
                                           ; SOURCE LINE # 411
003F 120000      E     LCALL   State_GetCurrent
;---- Variable 'current' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 412
0042 EF                MOV     A,R7
0043 25E0              ADD     A,ACC
0045 FF                MOV     R7,A
0046 EE                MOV     A,R6
0047 33                RLC     A
0048 FE                MOV     R6,A
0049 EF                MOV     A,R7
004A 2410              ADD     A,#010H
004C FF                MOV     R7,A
004D EE                MOV     A,R6
004E 3401              ADDC    A,#01H
0050 FE                MOV     R6,A
0051 7B01              MOV     R3,#01H
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 64  

0053 7A00        R     MOV     R2,#HIGH currentTag
0055 7900        R     MOV     R1,#LOW currentTag
0057 7D01              MOV     R5,#01H
0059 7C00              MOV     R4,#00H
005B 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 413
005E 900000      R     MOV     DPTR,#currentTag
0061 E0                MOVX    A,@DPTR
0062 B45F05            CJNE    A,#05FH,?C0101
                                           ; SOURCE LINE # 414
0065 7E00              MOV     R6,#00H
0067 7F23              MOV     R7,#023H
0069 22                RET     
                                           ; SOURCE LINE # 415
006A         ?C0101:
                                           ; SOURCE LINE # 425
006A 900000      R     MOV     DPTR,#tag
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F FF                MOV     R7,A
0070 900000      R     MOV     DPTR,#fid
0073 E0                MOVX    A,@DPTR
0074 FC                MOV     R4,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 FD                MOV     R5,A
0078 7B01              MOV     R3,#01H
007A 7A00        R     MOV     R2,#HIGH header
007C 7900        R     MOV     R1,#LOW header
007E 120000      R     LCALL   _FSCreateHeader
;---- Variable 'status' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 426
0081 EF                MOV     A,R7
0082 4E                ORL     A,R6
0083 6001              JZ      ?C0103
                                           ; SOURCE LINE # 427
0085 22                RET     
                                           ; SOURCE LINE # 428
0086         ?C0103:
                                           ; SOURCE LINE # 431
0086 900000      R     MOV     DPTR,#tag
0089 E0                MOVX    A,@DPTR
008A 7004              JNZ     ?C0157
008C A3                INC     DPTR
008D E0                MOVX    A,@DPTR
008E 645F              XRL     A,#05FH
0090         ?C0157:
0090 7042              JNZ     ?C0104
                                           ; SOURCE LINE # 432
0092 900000      R     MOV     DPTR,#?_FSCreateBodyEF?BYTE+03H
0095 04                INC     A
0096 F0                MOVX    @DPTR,A
0097 A3                INC     DPTR
0098 7400        R     MOV     A,#HIGH body
009A F0                MOVX    @DPTR,A
009B A3                INC     DPTR
009C 7400        R     MOV     A,#LOW body
009E F0                MOVX    @DPTR,A
009F 900000      R     MOV     DPTR,#desc
00A2 E0                MOVX    A,@DPTR
00A3 FB                MOV     R3,A
00A4 A3                INC     DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 65  

00A5 E0                MOVX    A,@DPTR
00A6 FA                MOV     R2,A
00A7 A3                INC     DPTR
00A8 E0                MOVX    A,@DPTR
00A9 F9                MOV     R1,A
00AA 120000      R     LCALL   _FSCreateBodyEF
                                           ; SOURCE LINE # 433
00AD EF                MOV     A,R7
00AE 4E                ORL     A,R6
00AF 6001              JZ      ?C0105
                                           ; SOURCE LINE # 434
00B1 22                RET     
                                           ; SOURCE LINE # 435
00B2         ?C0105:
                                           ; SOURCE LINE # 436
00B2 900000      R     MOV     DPTR,#header+01H
00B5 E0                MOVX    A,@DPTR
00B6 25E0              ADD     A,ACC
00B8 FF                MOV     R7,A
00B9 900000      R     MOV     DPTR,#header
00BC E0                MOVX    A,@DPTR
00BD 33                RLC     A
00BE FE                MOV     R6,A
00BF EF                MOV     A,R7
00C0 2419              ADD     A,#019H
00C2 FF                MOV     R7,A
00C3 EE                MOV     A,R6
00C4 3401              ADDC    A,#01H
00C6 FE                MOV     R6,A
00C7 7B01              MOV     R3,#01H
00C9 7A00        R     MOV     R2,#HIGH body
00CB 7900        R     MOV     R1,#LOW body
00CD 7D02              MOV     R5,#02H
00CF 7C00              MOV     R4,#00H
00D1 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 437
00D4         ?C0104:
                                           ; SOURCE LINE # 438
00D4 900000      R     MOV     DPTR,#header
00D7 E0                MOVX    A,@DPTR
00D8 FE                MOV     R6,A
00D9 A3                INC     DPTR
00DA E0                MOVX    A,@DPTR
00DB FF                MOV     R7,A
00DC 120000      E     LCALL   _State_SetCurrent
                                           ; SOURCE LINE # 439
00DF E4                CLR     A
00E0 FE                MOV     R6,A
00E1 FF                MOV     R7,A
                                           ; SOURCE LINE # 440
00E2         ?C0102:
00E2 22                RET     
             ; FUNCTION _FSCreateFile (END)

             ; FUNCTION _FSFree (BEGIN)
                                           ; SOURCE LINE # 443
0000 900000      R     MOV     DPTR,#length
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 66  

;---- Variable 'address' assigned to Register 'R2/R3' ----
0008 AB07              MOV     R3,AR7
000A AA06              MOV     R2,AR6
                                           ; SOURCE LINE # 450
000C EB                MOV     A,R3
000D 7803              MOV     R0,#03H
000F         ?C0158:
000F CE                XCH     A,R6
0010 C3                CLR     C
0011 13                RRC     A
0012 CE                XCH     A,R6
0013 13                RRC     A
0014 D8F9              DJNZ    R0,?C0158
0016 FF                MOV     R7,A
0017 900000      R     MOV     DPTR,#startbyte
001A EE                MOV     A,R6
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 451
001F EB                MOV     A,R3
0020 5407              ANL     A,#07H
0022 900000      R     MOV     DPTR,#startbit
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
0026 900000      R     MOV     DPTR,#length+01H
0029 E0                MOVX    A,@DPTR
002A 2B                ADD     A,R3
002B FD                MOV     R5,A
002C 900000      R     MOV     DPTR,#length
002F E0                MOVX    A,@DPTR
0030 3A                ADDC    A,R2
0031 FC                MOV     R4,A
0032 ED                MOV     A,R5
0033 AE04              MOV     R6,AR4
0035 7803              MOV     R0,#03H
0037         ?C0159:
0037 CE                XCH     A,R6
0038 C3                CLR     C
0039 13                RRC     A
003A CE                XCH     A,R6
003B 13                RRC     A
003C D8F9              DJNZ    R0,?C0159
003E FF                MOV     R7,A
003F 900000      R     MOV     DPTR,#stopbyte
0042 EE                MOV     A,R6
0043 F0                MOVX    @DPTR,A
0044 A3                INC     DPTR
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 453
0047 ED                MOV     A,R5
0048 5407              ANL     A,#07H
004A 900000      R     MOV     DPTR,#stopbit
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 455
004E 900000      R     MOV     DPTR,#startbyte
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 67  

0055 900000      R     MOV     DPTR,#i
0058 CF                XCH     A,R7
0059 F0                MOVX    @DPTR,A
005A A3                INC     DPTR
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
005D         ?C0106:
005D 900000      R     MOV     DPTR,#stopbyte
0060 E0                MOVX    A,@DPTR
0061 FE                MOV     R6,A
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 900000      R     MOV     DPTR,#i
0068 E0                MOVX    A,@DPTR
0069 FC                MOV     R4,A
006A A3                INC     DPTR
006B E0                MOVX    A,@DPTR
006C FD                MOV     R5,A
006D D3                SETB    C
006E 9F                SUBB    A,R7
006F EC                MOV     A,R4
0070 9E                SUBB    A,R6
0071 4003              JC      $ + 5H
0073 020000      R     LJMP    ?C0107
                                           ; SOURCE LINE # 456
0076 ED                MOV     A,R5
0077 2410              ADD     A,#010H
0079 FF                MOV     R7,A
007A EC                MOV     A,R4
007B 3401              ADDC    A,#01H
007D FE                MOV     R6,A
007E 120000      E     LCALL   _Memory_ReadByte
0081 900000      R     MOV     DPTR,#temp
0084 EF                MOV     A,R7
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 458
0086 900000      R     MOV     DPTR,#startbyte
0089 E0                MOVX    A,@DPTR
008A FE                MOV     R6,A
008B A3                INC     DPTR
008C E0                MOVX    A,@DPTR
008D FF                MOV     R7,A
008E 900000      R     MOV     DPTR,#i
0091 E0                MOVX    A,@DPTR
0092 FC                MOV     R4,A
0093 A3                INC     DPTR
0094 E0                MOVX    A,@DPTR
0095 FD                MOV     R5,A
0096 B5070B            CJNE    A,AR7,?C0109
0099 EC                MOV     A,R4
009A B50607            CJNE    A,AR6,?C0109
009D 900000      R     MOV     DPTR,#startbit
00A0 E0                MOVX    A,@DPTR
00A1 FF                MOV     R7,A
00A2 8002              SJMP    ?C0110
00A4         ?C0109:
00A4 7F00              MOV     R7,#00H
00A6         ?C0110:
;---- Variable 'startXOR' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 459
00A6 900000      R     MOV     DPTR,#stopbyte
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 68  

00A9 E0                MOVX    A,@DPTR
00AA FA                MOV     R2,A
00AB A3                INC     DPTR
00AC E0                MOVX    A,@DPTR
00AD B5050B            CJNE    A,AR5,?C0111
00B0 EC                MOV     A,R4
00B1 B50207            CJNE    A,AR2,?C0111
00B4 900000      R     MOV     DPTR,#stopbit
00B7 E0                MOVX    A,@DPTR
00B8 FE                MOV     R6,A
00B9 8002              SJMP    ?C0112
00BB         ?C0111:
00BB 7E08              MOV     R6,#08H
00BD         ?C0112:
;---- Variable 'stopXOR' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 461
00BD E4                CLR     A
00BE 900000      R     MOV     DPTR,#tempXOR
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
00C2 EF                MOV     A,R7
00C3 FD                MOV     R5,A
00C4 7C00              MOV     R4,#00H
;---- Variable 'j' assigned to Register 'R4/R5' ----
00C6         ?C0113:
00C6 EE                MOV     A,R6
00C7 FB                MOV     R3,A
00C8 C3                CLR     C
00C9 ED                MOV     A,R5
00CA 9B                SUBB    A,R3
00CB EC                MOV     A,R4
00CC 9400              SUBB    A,#00H
00CE 501B              JNC     ?C0114
                                           ; SOURCE LINE # 464
00D0 AF05              MOV     R7,AR5
00D2 7480              MOV     A,#080H
00D4 A807              MOV     R0,AR7
00D6 08                INC     R0
00D7 8002              SJMP    ?C0163
00D9         ?C0162:
00D9 C3                CLR     C
00DA 13                RRC     A
00DB         ?C0163:
00DB D8FC              DJNZ    R0,?C0162
00DD FF                MOV     R7,A
00DE 900000      R     MOV     DPTR,#tempXOR
00E1 E0                MOVX    A,@DPTR
00E2 6F                XRL     A,R7
00E3 F0                MOVX    @DPTR,A
00E4 0D                INC     R5
00E5 BD0001            CJNE    R5,#00H,?C0164
00E8 0C                INC     R4
00E9         ?C0164:
00E9 80DB              SJMP    ?C0113
00EB         ?C0114:
                                           ; SOURCE LINE # 466
00EB 900000      R     MOV     DPTR,#temp
00EE E0                MOVX    A,@DPTR
00EF FF                MOV     R7,A
00F0 A3                INC     DPTR
00F1 E0                MOVX    A,@DPTR
00F2 FE                MOV     R6,A
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 69  

00F3 EF                MOV     A,R7
00F4 6E                XRL     A,R6
00F5 900000      R     MOV     DPTR,#temp
00F8 F0                MOVX    @DPTR,A
00F9 FD                MOV     R5,A
                                           ; SOURCE LINE # 468
00FA 900000      R     MOV     DPTR,#i+01H
00FD E0                MOVX    A,@DPTR
00FE 2410              ADD     A,#010H
0100 FF                MOV     R7,A
0101 900000      R     MOV     DPTR,#i
0104 E0                MOVX    A,@DPTR
0105 3401              ADDC    A,#01H
0107 FE                MOV     R6,A
0108 120000      E     LCALL   _Memory_WriteByte
                                           ; SOURCE LINE # 469
010B 900000      R     MOV     DPTR,#i+01H
010E E0                MOVX    A,@DPTR
010F 04                INC     A
0110 F0                MOVX    @DPTR,A
0111 6003              JZ      $ + 5H
0113 020000      R     LJMP    ?C0106
0116 900000      R     MOV     DPTR,#i
0119 E0                MOVX    A,@DPTR
011A 04                INC     A
011B F0                MOVX    @DPTR,A
011C         ?C0165:
011C 020000      R     LJMP    ?C0106
011F         ?C0107:
                                           ; SOURCE LINE # 470
011F E4                CLR     A
0120 FE                MOV     R6,A
0121 FF                MOV     R7,A
                                           ; SOURCE LINE # 471
0122         ?C0116:
0122 22                RET     
             ; FUNCTION _FSFree (END)

             ; FUNCTION _FSDeleteFile (BEGIN)
                                           ; SOURCE LINE # 473
;---- Variable 'fid' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 479
0000 120000      R     LCALL   _FSSearchFID
0003 900000      R     MOV     DPTR,#header
0006 EE                MOV     A,R6
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
000B F4                CPL     A
000C 4E                ORL     A,R6
000D 7004              JNZ     ?C0117
                                           ; SOURCE LINE # 482
000F FE                MOV     R6,A
0010 7F20              MOV     R7,#020H
0012 22                RET     
                                           ; SOURCE LINE # 483
0013         ?C0117:
                                           ; SOURCE LINE # 487
0013 900000      R     MOV     DPTR,#header+01H
0016 E0                MOVX    A,@DPTR
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 70  

0017 25E0              ADD     A,ACC
0019 FF                MOV     R7,A
001A 900000      R     MOV     DPTR,#header
001D E0                MOVX    A,@DPTR
001E 33                RLC     A
001F FE                MOV     R6,A
0020 EF                MOV     A,R7
0021 2413              ADD     A,#013H
0023 FF                MOV     R7,A
0024 EE                MOV     A,R6
0025 3401              ADDC    A,#01H
0027 FE                MOV     R6,A
0028 7B01              MOV     R3,#01H
002A 7A00        R     MOV     R2,#HIGH parent
002C 7900        R     MOV     R1,#LOW parent
002E 7D02              MOV     R5,#02H
0030 7C00              MOV     R4,#00H
0032 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 489
0035 900000      R     MOV     DPTR,#parent+01H
0038 E0                MOVX    A,@DPTR
0039 25E0              ADD     A,ACC
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#parent
003F E0                MOVX    A,@DPTR
0040 33                RLC     A
0041 FE                MOV     R6,A
0042 EF                MOV     A,R7
0043 2415              ADD     A,#015H
0045 FF                MOV     R7,A
0046 EE                MOV     A,R6
0047 3401              ADDC    A,#01H
0049 FE                MOV     R6,A
004A 7B01              MOV     R3,#01H
004C 7A00        R     MOV     R2,#HIGH sibling
004E 7900        R     MOV     R1,#LOW sibling
0050 7D02              MOV     R5,#02H
0052 7C00              MOV     R4,#00H
0054 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 491
0057 900000      R     MOV     DPTR,#header
005A E0                MOVX    A,@DPTR
005B FE                MOV     R6,A
005C A3                INC     DPTR
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F 900000      R     MOV     DPTR,#sibling
0062 E0                MOVX    A,@DPTR
0063 6E                XRL     A,R6
0064 7003              JNZ     ?C0166
0066 A3                INC     DPTR
0067 E0                MOVX    A,@DPTR
0068 6F                XRL     A,R7
0069         ?C0166:
0069 7039              JNZ     ?C0121
                                           ; SOURCE LINE # 492
006B EF                MOV     A,R7
006C 25E0              ADD     A,ACC
006E FF                MOV     R7,A
006F EE                MOV     A,R6
0070 33                RLC     A
0071 FE                MOV     R6,A
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 71  

0072 EF                MOV     A,R7
0073 2417              ADD     A,#017H
0075 FF                MOV     R7,A
0076 EE                MOV     A,R6
0077 3401              ADDC    A,#01H
0079 FE                MOV     R6,A
007A 7B01              MOV     R3,#01H
007C 7A00        R     MOV     R2,#HIGH sibling
007E 7900        R     MOV     R1,#LOW sibling
0080 7D02              MOV     R5,#02H
0082 7C00              MOV     R4,#00H
0084 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 493
0087 900000      R     MOV     DPTR,#parent+01H
008A E0                MOVX    A,@DPTR
008B 25E0              ADD     A,ACC
008D FF                MOV     R7,A
008E 900000      R     MOV     DPTR,#parent
0091 E0                MOVX    A,@DPTR
0092 33                RLC     A
0093 FE                MOV     R6,A
0094 EF                MOV     A,R7
0095 2415              ADD     A,#015H
0097 FF                MOV     R7,A
0098 EE                MOV     A,R6
0099 3401              ADDC    A,#01H
009B FE                MOV     R6,A
009C 7B01              MOV     R3,#01H
009E 7A00        R     MOV     R2,#HIGH sibling
00A0 7900        R     MOV     R1,#LOW sibling
                                           ; SOURCE LINE # 494
00A2 807C              SJMP    ?C0178
                                           ; SOURCE LINE # 496
00A4         ?C0121:
                                           ; SOURCE LINE # 497
00A4 900000      R     MOV     DPTR,#header
00A7 E0                MOVX    A,@DPTR
00A8 FE                MOV     R6,A
00A9 A3                INC     DPTR
00AA E0                MOVX    A,@DPTR
00AB FF                MOV     R7,A
00AC 900000      R     MOV     DPTR,#sibling
00AF E0                MOVX    A,@DPTR
00B0 6E                XRL     A,R6
00B1 7003              JNZ     ?C0167
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 6F                XRL     A,R7
00B6         ?C0167:
00B6 602B              JZ      ?C0122
                                           ; SOURCE LINE # 498
00B8 900000      R     MOV     DPTR,#sibling
00BB E0                MOVX    A,@DPTR
00BC FE                MOV     R6,A
00BD A3                INC     DPTR
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 A3                INC     DPTR
00C1 EE                MOV     A,R6
00C2 F0                MOVX    @DPTR,A
00C3 A3                INC     DPTR
00C4 EF                MOV     A,R7
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 72  

00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
00C6 25E0              ADD     A,ACC
00C8 FF                MOV     R7,A
00C9 EE                MOV     A,R6
00CA 33                RLC     A
00CB FE                MOV     R6,A
00CC EF                MOV     A,R7
00CD 2417              ADD     A,#017H
00CF FF                MOV     R7,A
00D0 EE                MOV     A,R6
00D1 3401              ADDC    A,#01H
00D3 FE                MOV     R6,A
00D4 7B01              MOV     R3,#01H
00D6 7A00        R     MOV     R2,#HIGH sibling
00D8 7900        R     MOV     R1,#LOW sibling
00DA 7D02              MOV     R5,#02H
00DC 7C00              MOV     R4,#00H
00DE 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 500
00E1 80C1              SJMP    ?C0121
00E3         ?C0122:
                                           ; SOURCE LINE # 501
00E3 900000      R     MOV     DPTR,#header+01H
00E6 E0                MOVX    A,@DPTR
00E7 25E0              ADD     A,ACC
00E9 FF                MOV     R7,A
00EA 900000      R     MOV     DPTR,#header
00ED E0                MOVX    A,@DPTR
00EE 33                RLC     A
00EF FE                MOV     R6,A
00F0 EF                MOV     A,R7
00F1 2417              ADD     A,#017H
00F3 FF                MOV     R7,A
00F4 EE                MOV     A,R6
00F5 3401              ADDC    A,#01H
00F7 FE                MOV     R6,A
00F8 7B01              MOV     R3,#01H
00FA 7A00        R     MOV     R2,#HIGH siblingNext
00FC 7900        R     MOV     R1,#LOW siblingNext
00FE 7D02              MOV     R5,#02H
0100 7C00              MOV     R4,#00H
0102 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 502
0105 900000      R     MOV     DPTR,#siblingBefore+01H
0108 E0                MOVX    A,@DPTR
0109 25E0              ADD     A,ACC
010B FF                MOV     R7,A
010C 900000      R     MOV     DPTR,#siblingBefore
010F E0                MOVX    A,@DPTR
0110 33                RLC     A
0111 FE                MOV     R6,A
0112 EF                MOV     A,R7
0113 2417              ADD     A,#017H
0115 FF                MOV     R7,A
0116 EE                MOV     A,R6
0117 3401              ADDC    A,#01H
0119 FE                MOV     R6,A
011A 7B01              MOV     R3,#01H
011C 7A00        R     MOV     R2,#HIGH siblingNext
011E 7900        R     MOV     R1,#LOW siblingNext
0120         ?C0178:
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 73  

0120 7D02              MOV     R5,#02H
0122 7C00              MOV     R4,#00H
0124 120000      E     LCALL   _Memory_WriteBlock
                                           ; SOURCE LINE # 503
0127         ?C0120:
                                           ; SOURCE LINE # 506
0127 900000      R     MOV     DPTR,#header+01H
012A E0                MOVX    A,@DPTR
012B 25E0              ADD     A,ACC
012D FF                MOV     R7,A
012E 900000      R     MOV     DPTR,#header
0131 E0                MOVX    A,@DPTR
0132 33                RLC     A
0133 FE                MOV     R6,A
0134 EF                MOV     A,R7
0135 2410              ADD     A,#010H
0137 FF                MOV     R7,A
0138 EE                MOV     A,R6
0139 3401              ADDC    A,#01H
013B FE                MOV     R6,A
013C 7B01              MOV     R3,#01H
013E 7A00        R     MOV     R2,#HIGH tag
0140 7900        R     MOV     R1,#LOW tag
0142 7D01              MOV     R5,#01H
0144 7C00              MOV     R4,#00H
0146 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 508
0149 900000      R     MOV     DPTR,#tag
014C E0                MOVX    A,@DPTR
014D 645F              XRL     A,#05FH
014F 6003              JZ      $ + 5H
0151 020000      R     LJMP    ?C0123
                                           ; SOURCE LINE # 509
0154 900000      R     MOV     DPTR,#header+01H
0157 E0                MOVX    A,@DPTR
0158 25E0              ADD     A,ACC
015A FF                MOV     R7,A
015B 900000      R     MOV     DPTR,#header
015E E0                MOVX    A,@DPTR
015F 33                RLC     A
0160 FE                MOV     R6,A
0161 EF                MOV     A,R7
0162 2419              ADD     A,#019H
0164 FF                MOV     R7,A
0165 EE                MOV     A,R6
0166 3401              ADDC    A,#01H
0168 FE                MOV     R6,A
0169 7B01              MOV     R3,#01H
016B 7A00        R     MOV     R2,#HIGH body
016D 7900        R     MOV     R1,#LOW body
016F 7D02              MOV     R5,#02H
0171 7C00              MOV     R4,#00H
0173 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 510
0176 900000      R     MOV     DPTR,#body+01H
0179 E0                MOVX    A,@DPTR
017A 25E0              ADD     A,ACC
017C FF                MOV     R7,A
017D 900000      R     MOV     DPTR,#body
0180 E0                MOVX    A,@DPTR
0181 33                RLC     A
0182 FE                MOV     R6,A
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 74  

0183 EF                MOV     A,R7
0184 2413              ADD     A,#013H
0186 FF                MOV     R7,A
0187 EE                MOV     A,R6
0188 3401              ADDC    A,#01H
018A FE                MOV     R6,A
018B 7B01              MOV     R3,#01H
018D 7A00        R     MOV     R2,#HIGH bodySize
018F 7900        R     MOV     R1,#LOW bodySize
0191 7D02              MOV     R5,#02H
0193 7C00              MOV     R4,#00H
0195 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 511
0198 900000      R     MOV     DPTR,#bodySize+01H
019B E0                MOVX    A,@DPTR
019C 2405              ADD     A,#05H
019E FF                MOV     R7,A
019F 900000      R     MOV     DPTR,#bodySize
01A2 E0                MOVX    A,@DPTR
01A3 3400              ADDC    A,#00H
01A5 FE                MOV     R6,A
01A6 EF                MOV     A,R7
01A7 20E00B            JB      ACC.0,?C0124
01AA EE                MOV     A,R6
01AB C3                CLR     C
01AC 13                RRC     A
01AD FE                MOV     R6,A
01AE EF                MOV     A,R7
01AF 13                RRC     A
01B0 AC06              MOV     R4,AR6
01B2 FD                MOV     R5,A
01B3 801A              SJMP    ?C0125
01B5         ?C0124:
01B5 900000      R     MOV     DPTR,#bodySize+01H
01B8 E0                MOVX    A,@DPTR
01B9 2405              ADD     A,#05H
01BB FF                MOV     R7,A
01BC 900000      R     MOV     DPTR,#bodySize
01BF E0                MOVX    A,@DPTR
01C0 3400              ADDC    A,#00H
01C2 C3                CLR     C
01C3 13                RRC     A
01C4 FE                MOV     R6,A
01C5 EF                MOV     A,R7
01C6 13                RRC     A
01C7 2401              ADD     A,#01H
01C9 FF                MOV     R7,A
01CA E4                CLR     A
01CB 3E                ADDC    A,R6
01CC FC                MOV     R4,A
01CD AD07              MOV     R5,AR7
01CF         ?C0125:
01CF 900000      R     MOV     DPTR,#body
01D2 E0                MOVX    A,@DPTR
01D3 FE                MOV     R6,A
01D4 A3                INC     DPTR
01D5 E0                MOVX    A,@DPTR
01D6 FF                MOV     R7,A
01D7 120000      R     LCALL   _FSFree
                                           ; SOURCE LINE # 512
01DA         ?C0123:
                                           ; SOURCE LINE # 515
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 75  

01DA 900000      R     MOV     DPTR,#header
01DD E0                MOVX    A,@DPTR
01DE FE                MOV     R6,A
01DF A3                INC     DPTR
01E0 E0                MOVX    A,@DPTR
01E1 FF                MOV     R7,A
01E2 7D06              MOV     R5,#06H
01E4 7C00              MOV     R4,#00H
01E6 120000      R     LCALL   _FSFree
                                           ; SOURCE LINE # 516
01E9 E4                CLR     A
01EA FE                MOV     R6,A
01EB FF                MOV     R7,A
                                           ; SOURCE LINE # 517
01EC         ?C0118:
01EC 22                RET     
             ; FUNCTION _FSDeleteFile (END)

C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 76  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_Memory_WriteByte. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
FSFormat . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  headerBlock. . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  none16 . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  fidMF. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  tagMF. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
  status . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_FSAlloc . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0016H  -----
  size_alloc . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  startBlock . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  endBlock . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  address. . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0009H  2
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000BH  2
  k. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000DH  2
  m. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000FH  2
  n. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0011H  2
  startbyte. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0013H  2
  startbit . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0015H  2
  startSearchBit . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  stopbyte . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0017H  2
  stopbit. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0019H  2
  stopSearchBit. . . . . . . . . . . .  AUTO     XDATA  U_INT    001BH  2
  tempAddress. . . . . . . . . . . . .  AUTO     XDATA  U_INT    001DH  2
  free . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    001FH  2
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0021H  1
  cont . . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
_FSCreateBodyEF. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  desc . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  addr . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  bodyBlock. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  status . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
  var_length . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    000CH  255
  sum. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   010BH  1
FS_Init. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
FSSelectMF . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_Transmission_SendByte . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FSFree. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  address. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
  length . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  startbyte. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  stopbyte . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  startbit . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  stopbit. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  startXOR . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  stopXOR. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
  tempXOR. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0009H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
FS_GetAC . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  header . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  body . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  ac . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
Transmission_GetByte . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 77  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


state_struct . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  current. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  currentKey . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  currentRecord. . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  securityState. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  challenge. . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0007H  8
_FS_SelectFID. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fid. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  file . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_FSCreateHeader. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  tag. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  fid. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  addr . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  current. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  currentChild . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  currentChildTemp . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
  headerBlock. . . . . . . . . . . . .  AUTO     XDATA  U_INT    000CH  2
  none16 . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000EH  2
  status . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_FS_SearchAllFID . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fid. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  current. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  result . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_FS_CheckChildSibling_FID. . . . . . .  PUBLIC   CODE   PROC     0008H  -----
  fid. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  current. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  tempFID. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  child. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  tempChild. . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  sibling. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  tempSibling. . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  tempTag. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
_FSSearchFID . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fid. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  current. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  parent . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  sibling. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  child. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  tempFID. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
  tempTag. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000CH  1
_Memory_ReadBlock. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
State_GetCurrentSecurity . . . . . . .  EXTERN   CODE   PROC     -----  -----
DF_st. . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  FID. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  DFname . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  16
  asc_flag . . . . . . . . . . . . . .  MEMBER   -----  CHAR     0012H  1
  asc. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
EF_st. . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  FID. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  structure. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  AC . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  ptr_body . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  file_size. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  record_le. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
_FSAccessBinary. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  op . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
C51 COMPILER V9.01   FS                                                                    02/22/2017 16:00:37 PAGE 78  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  offset . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  length . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  databyte . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  3
  header . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  body . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0009H  2
_Memory_WriteBlock . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FS_CheckAC. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  op . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  ac . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  current. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
header . . . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  5
State_GetCurrent . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Memory_ReadByte . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FSDeleteFile. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fid. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  header . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  parent . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  sibling. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  siblingBefore. . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  siblingNext. . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  body . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
  bodySize . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000CH  2
  tag. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000EH  1
_FSCreateFile. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  tag. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  desc . . . . . . . . . . . . . . . .  AUTO     XDATA  VOID_PTR 0002H  3
  header . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0005H  2
  body . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
  current. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  fid. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0009H  2
  currentTag . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
  status . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
_State_SetCurrent. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4794    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     407
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
