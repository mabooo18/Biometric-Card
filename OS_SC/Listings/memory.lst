C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MEMORY
OBJECT MODULE PLACED IN .\Objects\memory.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE memory.c LARGE BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRINT(.\L
                    -istings\memory.lst) PREPRINT(.\Listings\memory.i) OBJECT(.\Objects\memory.obj)

line level    source

   1          #include <reg51.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  REG51.H
   3      =1  
   4      =1  Header file for generic 80C51 and 80C31 microcontroller.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __REG51_H__
  10      =1  #define __REG51_H__
  11      =1  
  12      =1  /*  BYTE Register  */
  13      =1  sfr P0   = 0x80;
  14      =1  sfr P1   = 0x90;
  15      =1  sfr P2   = 0xA0;
  16      =1  sfr P3   = 0xB0;
  17      =1  sfr PSW  = 0xD0;
  18      =1  sfr ACC  = 0xE0;
  19      =1  sfr B    = 0xF0;
  20      =1  sfr SP   = 0x81;
  21      =1  sfr DPL  = 0x82;
  22      =1  sfr DPH  = 0x83;
  23      =1  sfr PCON = 0x87;
  24      =1  sfr TCON = 0x88;
  25      =1  sfr TMOD = 0x89;
  26      =1  sfr TL0  = 0x8A;
  27      =1  sfr TL1  = 0x8B;
  28      =1  sfr TH0  = 0x8C;
  29      =1  sfr TH1  = 0x8D;
  30      =1  sfr IE   = 0xA8;
  31      =1  sfr IP   = 0xB8;
  32      =1  sfr SCON = 0x98;
  33      =1  sfr SBUF = 0x99;
  34      =1  
  35      =1  
  36      =1  /*  BIT Register  */
  37      =1  /*  PSW   */
  38      =1  sbit CY   = 0xD7;
  39      =1  sbit AC   = 0xD6;
  40      =1  sbit F0   = 0xD5;
  41      =1  sbit RS1  = 0xD4;
  42      =1  sbit RS0  = 0xD3;
  43      =1  sbit OV   = 0xD2;
  44      =1  sbit P    = 0xD0;
  45      =1  
  46      =1  /*  TCON  */
  47      =1  sbit TF1  = 0x8F;
  48      =1  sbit TR1  = 0x8E;
  49      =1  sbit TF0  = 0x8D;
  50      =1  sbit TR0  = 0x8C;
  51      =1  sbit IE1  = 0x8B;
  52      =1  sbit IT1  = 0x8A;
  53      =1  sbit IE0  = 0x89;
C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 2   

  54      =1  sbit IT0  = 0x88;
  55      =1  
  56      =1  /*  IE   */
  57      =1  sbit EA   = 0xAF;
  58      =1  sbit ES   = 0xAC;
  59      =1  sbit ET1  = 0xAB;
  60      =1  sbit EX1  = 0xAA;
  61      =1  sbit ET0  = 0xA9;
  62      =1  sbit EX0  = 0xA8;
  63      =1  
  64      =1  /*  IP   */ 
  65      =1  sbit PS   = 0xBC;
  66      =1  sbit PT1  = 0xBB;
  67      =1  sbit PX1  = 0xBA;
  68      =1  sbit PT0  = 0xB9;
  69      =1  sbit PX0  = 0xB8;
  70      =1  
  71      =1  /*  P3  */
  72      =1  sbit RD   = 0xB7;
  73      =1  sbit WR   = 0xB6;
  74      =1  sbit T1   = 0xB5;
  75      =1  sbit T0   = 0xB4;
  76      =1  sbit INT1 = 0xB3;
  77      =1  sbit INT0 = 0xB2;
  78      =1  sbit TXD  = 0xB1;
  79      =1  sbit RXD  = 0xB0;
  80      =1  
  81      =1  /*  SCON  */
  82      =1  sbit SM0  = 0x9F;
  83      =1  sbit SM1  = 0x9E;
  84      =1  sbit SM2  = 0x9D;
  85      =1  sbit REN  = 0x9C;
  86      =1  sbit TB8  = 0x9B;
  87      =1  sbit RB8  = 0x9A;
  88      =1  sbit TI   = 0x99;
  89      =1  sbit RI   = 0x98;
  90      =1  
  91      =1  #endif
   2          #include <string.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  STRING.H
   3      =1  
   4      =1  String functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __STRING_H__
  10      =1  #define __STRING_H__
  11      =1  
  12      =1  #ifndef _SIZE_T
  13      =1   #define _SIZE_T
  14      =1   typedef unsigned int size_t;
  15      =1  #endif
  16      =1  
  17      =1  #ifndef NULL
  18      =1   #define NULL ((void *) 0L)
  19      =1  #endif
  20      =1  
  21      =1  #pragma SAVE
  22      =1  #pragma REGPARMS
  23      =1  extern char *strcat (char *s1, char *s2);
C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 3   

  24      =1  extern char *strncat (char *s1, char *s2, int n);
  25      =1  
  26      =1  extern char strcmp (char *s1, char *s2);
  27      =1  extern char strncmp (char *s1, char *s2, int n);
  28      =1  
  29      =1  extern char *strcpy (char *s1, char *s2);
  30      =1  extern char *strncpy (char *s1, char *s2, int n);
  31      =1  
  32      =1  extern int strlen (char *);
  33      =1  
  34      =1  extern char *strchr (const char *s, char c);
  35      =1  extern int strpos (const char *s, char c);
  36      =1  extern char *strrchr (const char *s, char c);
  37      =1  extern int strrpos (const char *s, char c);
  38      =1  
  39      =1  extern int strspn (char *s, char *set);
  40      =1  extern int strcspn (char *s, char *set);
  41      =1  extern char *strpbrk (char *s, char *set);
  42      =1  extern char *strrpbrk (char *s, char *set);
  43      =1  extern char *strstr  (char *s, char *sub);
  44      =1  extern char *strtok  (char *str, const char *set);
  45      =1  
  46      =1  extern char memcmp (void *s1, void *s2, int n);
  47      =1  extern void *memcpy (void *s1, void *s2, int n);
  48      =1  extern void *memchr (void *s, char val, int n);
  49      =1  extern void *memccpy (void *s1, void *s2, char val, int n);
  50      =1  extern void *memmove (void *s1, void *s2, int n);
  51      =1  extern void *memset  (void *s, char val, int n);
  52      =1  #pragma RESTORE
  53      =1  
  54      =1  #endif
   3          #include "hal.h"
   1      =1  #ifndef HAL_H
   2      =1  #define HAL_H
   3      =1  
   4      =1  void init_HW(void);
   5      =1  #endif
   4          #include "i2c.h"
   1      =1  #ifndef I2C_H
   2      =1  #define I2C_H
   3      =1  
   4      =1  #define I2C_DELAY 0x01  /* For delay i2c bus */
   5      =1  
   6      =1  void I2C_delay(void);
   7      =1  void I2C_start(void);
   8      =1  void I2C_stop(void);
   9      =1  bit I2C_write(unsigned char dat);
  10      =1  unsigned char I2C_read(void);
  11      =1  
  12      =1  #endif
   5          #include "krisna.h"
   1      =1  
   2      =1  #ifndef KRISNA_H
   3      =1  #define KRISNA_H
   4      =1  
   5      =1  #define addr_xi_ECC               0x00
   6      =1  #define addr_yi_ECC               0x1E
   7      =1  #define addr_xo_ECC               0xB2
   8      =1  #define addr_yo_ECC               0xD0
   9      =1  #define addr_k_ECC                0x3C
  10      =1  #define  addr_RNG                         0xEE
  11      =1  #define  addr_k_BC3       0x5A
C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 4   

  12      =1  #define addr_dati_BC3   0x62
  13      =1  #define addr_dati_HASH  0x6A
  14      =1  #define addr_dato_HASH  0x8A
  15      =1  #define addr_dato_BC3   0xAA
  16      =1  
  17      =1  sfr COPBC3              = 0xE8;
  18      =1  sfr COPSTATR    = 0xF8;
  19      =1  sfr COPMOSI     = 0xF9;
  20      =1  sfr COPMISO     = 0xFA;
  21      =1  sfr COPTH               = 0xFB;
  22      =1  sfr COPSRC              = 0xFC;
  23      =1  sfr COPDST              = 0xFD;
  24      =1  sfr COPCOM              = 0xFF;
  25      =1  
  26      =1  sbit s_Empty = 0xF8;
  27      =1  sbit s_Full = 0xF9;
  28      =1  sbit s_TR = 0xFA;
  29      =1  sbit s_ACK = 0xFB;
  30      =1  sbit s_SM = 0xFC;
  31      =1  sbit s_HASH = 0xFD;
  32      =1  sbit s_BC3 = 0xFE;
  33      =1  sbit s_ECC = 0xFF;
  34      =1  
  35      =1  sbit s_Done = 0xD8;
  36      =1  sbit s_6 = 0xD9;
  37      =1  sbit s_5 = 0xDA;
  38      =1  sbit s_4 = 0xDB;
  39      =1  sbit s_3 = 0xDC;
  40      =1  sbit s_2 = 0xDD;
  41      =1  sbit s_1 = 0xDE;
  42      =1  sbit s_0 = 0xDF;
  43      =1  
  44      =1  void coprocessor_init();
  45      =1  
  46      =1  
  47      =1  void copy_data_block_sequential(unsigned char source_address, unsigned char destination_address, unsigned 
             -int length);
  48      =1  
  49      =1  void copy_data_block_independent(unsigned char source_address, unsigned char destination_address, unsigned
             - int length);
  50      =1  
  51      =1  void write_data_independent(unsigned char destination_address, unsigned copdata);
  52      =1  
  53      =1  
  54      =1  void write_data_sequential(unsigned char destination_address, unsigned copdata);
  55      =1  
  56      =1  void write_block_sequential(unsigned copdata);
  57      =1  
  58      =1          
  59      =1  unsigned read_data_sequential(unsigned char source_address);
  60      =1  
  61      =1  unsigned read_data_independent(unsigned char source_address);
  62      =1  
  63      =1  void copy_data_sequential(unsigned char source_address, unsigned char destination_address);
  64      =1  
  65      =1  void copy_data_independent(unsigned char source_address, unsigned char destination_address);
  66      =1  
  67      =1  void ECC_sequential();
  68      =1  
  69      =1  void ECC_independent();
  70      =1  
  71      =1  void HASH_sequential();
C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 5   

  72      =1  
  73      =1  void HASH_independent();
  74      =1  
  75      =1  void BC3_encrypt_k_sequential();
  76      =1  
  77      =1  void BC3_encrypt_k_independent();
  78      =1  
  79      =1  void BC3_encrypt_sequential();
  80      =1  
  81      =1  void BC3_encrypt_independent();
  82      =1  
  83      =1  void BC3_decrypt_k_independent();
  84      =1  
  85      =1  void BC3_decrypt_k_sequential();
  86      =1  
  87      =1  void BC3_decrypt_independent();
  88      =1  
  89      =1  void BC3_decrypt_sequential();
  90      =1  #endif
   6          #include "memory.h"
   1      =1  #ifndef __MEMORY_H__
   2      =1  #define __MEMORY_H__
   3      =1  
   4      =1  extern char eeprom_ID_write;
   5      =1  extern char eeprom_ID_read;
   6      =1  extern char LSB_address;
   7      =1  
   8      =1  unsigned char Memory_ReadByte(unsigned int address);
   9      =1  unsigned char Memory_ReadByte_Ext(unsigned int address);
  10      =1  void Memory_WriteByte_Ext(unsigned int address, char data_to_send);
  11      =1  void Memory_WriteByte(unsigned int address, char data_to_send);
  12      =1  int Memory_ReadBlock(unsigned int address, unsigned int read_size, unsigned char * databyte);
  13      =1  int Memory_WriteBlock(unsigned int address, unsigned int write_size, unsigned char * databyte);
  14      =1  #endif
   7          
   8          
   9          char eeprom_ID_write;
  10          char eeprom_ID_read;
  11          char LSB_address;
  12          
  13          // sbit FL_WREN_O = P1^5;
  14          
  15          // sbit FL_ADDR_O_17 = P1^7;
  16          // sbit FL_ADDR_O_16 = P1^6;
  17          // sbit FL_ADDR_O_15 = P2^7;
  18          // sbit FL_ADDR_O_14 = P2^6;
  19          // sbit FL_ADDR_O_13 = P2^5;
  20          // sbit FL_ADDR_O_12 = P2^4;
  21          // sbit FL_ADDR_O_11 = P2^3;
  22          // sbit FL_ADDR_O_10 = P2^2;
  23          // sbit FL_ADDR_O_09 = P2^1;
  24          // sbit FL_ADDR_O_08 = P2^0;
  25          // sbit FL_ADDR_O_07 = P3^7;
  26          // sbit FL_ADDR_O_06 = P3^6;
  27          // sbit FL_ADDR_O_05 = P3^5;
  28          // sbit FL_ADDR_O_04 = P3^4;
  29          // sbit FL_ADDR_O_03 = P3^3;
  30          // sbit FL_ADDR_O_02 = P3^2;
  31          // sbit FL_ADDR_O_01 = P3^1;
  32          // sbit FL_ADDR_O_00 = P3^0;
  33          
  34          // //sbit FL_DATA_IO = P0;
C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 6   

  35          // sbit FL_DATA_IO_07 = P0^7;
  36          // sbit FL_DATA_IO_06 = P0^6;
  37          // sbit FL_DATA_IO_05 = P0^5;
  38          // sbit FL_DATA_IO_04 = P0^4;
  39          // sbit FL_DATA_IO_03 = P0^3;
  40          // sbit FL_DATA_IO_02 = P0^2;
  41          // sbit FL_DATA_IO_01 = P0^1;
  42          // sbit FL_DATA_IO_00 = P0^0;
  43          
  44          unsigned char Memory_ReadByte(unsigned int address){
  45   1              char dat_byte;
  46   1              unsigned char address_high_eeprom;
  47   1              unsigned char address_low_eeprom;
  48   1              bit acknowledge = 0;
  49   1      
  50   1              address_high_eeprom = address >> 8;
  51   1              address_low_eeprom = address & 0xFF;
  52   1              do{
  53   2                      I2C_start();
  54   2                      acknowledge = I2C_write(0xA0);
  55   2              }while(acknowledge);
  56   1      
  57   1              I2C_write(address_high_eeprom);
  58   1              I2C_write(address_low_eeprom);
  59   1              I2C_start();
  60   1              I2C_write(0xA1);
  61   1              dat_byte = I2C_read();
  62   1              I2C_stop();
  63   1              return dat_byte;
  64   1      }
  65          
  66          // unsigned char Memory_ReadByte_Ext(unsigned int address){
  67          //      unsigned char dat_byte = (char)0x00;
  68          //      int i;
  69          
  70          //      FL_DATA_IO_07 = 1;
  71          //      FL_DATA_IO_06 = 1;
  72          //      FL_DATA_IO_05 = 1;
  73          //      FL_DATA_IO_04 = 1;
  74          //      FL_DATA_IO_03 = 1;
  75          //      FL_DATA_IO_02 = 1;
  76          //      FL_DATA_IO_01 = 1;
  77          //      FL_DATA_IO_00 = 1;
  78          
  79          //      FL_ADDR_O_17 = (address >> 17) & 0x01;
  80          //      FL_ADDR_O_16 = (address >> 16) & 0x01;
  81          //      FL_ADDR_O_15 = (address >> 15) & 0x01;
  82          //      FL_ADDR_O_14 = (address >> 14) & 0x01;
  83          //      FL_ADDR_O_13 = (address >> 13) & 0x01;
  84          //      FL_ADDR_O_12 = (address >> 12) & 0x01;
  85          //      FL_ADDR_O_11 = (address >> 11) & 0x01;
  86          //      FL_ADDR_O_10 = (address >> 10) & 0x01;
  87          //      FL_ADDR_O_09 = (address >>  9) & 0x01;
  88          //      FL_ADDR_O_08 = (address >>  8) & 0x01;
  89          //      FL_ADDR_O_07 = (address >>  7) & 0x01;
  90          //      FL_ADDR_O_06 = (address >>  6) & 0x01;
  91          //      FL_ADDR_O_05 = (address >>  5) & 0x01;
  92          //      FL_ADDR_O_04 = (address >>  4) & 0x01;
  93          //      FL_ADDR_O_03 = (address >>  3) & 0x01;
  94          //      FL_ADDR_O_02 = (address >>  2) & 0x01;
  95          //      FL_ADDR_O_01 = (address >>  1) & 0x01;
  96          //      FL_ADDR_O_00 = (address) & 0x01;
C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 7   

  97          
  98          //      FL_WREN_O = 1;
  99          
 100          //      for(i=0; i<10000; i++);
 101          
 102          //      dat_byte |= (FL_DATA_IO_07 & 0x01);
 103          //      dat_byte = dat_byte << 1;
 104          //      dat_byte |= (FL_DATA_IO_06 & 0x01);
 105          //      dat_byte = dat_byte << 1;
 106          //      dat_byte |= (FL_DATA_IO_05 & 0x01);
 107          //      dat_byte = dat_byte << 1;
 108          //      dat_byte |= (FL_DATA_IO_04 & 0x01);
 109          //      dat_byte = dat_byte << 1;
 110          //      dat_byte |= (FL_DATA_IO_03 & 0x01);
 111          //      dat_byte = dat_byte << 1;
 112          //      dat_byte |= (FL_DATA_IO_02 & 0x01);
 113          //      dat_byte = dat_byte << 1;
 114          //      dat_byte |= (FL_DATA_IO_01 & 0x01);
 115          //      dat_byte = dat_byte << 1;
 116          //      dat_byte |= (FL_DATA_IO_00 & 0x01);
 117          
 118          //      for(i=0; i<10000; i++);
 119          
 120          //      FL_DATA_IO_07 = 1;
 121          //      FL_DATA_IO_06 = 1;
 122          //      FL_DATA_IO_05 = 1;
 123          //      FL_DATA_IO_04 = 1;
 124          //      FL_DATA_IO_03 = 1;
 125          //      FL_DATA_IO_02 = 1;
 126          //      FL_DATA_IO_01 = 1;
 127          //      FL_DATA_IO_00 = 1;
 128          
 129          //      return dat_byte;
 130          // }
 131          /*
 132          unsigned char Memory_ReadByte(unsigned int address){
 133                          EECR = 0x00;
 134                          EEARH = address >> 8;
 135                          EEARL = address & 0xFF;
 136                    EECR = 0x0C;
 137                  return (EEMISO);    
 138          }*/
 139          
 140          void Memory_WriteByte(unsigned int address, char data_to_send){
 141   1              //eeprom_ID_write = ((0xA0 +((address & 0xF0)>>7))+0);
 142   1              unsigned char address_high_eeprom;
 143   1              unsigned char address_low_eeprom;
 144   1              bit acknowledge = 0;
 145   1      
 146   1              address_high_eeprom = address >> 8;
 147   1              address_low_eeprom = address & 0xFF;
 148   1              do{
 149   2                      I2C_start();
 150   2                      acknowledge = I2C_write(0xA0); //command
 151   2              }while(acknowledge);
 152   1              I2C_write(address_high_eeprom); //address high
 153   1              I2C_write(address_low_eeprom);
 154   1              I2C_write(data_to_send);
 155   1              I2C_stop();
 156   1              I2C_delay();
 157   1      }
 158          
C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 8   

 159          // void Memory_WriteByte_Ext(unsigned int address, char data_to_send){
 160          //      int i;
 161          
 162          //      FL_ADDR_O_17 = (address >> 17) & 0x01;
 163          //      FL_ADDR_O_16 = (address >> 16) & 0x01;
 164          //      FL_ADDR_O_15 = (address >> 15) & 0x01;
 165          //      FL_ADDR_O_14 = (address >> 14) & 0x01;
 166          //      FL_ADDR_O_13 = (address >> 13) & 0x01;
 167          //      FL_ADDR_O_12 = (address >> 12) & 0x01;
 168          //      FL_ADDR_O_11 = (address >> 11) & 0x01;
 169          //      FL_ADDR_O_10 = (address >> 10) & 0x01;
 170          //      FL_ADDR_O_09 = (address >>  9) & 0x01;
 171          //      FL_ADDR_O_08 = (address >>  8) & 0x01;
 172          //      FL_ADDR_O_07 = (address >>  7) & 0x01;
 173          //      FL_ADDR_O_06 = (address >>  6) & 0x01;
 174          //      FL_ADDR_O_05 = (address >>  5) & 0x01;
 175          //      FL_ADDR_O_04 = (address >>  4) & 0x01;
 176          //      FL_ADDR_O_03 = (address >>  3) & 0x01;
 177          //      FL_ADDR_O_02 = (address >>  2) & 0x01;
 178          //      FL_ADDR_O_01 = (address >>  1) & 0x01;
 179          //      FL_ADDR_O_00 = (address) & 0x01;
 180          //      FL_WREN_O = 0;
 181          
 182          //      for(i=0; i<10000; i++);
 183          
 184          //      FL_DATA_IO_07 = (data_to_send >>  7) & 0x01;
 185          //      FL_DATA_IO_06 = (data_to_send >>  6) & 0x01;
 186          //      FL_DATA_IO_05 = (data_to_send >>  5) & 0x01;
 187          //      FL_DATA_IO_04 = (data_to_send >>  4) & 0x01;
 188          //      FL_DATA_IO_03 = (data_to_send >>  3) & 0x01;
 189          //      FL_DATA_IO_02 = (data_to_send >>  2) & 0x01;
 190          //      FL_DATA_IO_01 = (data_to_send >>  1) & 0x01;
 191          //      FL_DATA_IO_00 = (data_to_send) & 0x01;
 192          
 193          //      for(i=0; i<10000; i++);
 194          
 195          //      FL_WREN_O = 1;
 196                                  
 197          //      FL_DATA_IO_07 = 1;
 198          //      FL_DATA_IO_06 = 1;
 199          //      FL_DATA_IO_05 = 1;
 200          //      FL_DATA_IO_04 = 1;
 201          //      FL_DATA_IO_03 = 1;
 202          //      FL_DATA_IO_02 = 1;
 203          //      FL_DATA_IO_01 = 1;
 204          //      FL_DATA_IO_00 = 1;
 205          
 206          // }
 207          
 208          /*
 209          void Memory_WriteByte(unsigned int address, char data_to_send){
 210                          EECR = 0xFF;
 211                          EEARH = address >> 8;
 212                          EEARL = address & 0xFF;
 213                          EEMOSI = data_to_send;
 214                          EECR = 0x00;
 215          }*/
 216          
 217          int Memory_ReadBlock(unsigned int address, unsigned int read_size, unsigned char * databyte){
 218   1              unsigned int count;
 219   1              for( count=0; count < read_size; count++){
 220   2                *(databyte+count) = Memory_ReadByte(address+count);
C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 9   

 221   2              }
 222   1              return count;
 223   1      }
 224          
 225          int Memory_WriteBlock(unsigned int address, unsigned int write_size, unsigned char * databyte) {
 226   1              unsigned int count;
 227   1              for( count=0; count < write_size; count++){
 228   2                      Memory_WriteByte(address+count, *(databyte+count));
 229   2              }
 230   1              return count;
 231   1      }
C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _Memory_ReadByte (BEGIN)
                                           ; SOURCE LINE # 44
;---- Variable 'address' assigned to Register 'R4/R5' ----
0000 AD07              MOV     R5,AR7
0002 AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 48
0004 C200        R     CLR     acknowledge
                                           ; SOURCE LINE # 50
0006 EC                MOV     A,R4
0007 900000      R     MOV     DPTR,#address_high_eeprom
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
000B EF                MOV     A,R7
000C A3                INC     DPTR
000D F0                MOVX    @DPTR,A
000E         ?C0003:
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 53
000E 120000      E     LCALL   I2C_start
                                           ; SOURCE LINE # 54
0011 7FA0              MOV     R7,#0A0H
0013 120000      E     LCALL   _I2C_write
0016 9200        R     MOV     acknowledge,C
                                           ; SOURCE LINE # 55
0018 2000F3      R     JB      acknowledge,?C0003
                                           ; SOURCE LINE # 57
001B 900000      R     MOV     DPTR,#address_high_eeprom
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 120000      E     LCALL   _I2C_write
                                           ; SOURCE LINE # 58
0023 900000      R     MOV     DPTR,#address_low_eeprom
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 120000      E     LCALL   _I2C_write
                                           ; SOURCE LINE # 59
002B 120000      E     LCALL   I2C_start
                                           ; SOURCE LINE # 60
002E 7FA1              MOV     R7,#0A1H
0030 120000      E     LCALL   _I2C_write
                                           ; SOURCE LINE # 61
0033 120000      E     LCALL   I2C_read
0036 900000      R     MOV     DPTR,#dat_byte
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
003B 120000      E     LCALL   I2C_stop
                                           ; SOURCE LINE # 63
003E 900000      R     MOV     DPTR,#dat_byte
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
                                           ; SOURCE LINE # 64
0043         ?C0004:
0043 22                RET     
             ; FUNCTION _Memory_ReadByte (END)

             ; FUNCTION _Memory_WriteByte (BEGIN)
                                           ; SOURCE LINE # 140
0000 900000      R     MOV     DPTR,#data_to_send
C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 11  

0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
;---- Variable 'address' assigned to Register 'R2/R3' ----
0005 AB07              MOV     R3,AR7
0007 AA06              MOV     R2,AR6
                                           ; SOURCE LINE # 144
0009 C200        R     CLR     acknowledge
                                           ; SOURCE LINE # 146
000B EA                MOV     A,R2
000C A3                INC     DPTR
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
000E EF                MOV     A,R7
000F A3                INC     DPTR
0010 F0                MOVX    @DPTR,A
0011         ?C0007:
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 149
0011 120000      E     LCALL   I2C_start
                                           ; SOURCE LINE # 150
0014 7FA0              MOV     R7,#0A0H
0016 120000      E     LCALL   _I2C_write
0019 9200        R     MOV     acknowledge,C
                                           ; SOURCE LINE # 151
001B 2000F3      R     JB      acknowledge,?C0007
                                           ; SOURCE LINE # 152
001E 900000      R     MOV     DPTR,#address_high_eeprom
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      E     LCALL   _I2C_write
                                           ; SOURCE LINE # 153
0026 900000      R     MOV     DPTR,#address_low_eeprom
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 120000      E     LCALL   _I2C_write
                                           ; SOURCE LINE # 154
002E 900000      R     MOV     DPTR,#data_to_send
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 120000      E     LCALL   _I2C_write
                                           ; SOURCE LINE # 155
0036 120000      E     LCALL   I2C_stop
                                           ; SOURCE LINE # 156
0039 020000      E     LJMP    I2C_delay
             ; FUNCTION _Memory_WriteByte (END)

             ; FUNCTION _Memory_ReadBlock (BEGIN)
                                           ; SOURCE LINE # 217
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EC                MOV     A,R4
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EB                MOV     A,R3
C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 12  

0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 EA                MOV     A,R2
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 E9                MOV     A,R1
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
0017 E4                CLR     A
0018 A3                INC     DPTR
0019 F0                MOVX    @DPTR,A
001A A3                INC     DPTR
001B F0                MOVX    @DPTR,A
001C         ?C0009:
001C 900000      R     MOV     DPTR,#read_size
001F E0                MOVX    A,@DPTR
0020 FE                MOV     R6,A
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 900000      R     MOV     DPTR,#count
0027 E0                MOVX    A,@DPTR
0028 FC                MOV     R4,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FD                MOV     R5,A
002C C3                CLR     C
002D 9F                SUBB    A,R7
002E EC                MOV     A,R4
002F 9E                SUBB    A,R6
0030 5037              JNC     ?C0010
                                           ; SOURCE LINE # 220
0032 900000      R     MOV     DPTR,#address+01H
0035 E0                MOVX    A,@DPTR
0036 2D                ADD     A,R5
0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#address
003B E0                MOVX    A,@DPTR
003C 3C                ADDC    A,R4
003D FE                MOV     R6,A
003E 120000      R     LCALL   _Memory_ReadByte
0041 900000      R     MOV     DPTR,#databyte
0044 E0                MOVX    A,@DPTR
0045 FB                MOV     R3,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 FA                MOV     R2,A
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B F9                MOV     R1,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E FC                MOV     R4,A
004F A3                INC     DPTR
0050 E0                MOVX    A,@DPTR
0051 F582              MOV     DPL,A
0053 8C83              MOV     DPH,R4
0055 EF                MOV     A,R7
0056 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 221
0059 900000      R     MOV     DPTR,#count+01H
005C E0                MOVX    A,@DPTR
C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 13  

005D 04                INC     A
005E F0                MOVX    @DPTR,A
005F 70BB              JNZ     ?C0009
0061 900000      R     MOV     DPTR,#count
0064 E0                MOVX    A,@DPTR
0065 04                INC     A
0066 F0                MOVX    @DPTR,A
0067         ?C0017:
0067 80B3              SJMP    ?C0009
0069         ?C0010:
                                           ; SOURCE LINE # 222
0069 900000      R     MOV     DPTR,#count
006C E0                MOVX    A,@DPTR
006D FE                MOV     R6,A
006E A3                INC     DPTR
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
                                           ; SOURCE LINE # 223
0071         ?C0012:
0071 22                RET     
             ; FUNCTION _Memory_ReadBlock (END)

             ; FUNCTION _Memory_WriteBlock (BEGIN)
                                           ; SOURCE LINE # 225
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EC                MOV     A,R4
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EB                MOV     A,R3
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 EA                MOV     A,R2
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 E9                MOV     A,R1
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
0017 E4                CLR     A
0018 A3                INC     DPTR
0019 F0                MOVX    @DPTR,A
001A A3                INC     DPTR
001B F0                MOVX    @DPTR,A
001C         ?C0013:
001C 900000      R     MOV     DPTR,#write_size
001F E0                MOVX    A,@DPTR
0020 FE                MOV     R6,A
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 900000      R     MOV     DPTR,#count
0027 E0                MOVX    A,@DPTR
0028 FC                MOV     R4,A
0029 A3                INC     DPTR
C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 14  

002A E0                MOVX    A,@DPTR
002B FD                MOV     R5,A
002C C3                CLR     C
002D 9F                SUBB    A,R7
002E EC                MOV     A,R4
002F 9E                SUBB    A,R6
0030 5035              JNC     ?C0014
                                           ; SOURCE LINE # 228
0032 900000      R     MOV     DPTR,#address+01H
0035 E0                MOVX    A,@DPTR
0036 2D                ADD     A,R5
0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#address
003B E0                MOVX    A,@DPTR
003C 3C                ADDC    A,R4
003D FE                MOV     R6,A
003E 900000      R     MOV     DPTR,#databyte
0041 E0                MOVX    A,@DPTR
0042 FB                MOV     R3,A
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 FA                MOV     R2,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 F9                MOV     R1,A
0049 A3                INC     DPTR
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C F582              MOV     DPL,A
004E 8C83              MOV     DPH,R4
0050 120000      E     LCALL   ?C?CLDOPTR
0053 FD                MOV     R5,A
0054 120000      R     LCALL   _Memory_WriteByte
                                           ; SOURCE LINE # 229
0057 900000      R     MOV     DPTR,#count+01H
005A E0                MOVX    A,@DPTR
005B 04                INC     A
005C F0                MOVX    @DPTR,A
005D 70BD              JNZ     ?C0013
005F 900000      R     MOV     DPTR,#count
0062 E0                MOVX    A,@DPTR
0063 04                INC     A
0064 F0                MOVX    @DPTR,A
0065         ?C0018:
0065 80B5              SJMP    ?C0013
0067         ?C0014:
                                           ; SOURCE LINE # 230
0067 900000      R     MOV     DPTR,#count
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
                                           ; SOURCE LINE # 231
006F         ?C0016:
006F 22                RET     
             ; FUNCTION _Memory_WriteBlock (END)

C51 COMPILER V9.01   MEMORY                                                                02/22/2017 16:00:36 PAGE 15  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_Memory_WriteByte. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  address. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
  data_to_send . . . . . . . . . . . .  AUTO     XDATA  CHAR     0000H  1
  address_high_eeprom. . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  address_low_eeprom . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  acknowledge. . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
eeprom_ID_write. . . . . . . . . . . .  PUBLIC   XDATA  CHAR     0000H  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
LSB_address. . . . . . . . . . . . . .  PUBLIC   XDATA  CHAR     0001H  1
I2C_delay. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
I2C_read . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Memory_ReadBlock. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  address. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  read_size. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  databyte . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
  count. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
_I2C_write . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
I2C_start. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Memory_WriteBlock . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  address. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  write_size . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  databyte . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
  count. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
I2C_stop . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Memory_ReadByte . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  address. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  dat_byte . . . . . . . . . . . . . .  AUTO     XDATA  CHAR     0000H  1
  address_high_eeprom. . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  address_low_eeprom . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  acknowledge. . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
eeprom_ID_read . . . . . . . . . . . .  PUBLIC   XDATA  CHAR     0002H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    354    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
