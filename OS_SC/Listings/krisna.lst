C51 COMPILER V9.01   KRISNA                                                                02/22/2017 16:00:38 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE KRISNA
OBJECT MODULE PLACED IN .\Objects\krisna.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE krisna.c LARGE BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRINT(.\L
                    -istings\krisna.lst) PREPRINT(.\Listings\krisna.i) OBJECT(.\Objects\krisna.obj)

line level    source

   1          #include "krisna.h"
   1      =1  
   2      =1  #ifndef KRISNA_H
   3      =1  #define KRISNA_H
   4      =1  
   5      =1  #define addr_xi_ECC               0x00
   6      =1  #define addr_yi_ECC               0x1E
   7      =1  #define addr_xo_ECC               0xB2
   8      =1  #define addr_yo_ECC               0xD0
   9      =1  #define addr_k_ECC                0x3C
  10      =1  #define  addr_RNG                         0xEE
  11      =1  #define  addr_k_BC3       0x5A
  12      =1  #define addr_dati_BC3   0x62
  13      =1  #define addr_dati_HASH  0x6A
  14      =1  #define addr_dato_HASH  0x8A
  15      =1  #define addr_dato_BC3   0xAA
  16      =1  
  17      =1  sfr COPBC3              = 0xE8;
  18      =1  sfr COPSTATR    = 0xF8;
  19      =1  sfr COPMOSI     = 0xF9;
  20      =1  sfr COPMISO     = 0xFA;
  21      =1  sfr COPTH               = 0xFB;
  22      =1  sfr COPSRC              = 0xFC;
  23      =1  sfr COPDST              = 0xFD;
  24      =1  sfr COPCOM              = 0xFF;
  25      =1  
  26      =1  sbit s_Empty = 0xF8;
  27      =1  sbit s_Full = 0xF9;
  28      =1  sbit s_TR = 0xFA;
  29      =1  sbit s_ACK = 0xFB;
  30      =1  sbit s_SM = 0xFC;
  31      =1  sbit s_HASH = 0xFD;
  32      =1  sbit s_BC3 = 0xFE;
  33      =1  sbit s_ECC = 0xFF;
  34      =1  
  35      =1  sbit s_Done = 0xD8;
  36      =1  sbit s_6 = 0xD9;
  37      =1  sbit s_5 = 0xDA;
  38      =1  sbit s_4 = 0xDB;
  39      =1  sbit s_3 = 0xDC;
  40      =1  sbit s_2 = 0xDD;
  41      =1  sbit s_1 = 0xDE;
  42      =1  sbit s_0 = 0xDF;
  43      =1  
  44      =1  void coprocessor_init();
  45      =1  
  46      =1  
  47      =1  void copy_data_block_sequential(unsigned char source_address, unsigned char destination_address, unsigned 
             -int length);
  48      =1  
  49      =1  void copy_data_block_independent(unsigned char source_address, unsigned char destination_address, unsigned
             - int length);
  50      =1  
  51      =1  void write_data_independent(unsigned char destination_address, unsigned copdata);
C51 COMPILER V9.01   KRISNA                                                                02/22/2017 16:00:38 PAGE 2   

  52      =1  
  53      =1  
  54      =1  void write_data_sequential(unsigned char destination_address, unsigned copdata);
  55      =1  
  56      =1  void write_block_sequential(unsigned copdata);
  57      =1  
  58      =1          
  59      =1  unsigned read_data_sequential(unsigned char source_address);
  60      =1  
  61      =1  unsigned read_data_independent(unsigned char source_address);
  62      =1  
  63      =1  void copy_data_sequential(unsigned char source_address, unsigned char destination_address);
  64      =1  
  65      =1  void copy_data_independent(unsigned char source_address, unsigned char destination_address);
  66      =1  
  67      =1  void ECC_sequential();
  68      =1  
  69      =1  void ECC_independent();
  70      =1  
  71      =1  void HASH_sequential();
  72      =1  
  73      =1  void HASH_independent();
  74      =1  
  75      =1  void BC3_encrypt_k_sequential();
  76      =1  
  77      =1  void BC3_encrypt_k_independent();
  78      =1  
  79      =1  void BC3_encrypt_sequential();
  80      =1  
  81      =1  void BC3_encrypt_independent();
  82      =1  
  83      =1  void BC3_decrypt_k_independent();
  84      =1  
  85      =1  void BC3_decrypt_k_sequential();
  86      =1  
  87      =1  void BC3_decrypt_independent();
  88      =1  
  89      =1  void BC3_decrypt_sequential();
  90      =1  #endif
   2          
   3          
   4          void coprocessor_init(){
   5   1       COPMOSI        = 0xFF;
   6   1       COPMISO        = 0xFF;
   7   1       COPTH          = 0xFF;
   8   1       COPSRC         = 0xFF;
   9   1       COPDST         = 0xFF;
  10   1       COPSTATR = 0xFF;
  11   1       COPCOM         = 0xFF;
  12   1      }
  13          
  14          
  15          void copy_data_block_sequential(unsigned char source_address, unsigned char destination_address, unsigned 
             -int length){
  16   1              COPCOM = 0x84;
  17   1              COPSRC = source_address;
  18   1              COPDST = destination_address;
  19   1              COPTH = source_address+length-1;
  20   1              COPCOM = 0xFF;
  21   1      }
  22          
  23          void copy_data_block_independent(unsigned char source_address, unsigned char destination_address, unsigned
C51 COMPILER V9.01   KRISNA                                                                02/22/2017 16:00:38 PAGE 3   

             - int length){
  24   1              COPCOM = 0x04;
  25   1              COPSRC = source_address;
  26   1              COPDST = destination_address;
  27   1              COPTH = source_address+length-1;
  28   1              COPCOM = 0xFF;
  29   1      }
  30          
  31          void write_data_independent(unsigned char destination_address, unsigned copdata){
  32   1              COPCOM = 0x03;
  33   1              COPDST = destination_address;
  34   1              COPMOSI = copdata;
  35   1              COPCOM = 0xFF;
  36   1      }
  37          
  38          
  39          void write_data_sequential(unsigned char destination_address, unsigned copdata){
  40   1              COPCOM = 0x83;
  41   1              COPDST = destination_address;
  42   1              COPMOSI = copdata;
  43   1              COPCOM = 0xFF;
  44   1      }
  45          
  46          void write_block_sequential(unsigned copdata){
  47   1              COPCOM = 0x83;
  48   1              COPMOSI = copdata;
  49   1              COPCOM = 0xFF;
  50   1      }
  51          
  52                  
  53          unsigned read_data_sequential(unsigned char source_address){
  54   1              COPCOM = 0x82;
  55   1              COPSRC = source_address;
  56   1              COPCOM = 0xFF;
  57   1              while (!s_TR);
  58   1              COPCOM = 0x00;
  59   1              return COPMISO;
  60   1      }
  61          
  62          unsigned read_data_independent(unsigned char source_address){
  63   1              COPCOM = 0x02;
  64   1              COPSRC = source_address;
  65   1              COPCOM = 0xFF;  
  66   1              while (!s_TR);
  67   1              COPCOM = 0x00;
  68   1              return COPMISO;
  69   1      }
  70          
  71          void copy_data_sequential(unsigned char source_address, unsigned char destination_address){
  72   1              COPCOM = 0x81;
  73   1              COPSRC = source_address;
  74   1              COPDST = destination_address;
  75   1              COPCOM = 0xFF;
  76   1      }
  77          
  78          void copy_data_independent(unsigned char source_address, unsigned char destination_address){
  79   1              COPCOM = 0x01;
  80   1              COPSRC = source_address;
  81   1              COPDST = destination_address;
  82   1              COPCOM = 0xFF;
  83   1      }
  84          
C51 COMPILER V9.01   KRISNA                                                                02/22/2017 16:00:38 PAGE 4   

  85          void ECC_sequential(){
  86   1              COPCOM = 0x88;
  87   1              COPCOM = 0xFF;
  88   1      }
  89          
  90          void ECC_independent(){
  91   1              COPCOM = 0x08;
  92   1              COPCOM = 0xFF;
  93   1      }
  94          
  95          void HASH_sequential(){
  96   1              COPCOM = 0x85;
  97   1              COPCOM = 0xFF;
  98   1      }
  99          
 100          void HASH_independent(){
 101   1              COPCOM = 0x05;
 102   1              COPCOM = 0xFF;
 103   1      }
 104          
 105          void BC3_encrypt_k_sequential(){
 106   1              COPCOM = 0x86;
 107   1              COPCOM = 0xFF;
 108   1      }
 109          
 110          void BC3_encrypt_k_independent(){
 111   1              COPCOM = 0x06;
 112   1              COPCOM = 0xFF;
 113   1      }
 114          
 115          void BC3_encrypt_sequential(){
 116   1              COPCOM = 0x89;
 117   1              COPCOM = 0xFF;
 118   1      }
 119          
 120          void BC3_encrypt_independent(){
 121   1              COPCOM = 0x09;
 122   1              COPCOM = 0xFF;
 123   1      }
 124          
 125          void BC3_decrypt_k_independent(){
 126   1              COPCOM = 0x07;
 127   1              COPCOM = 0xFF;
 128   1      }
 129          
 130          void BC3_decrypt_k_sequential(){
 131   1              COPCOM = 0x87;
 132   1              COPCOM = 0xFF;
 133   1      }
 134          
 135          void BC3_decrypt_independent(){
 136   1              COPCOM = 0x0A;
 137   1              COPCOM = 0xFF;
 138   1      }
 139          
 140          void BC3_decrypt_sequential(){
 141   1              COPCOM = 0x8A;
 142   1              COPCOM = 0xFF;
 143   1      }
 144          
 145          
C51 COMPILER V9.01   KRISNA                                                                02/22/2017 16:00:38 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION coprocessor_init (BEGIN)
                                           ; SOURCE LINE # 4
                                           ; SOURCE LINE # 5
0000 75F9FF            MOV     COPMOSI,#0FFH
                                           ; SOURCE LINE # 6
0003 75FAFF            MOV     COPMISO,#0FFH
                                           ; SOURCE LINE # 7
0006 75FBFF            MOV     COPTH,#0FFH
                                           ; SOURCE LINE # 8
0009 75FCFF            MOV     COPSRC,#0FFH
                                           ; SOURCE LINE # 9
000C 75FDFF            MOV     COPDST,#0FFH
                                           ; SOURCE LINE # 10
000F 75F8FF            MOV     COPSTATR,#0FFH
                                           ; SOURCE LINE # 11
0012 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 12
0015 22                RET     
             ; FUNCTION coprocessor_init (END)

             ; FUNCTION _copy_data_block_sequential (BEGIN)
                                           ; SOURCE LINE # 15
;---- Variable 'source_address' assigned to Register 'R7' ----
;---- Variable 'length' assigned to Register 'R2/R3' ----
;---- Variable 'destination_address' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 16
0000 75FF84            MOV     COPCOM,#084H
                                           ; SOURCE LINE # 17
0003 8FFC              MOV     COPSRC,R7
                                           ; SOURCE LINE # 18
0005 AE05              MOV     R6,AR5
0007 8EFD              MOV     COPDST,R6
                                           ; SOURCE LINE # 19
0009 AD03              MOV     R5,AR3
000B ED                MOV     A,R5
000C 2F                ADD     A,R7
000D 14                DEC     A
000E F5FB              MOV     COPTH,A
                                           ; SOURCE LINE # 20
0010 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 21
0013 22                RET     
             ; FUNCTION _copy_data_block_sequential (END)

             ; FUNCTION _copy_data_block_independent (BEGIN)
                                           ; SOURCE LINE # 23
;---- Variable 'source_address' assigned to Register 'R7' ----
;---- Variable 'length' assigned to Register 'R2/R3' ----
;---- Variable 'destination_address' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 24
0000 75FF04            MOV     COPCOM,#04H
                                           ; SOURCE LINE # 25
0003 8FFC              MOV     COPSRC,R7
                                           ; SOURCE LINE # 26
0005 AE05              MOV     R6,AR5
0007 8EFD              MOV     COPDST,R6
                                           ; SOURCE LINE # 27
0009 AD03              MOV     R5,AR3
000B ED                MOV     A,R5
C51 COMPILER V9.01   KRISNA                                                                02/22/2017 16:00:38 PAGE 6   

000C 2F                ADD     A,R7
000D 14                DEC     A
000E F5FB              MOV     COPTH,A
                                           ; SOURCE LINE # 28
0010 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 29
0013 22                RET     
             ; FUNCTION _copy_data_block_independent (END)

             ; FUNCTION _write_data_independent (BEGIN)
                                           ; SOURCE LINE # 31
;---- Variable 'copdata' assigned to Register 'R4/R5' ----
;---- Variable 'destination_address' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 32
0000 75FF03            MOV     COPCOM,#03H
                                           ; SOURCE LINE # 33
0003 8FFD              MOV     COPDST,R7
                                           ; SOURCE LINE # 34
0005 AF05              MOV     R7,AR5
0007 8FF9              MOV     COPMOSI,R7
                                           ; SOURCE LINE # 35
0009 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 36
000C 22                RET     
             ; FUNCTION _write_data_independent (END)

             ; FUNCTION _write_data_sequential (BEGIN)
                                           ; SOURCE LINE # 39
;---- Variable 'copdata' assigned to Register 'R4/R5' ----
;---- Variable 'destination_address' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 40
0000 75FF83            MOV     COPCOM,#083H
                                           ; SOURCE LINE # 41
0003 8FFD              MOV     COPDST,R7
                                           ; SOURCE LINE # 42
0005 AF05              MOV     R7,AR5
0007 8FF9              MOV     COPMOSI,R7
                                           ; SOURCE LINE # 43
0009 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 44
000C 22                RET     
             ; FUNCTION _write_data_sequential (END)

             ; FUNCTION _write_block_sequential (BEGIN)
                                           ; SOURCE LINE # 46
;---- Variable 'copdata' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 47
0000 75FF83            MOV     COPCOM,#083H
                                           ; SOURCE LINE # 48
0003 8FF9              MOV     COPMOSI,R7
                                           ; SOURCE LINE # 49
0005 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 50
0008 22                RET     
             ; FUNCTION _write_block_sequential (END)

             ; FUNCTION _read_data_sequential (BEGIN)
                                           ; SOURCE LINE # 53
;---- Variable 'source_address' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 54
0000 75FF82            MOV     COPCOM,#082H
                                           ; SOURCE LINE # 55
C51 COMPILER V9.01   KRISNA                                                                02/22/2017 16:00:38 PAGE 7   

0003 8FFC              MOV     COPSRC,R7
                                           ; SOURCE LINE # 56
0005 75FFFF            MOV     COPCOM,#0FFH
0008         ?C0007:
                                           ; SOURCE LINE # 57
0008 30FAFD            JNB     s_TR,?C0007
000B         ?C0008:
                                           ; SOURCE LINE # 58
000B E4                CLR     A
000C F5FF              MOV     COPCOM,A
                                           ; SOURCE LINE # 59
000E AFFA              MOV     R7,COPMISO
0010 FE                MOV     R6,A
                                           ; SOURCE LINE # 60
0011         ?C0009:
0011 22                RET     
             ; FUNCTION _read_data_sequential (END)

             ; FUNCTION _read_data_independent (BEGIN)
                                           ; SOURCE LINE # 62
;---- Variable 'source_address' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 63
0000 75FF02            MOV     COPCOM,#02H
                                           ; SOURCE LINE # 64
0003 8FFC              MOV     COPSRC,R7
                                           ; SOURCE LINE # 65
0005 75FFFF            MOV     COPCOM,#0FFH
0008         ?C0010:
                                           ; SOURCE LINE # 66
0008 30FAFD            JNB     s_TR,?C0010
000B         ?C0011:
                                           ; SOURCE LINE # 67
000B E4                CLR     A
000C F5FF              MOV     COPCOM,A
                                           ; SOURCE LINE # 68
000E AFFA              MOV     R7,COPMISO
0010 FE                MOV     R6,A
                                           ; SOURCE LINE # 69
0011         ?C0012:
0011 22                RET     
             ; FUNCTION _read_data_independent (END)

             ; FUNCTION _copy_data_sequential (BEGIN)
                                           ; SOURCE LINE # 71
;---- Variable 'destination_address' assigned to Register 'R5' ----
;---- Variable 'source_address' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 72
0000 75FF81            MOV     COPCOM,#081H
                                           ; SOURCE LINE # 73
0003 8FFC              MOV     COPSRC,R7
                                           ; SOURCE LINE # 74
0005 AF05              MOV     R7,AR5
0007 8FFD              MOV     COPDST,R7
                                           ; SOURCE LINE # 75
0009 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 76
000C 22                RET     
             ; FUNCTION _copy_data_sequential (END)

             ; FUNCTION _copy_data_independent (BEGIN)
                                           ; SOURCE LINE # 78
;---- Variable 'destination_address' assigned to Register 'R5' ----
C51 COMPILER V9.01   KRISNA                                                                02/22/2017 16:00:38 PAGE 8   

;---- Variable 'source_address' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 79
0000 75FF01            MOV     COPCOM,#01H
                                           ; SOURCE LINE # 80
0003 8FFC              MOV     COPSRC,R7
                                           ; SOURCE LINE # 81
0005 AF05              MOV     R7,AR5
0007 8FFD              MOV     COPDST,R7
                                           ; SOURCE LINE # 82
0009 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 83
000C 22                RET     
             ; FUNCTION _copy_data_independent (END)

             ; FUNCTION ECC_sequential (BEGIN)
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
0000 75FF88            MOV     COPCOM,#088H
                                           ; SOURCE LINE # 87
0003 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 88
0006 22                RET     
             ; FUNCTION ECC_sequential (END)

             ; FUNCTION ECC_independent (BEGIN)
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
0000 75FF08            MOV     COPCOM,#08H
                                           ; SOURCE LINE # 92
0003 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 93
0006 22                RET     
             ; FUNCTION ECC_independent (END)

             ; FUNCTION HASH_sequential (BEGIN)
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
0000 75FF85            MOV     COPCOM,#085H
                                           ; SOURCE LINE # 97
0003 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 98
0006 22                RET     
             ; FUNCTION HASH_sequential (END)

             ; FUNCTION HASH_independent (BEGIN)
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
0000 75FF05            MOV     COPCOM,#05H
                                           ; SOURCE LINE # 102
0003 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 103
0006 22                RET     
             ; FUNCTION HASH_independent (END)

             ; FUNCTION BC3_encrypt_k_sequential (BEGIN)
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
0000 75FF86            MOV     COPCOM,#086H
                                           ; SOURCE LINE # 107
0003 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 108
0006 22                RET     
C51 COMPILER V9.01   KRISNA                                                                02/22/2017 16:00:38 PAGE 9   

             ; FUNCTION BC3_encrypt_k_sequential (END)

             ; FUNCTION BC3_encrypt_k_independent (BEGIN)
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
0000 75FF06            MOV     COPCOM,#06H
                                           ; SOURCE LINE # 112
0003 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 113
0006 22                RET     
             ; FUNCTION BC3_encrypt_k_independent (END)

             ; FUNCTION BC3_encrypt_sequential (BEGIN)
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
0000 75FF89            MOV     COPCOM,#089H
                                           ; SOURCE LINE # 117
0003 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 118
0006 22                RET     
             ; FUNCTION BC3_encrypt_sequential (END)

             ; FUNCTION BC3_encrypt_independent (BEGIN)
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
0000 75FF09            MOV     COPCOM,#09H
                                           ; SOURCE LINE # 122
0003 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 123
0006 22                RET     
             ; FUNCTION BC3_encrypt_independent (END)

             ; FUNCTION BC3_decrypt_k_independent (BEGIN)
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
0000 75FF07            MOV     COPCOM,#07H
                                           ; SOURCE LINE # 127
0003 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 128
0006 22                RET     
             ; FUNCTION BC3_decrypt_k_independent (END)

             ; FUNCTION BC3_decrypt_k_sequential (BEGIN)
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
0000 75FF87            MOV     COPCOM,#087H
                                           ; SOURCE LINE # 132
0003 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 133
0006 22                RET     
             ; FUNCTION BC3_decrypt_k_sequential (END)

             ; FUNCTION BC3_decrypt_independent (BEGIN)
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
0000 75FF0A            MOV     COPCOM,#0AH
                                           ; SOURCE LINE # 137
0003 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 138
0006 22                RET     
             ; FUNCTION BC3_decrypt_independent (END)

C51 COMPILER V9.01   KRISNA                                                                02/22/2017 16:00:38 PAGE 10  

             ; FUNCTION BC3_decrypt_sequential (BEGIN)
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
0000 75FF8A            MOV     COPCOM,#08AH
                                           ; SOURCE LINE # 142
0003 75FFFF            MOV     COPCOM,#0FFH
                                           ; SOURCE LINE # 143
0006 22                RET     
             ; FUNCTION BC3_decrypt_sequential (END)

C51 COMPILER V9.01   KRISNA                                                                02/22/2017 16:00:38 PAGE 11  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


COPTH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
BC3_decrypt_k_sequential . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
BC3_decrypt_independent. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
BC3_encrypt_k_sequential . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_read_data_independent . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  source_address . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
BC3_encrypt_independent. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
HASH_independent . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
COPMISO. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
COPMOSI. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
_copy_data_block_independent . . . . .  PUBLIC   CODE   PROC     0000H  -----
  source_address . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  destination_address. . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  length . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
_write_data_independent. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  destination_address. . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  copdata. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
_copy_data_independent . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  source_address . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  destination_address. . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
BC3_decrypt_sequential . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_read_data_sequential. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  source_address . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_write_block_sequential. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  copdata. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
ECC_independent. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
COPCOM . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
BC3_encrypt_sequential . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
HASH_sequential. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_copy_data_block_sequential. . . . . .  PUBLIC   CODE   PROC     0000H  -----
  source_address . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  destination_address. . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  length . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
COPSRC . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
_write_data_sequential . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  destination_address. . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  copdata. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
COPDST . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FDH  1
coprocessor_init . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
BC3_decrypt_k_independent. . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_copy_data_sequential. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  source_address . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  destination_address. . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
BC3_encrypt_k_independent. . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ECC_sequential . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
COPSTATR . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
s_TR . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FAH  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    243    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.01   KRISNA                                                                02/22/2017 16:00:38 PAGE 12  


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
