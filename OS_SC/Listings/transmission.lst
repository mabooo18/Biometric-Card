C51 COMPILER V9.01   TRANSMISSION                                                          02/22/2017 16:00:37 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE TRANSMISSION
OBJECT MODULE PLACED IN .\Objects\transmission.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE transmission.c LARGE BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRI
                    -NT(.\Listings\transmission.lst) PREPRINT(.\Listings\transmission.i) OBJECT(.\Objects\transmission.obj)

line level    source

   1          #include <reg51.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  REG51.H
   3      =1  
   4      =1  Header file for generic 80C51 and 80C31 microcontroller.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __REG51_H__
  10      =1  #define __REG51_H__
  11      =1  
  12      =1  /*  BYTE Register  */
  13      =1  sfr P0   = 0x80;
  14      =1  sfr P1   = 0x90;
  15      =1  sfr P2   = 0xA0;
  16      =1  sfr P3   = 0xB0;
  17      =1  sfr PSW  = 0xD0;
  18      =1  sfr ACC  = 0xE0;
  19      =1  sfr B    = 0xF0;
  20      =1  sfr SP   = 0x81;
  21      =1  sfr DPL  = 0x82;
  22      =1  sfr DPH  = 0x83;
  23      =1  sfr PCON = 0x87;
  24      =1  sfr TCON = 0x88;
  25      =1  sfr TMOD = 0x89;
  26      =1  sfr TL0  = 0x8A;
  27      =1  sfr TL1  = 0x8B;
  28      =1  sfr TH0  = 0x8C;
  29      =1  sfr TH1  = 0x8D;
  30      =1  sfr IE   = 0xA8;
  31      =1  sfr IP   = 0xB8;
  32      =1  sfr SCON = 0x98;
  33      =1  sfr SBUF = 0x99;
  34      =1  
  35      =1  
  36      =1  /*  BIT Register  */
  37      =1  /*  PSW   */
  38      =1  sbit CY   = 0xD7;
  39      =1  sbit AC   = 0xD6;
  40      =1  sbit F0   = 0xD5;
  41      =1  sbit RS1  = 0xD4;
  42      =1  sbit RS0  = 0xD3;
  43      =1  sbit OV   = 0xD2;
  44      =1  sbit P    = 0xD0;
  45      =1  
  46      =1  /*  TCON  */
  47      =1  sbit TF1  = 0x8F;
  48      =1  sbit TR1  = 0x8E;
  49      =1  sbit TF0  = 0x8D;
  50      =1  sbit TR0  = 0x8C;
  51      =1  sbit IE1  = 0x8B;
  52      =1  sbit IT1  = 0x8A;
  53      =1  sbit IE0  = 0x89;
C51 COMPILER V9.01   TRANSMISSION                                                          02/22/2017 16:00:37 PAGE 2   

  54      =1  sbit IT0  = 0x88;
  55      =1  
  56      =1  /*  IE   */
  57      =1  sbit EA   = 0xAF;
  58      =1  sbit ES   = 0xAC;
  59      =1  sbit ET1  = 0xAB;
  60      =1  sbit EX1  = 0xAA;
  61      =1  sbit ET0  = 0xA9;
  62      =1  sbit EX0  = 0xA8;
  63      =1  
  64      =1  /*  IP   */ 
  65      =1  sbit PS   = 0xBC;
  66      =1  sbit PT1  = 0xBB;
  67      =1  sbit PX1  = 0xBA;
  68      =1  sbit PT0  = 0xB9;
  69      =1  sbit PX0  = 0xB8;
  70      =1  
  71      =1  /*  P3  */
  72      =1  sbit RD   = 0xB7;
  73      =1  sbit WR   = 0xB6;
  74      =1  sbit T1   = 0xB5;
  75      =1  sbit T0   = 0xB4;
  76      =1  sbit INT1 = 0xB3;
  77      =1  sbit INT0 = 0xB2;
  78      =1  sbit TXD  = 0xB1;
  79      =1  sbit RXD  = 0xB0;
  80      =1  
  81      =1  /*  SCON  */
  82      =1  sbit SM0  = 0x9F;
  83      =1  sbit SM1  = 0x9E;
  84      =1  sbit SM2  = 0x9D;
  85      =1  sbit REN  = 0x9C;
  86      =1  sbit TB8  = 0x9B;
  87      =1  sbit RB8  = 0x9A;
  88      =1  sbit TI   = 0x99;
  89      =1  sbit RI   = 0x98;
  90      =1  
  91      =1  #endif
   2          #include "transmission.h"
   1      =1  #ifndef TRANSMISSION_HEADER_FILE
   2      =1  #define TRANSMISSION_HEADER_FILE 1
   3      =1  
   4      =1  extern unsigned char header[5];
   5      =1  extern unsigned int sw;
   6      =1  
   7      =1  void send_ATR();
   8      =1  void send_ATR_direct();
   9      =1  void Transmission_GetHeader(); 
  10      =1  void Transmission_SendSW();
  11      =1  void Transmission_SendDebug();
  12      =1  char Transmission_GetByte ();
  13      =1  void Transmission_SendByte (char c);
  14      =1  
  15      =1  
  16      =1  #endif
   3          
   4          sbit SCOUT = P1^2;
   5          
   6          unsigned char header[5];
   7          
   8          // void send_ATR(void){ //verified
   9          //      unsigned char len;
C51 COMPILER V9.01   TRANSMISSION                                                          02/22/2017 16:00:37 PAGE 3   

  10          //      unsigned int len_address;
  11          //      unsigned char i;
  12          //      unsigned char atr;
  13          //      unsigned int ATR_ADDR;
  14          //      ATR_ADDR = 1;
  15          //      len_address = 1;
  16          //      len = Memory_ReadByte(len_address); //0x0f
  17          //      for( i=1; i<(len+1); i++ ) {
  18          //     atr = Memory_ReadByte( ATR_ADDR+i );
  19          //              Transmission_SendByte( atr );
  20          //   }
  21          // }
  22          
  23          void send_ATR_direct(){
  24   1              Transmission_SendByte(0x3B);    
  25   1              Transmission_SendByte(0xAA);    
  26   1              Transmission_SendByte(0x00);    
  27   1              Transmission_SendByte(0x40);    
  28   1              Transmission_SendByte(0x0A);    
  29   1              Transmission_SendByte(0x50);    
  30   1              Transmission_SendByte(0x69);    
  31   1              Transmission_SendByte(0x6E);    
  32   1              Transmission_SendByte(0x74);    
  33   1              Transmission_SendByte(0x61);    
  34   1              Transmission_SendByte(0x72);    
  35   1              Transmission_SendByte(0xEE);    
  36   1              Transmission_SendByte(0xDD);    
  37   1              Transmission_SendByte(0xCC);    
  38   1              Transmission_SendByte(0xBB);    
  39   1              Transmission_SendByte(0xAA);    
  40   1      }
  41          
  42          char Transmission_GetByte ()  {
  43   1              char c;
  44   1              while (!TI);
  45   1              SCOUT = 0;
  46   1              while (!RI);
  47   1              c = SBUF;
  48   1              RI = 0;
  49   1              SCOUT = 1;
  50   1              return (c);
  51   1      }
  52          
  53          bit get_parity (unsigned char uc)  {
  54   1              ACC = uc;
  55   1              return (P);
  56   1      }
  57          
  58          void guard_time(void){
  59   1              unsigned char i;
  60   1              for(i=0; i<5; i++); 
  61   1      }
  62          
  63          void Transmission_SendByte (char c)  {
  64   1              while (!TI);
  65   1              TB8 = get_parity(c);
  66   1              SCOUT = 1;
  67   1              SBUF = c;
  68   1              TI = 0;
  69   1      }
  70          
  71          void Transmission_GetHeader(){
C51 COMPILER V9.01   TRANSMISSION                                                          02/22/2017 16:00:37 PAGE 4   

  72   1              int i;
  73   1              for (i = 0; i < 5; i++){
  74   2                      header[i] = Transmission_GetByte();
  75   2              }       
  76   1      }
  77          
  78          void Transmission_SendSW(){
  79   1              Transmission_SendByte((unsigned char)((sw>>8) & 0xFF));
  80   1              Transmission_SendByte( (unsigned char)(sw & 0xFF) );
  81   1      }
  82          /*
  83          void Transmission_SendDebug(){
  84                  int i;
  85                  for (i = 0; i < n_Debug; n_Debug++){
  86                  Transmission_SendByte(data_Debug[i]);
  87                  }
  88          }*/
C51 COMPILER V9.01   TRANSMISSION                                                          02/22/2017 16:00:37 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION send_ATR_direct (BEGIN)
                                           ; SOURCE LINE # 23
                                           ; SOURCE LINE # 24
0000 7F3B              MOV     R7,#03BH
0002 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 25
0005 7FAA              MOV     R7,#0AAH
0007 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 26
000A E4                CLR     A
000B FF                MOV     R7,A
000C 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 27
000F 7F40              MOV     R7,#040H
0011 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 28
0014 7F0A              MOV     R7,#0AH
0016 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 29
0019 7F50              MOV     R7,#050H
001B 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 30
001E 7F69              MOV     R7,#069H
0020 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 31
0023 7F6E              MOV     R7,#06EH
0025 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 32
0028 7F74              MOV     R7,#074H
002A 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 33
002D 7F61              MOV     R7,#061H
002F 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 34
0032 7F72              MOV     R7,#072H
0034 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 35
0037 7FEE              MOV     R7,#0EEH
0039 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 36
003C 7FDD              MOV     R7,#0DDH
003E 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 37
0041 7FCC              MOV     R7,#0CCH
0043 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 38
0046 7FBB              MOV     R7,#0BBH
0048 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 39
004B 7FAA              MOV     R7,#0AAH
004D 020000      R     LJMP    _Transmission_SendByte
             ; FUNCTION send_ATR_direct (END)

             ; FUNCTION Transmission_GetByte (BEGIN)
                                           ; SOURCE LINE # 42
0000         ?C0002:
                                           ; SOURCE LINE # 44
0000 3099FD            JNB     TI,?C0002
0003         ?C0003:
C51 COMPILER V9.01   TRANSMISSION                                                          02/22/2017 16:00:37 PAGE 6   

                                           ; SOURCE LINE # 45
0003 C292              CLR     SCOUT
0005         ?C0004:
                                           ; SOURCE LINE # 46
0005 3098FD            JNB     RI,?C0004
0008         ?C0005:
                                           ; SOURCE LINE # 47
;---- Variable 'c' assigned to Register 'R7' ----
0008 AF99              MOV     R7,SBUF
                                           ; SOURCE LINE # 48
000A C298              CLR     RI
                                           ; SOURCE LINE # 49
000C D292              SETB    SCOUT
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
000E         ?C0006:
000E 22                RET     
             ; FUNCTION Transmission_GetByte (END)

             ; FUNCTION _get_parity (BEGIN)
                                           ; SOURCE LINE # 53
;---- Variable 'uc' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 54
0000 EF                MOV     A,R7
                                           ; SOURCE LINE # 55
0001 A2D0              MOV     C,P
                                           ; SOURCE LINE # 56
0003         ?C0007:
0003 22                RET     
             ; FUNCTION _get_parity (END)

             ; FUNCTION guard_time (BEGIN)
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 60
;---- Variable 'i' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002         ?C0008:
0002 0F                INC     R7
0003 EF                MOV     A,R7
0004 B405FB            CJNE    A,#05H,?C0008
                                           ; SOURCE LINE # 61
0007         ?C0011:
0007 22                RET     
             ; FUNCTION guard_time (END)

             ; FUNCTION _Transmission_SendByte (BEGIN)
                                           ; SOURCE LINE # 63
;---- Variable 'c' assigned to Register 'R6' ----
0000 AE07              MOV     R6,AR7
0002         ?C0012:
                                           ; SOURCE LINE # 64
0002 3099FD            JNB     TI,?C0012
0005         ?C0013:
                                           ; SOURCE LINE # 65
0005 AF06              MOV     R7,AR6
0007 120000      R     LCALL   _get_parity
000A 929B              MOV     TB8,C
                                           ; SOURCE LINE # 66
000C D292              SETB    SCOUT
                                           ; SOURCE LINE # 67
000E 8F99              MOV     SBUF,R7
C51 COMPILER V9.01   TRANSMISSION                                                          02/22/2017 16:00:37 PAGE 7   

                                           ; SOURCE LINE # 68
0010 C299              CLR     TI
                                           ; SOURCE LINE # 69
0012 22                RET     
             ; FUNCTION _Transmission_SendByte (END)

             ; FUNCTION Transmission_GetHeader (BEGIN)
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 73
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
0003         ?C0015:
                                           ; SOURCE LINE # 74
0003 120000      R     LCALL   Transmission_GetByte
0006 7400        R     MOV     A,#LOW header
0008 2D                ADD     A,R5
0009 F582              MOV     DPL,A
000B 7400        R     MOV     A,#HIGH header
000D 3C                ADDC    A,R4
000E F583              MOV     DPH,A
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
0012 0D                INC     R5
0013 BD0001            CJNE    R5,#00H,?C0020
0016 0C                INC     R4
0017         ?C0020:
0017 ED                MOV     A,R5
0018 6405              XRL     A,#05H
001A 4C                ORL     A,R4
001B 70E6              JNZ     ?C0015
                                           ; SOURCE LINE # 76
001D         ?C0018:
001D 22                RET     
             ; FUNCTION Transmission_GetHeader (END)

             ; FUNCTION Transmission_SendSW (BEGIN)
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
0000 900000      E     MOV     DPTR,#sw
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 120000      R     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 80
0008 A3                INC     DPTR
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B 020000      R     LJMP    _Transmission_SendByte
             ; FUNCTION Transmission_SendSW (END)

C51 COMPILER V9.01   TRANSMISSION                                                          02/22/2017 16:00:37 PAGE 8   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
SCOUT. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
_Transmission_SendByte . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  c. . . . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0006H  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
guard_time . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Transmission_SendSW. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Transmission_GetByte . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  c. . . . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0007H  1
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
_get_parity. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  uc . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
send_ATR_direct. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Transmission_GetHeader . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0004H  2
sw . . . . . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
header . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0000H  5


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    170    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
