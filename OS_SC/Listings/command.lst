C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE COMMAND
OBJECT MODULE PLACED IN .\Objects\command.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE command.c LARGE BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRINT(.\
                    -Listings\command.lst) PREPRINT(.\Listings\command.i) OBJECT(.\Objects\command.obj)

line level    source

   1          #include <reg51.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  REG51.H
   3      =1  
   4      =1  Header file for generic 80C51 and 80C31 microcontroller.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __REG51_H__
  10      =1  #define __REG51_H__
  11      =1  
  12      =1  /*  BYTE Register  */
  13      =1  sfr P0   = 0x80;
  14      =1  sfr P1   = 0x90;
  15      =1  sfr P2   = 0xA0;
  16      =1  sfr P3   = 0xB0;
  17      =1  sfr PSW  = 0xD0;
  18      =1  sfr ACC  = 0xE0;
  19      =1  sfr B    = 0xF0;
  20      =1  sfr SP   = 0x81;
  21      =1  sfr DPL  = 0x82;
  22      =1  sfr DPH  = 0x83;
  23      =1  sfr PCON = 0x87;
  24      =1  sfr TCON = 0x88;
  25      =1  sfr TMOD = 0x89;
  26      =1  sfr TL0  = 0x8A;
  27      =1  sfr TL1  = 0x8B;
  28      =1  sfr TH0  = 0x8C;
  29      =1  sfr TH1  = 0x8D;
  30      =1  sfr IE   = 0xA8;
  31      =1  sfr IP   = 0xB8;
  32      =1  sfr SCON = 0x98;
  33      =1  sfr SBUF = 0x99;
  34      =1  
  35      =1  
  36      =1  /*  BIT Register  */
  37      =1  /*  PSW   */
  38      =1  sbit CY   = 0xD7;
  39      =1  sbit AC   = 0xD6;
  40      =1  sbit F0   = 0xD5;
  41      =1  sbit RS1  = 0xD4;
  42      =1  sbit RS0  = 0xD3;
  43      =1  sbit OV   = 0xD2;
  44      =1  sbit P    = 0xD0;
  45      =1  
  46      =1  /*  TCON  */
  47      =1  sbit TF1  = 0x8F;
  48      =1  sbit TR1  = 0x8E;
  49      =1  sbit TF0  = 0x8D;
  50      =1  sbit TR0  = 0x8C;
  51      =1  sbit IE1  = 0x8B;
  52      =1  sbit IT1  = 0x8A;
  53      =1  sbit IE0  = 0x89;
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 2   

  54      =1  sbit IT0  = 0x88;
  55      =1  
  56      =1  /*  IE   */
  57      =1  sbit EA   = 0xAF;
  58      =1  sbit ES   = 0xAC;
  59      =1  sbit ET1  = 0xAB;
  60      =1  sbit EX1  = 0xAA;
  61      =1  sbit ET0  = 0xA9;
  62      =1  sbit EX0  = 0xA8;
  63      =1  
  64      =1  /*  IP   */ 
  65      =1  sbit PS   = 0xBC;
  66      =1  sbit PT1  = 0xBB;
  67      =1  sbit PX1  = 0xBA;
  68      =1  sbit PT0  = 0xB9;
  69      =1  sbit PX0  = 0xB8;
  70      =1  
  71      =1  /*  P3  */
  72      =1  sbit RD   = 0xB7;
  73      =1  sbit WR   = 0xB6;
  74      =1  sbit T1   = 0xB5;
  75      =1  sbit T0   = 0xB4;
  76      =1  sbit INT1 = 0xB3;
  77      =1  sbit INT0 = 0xB2;
  78      =1  sbit TXD  = 0xB1;
  79      =1  sbit RXD  = 0xB0;
  80      =1  
  81      =1  /*  SCON  */
  82      =1  sbit SM0  = 0x9F;
  83      =1  sbit SM1  = 0x9E;
  84      =1  sbit SM2  = 0x9D;
  85      =1  sbit REN  = 0x9C;
  86      =1  sbit TB8  = 0x9B;
  87      =1  sbit RB8  = 0x9A;
  88      =1  sbit TI   = 0x99;
  89      =1  sbit RI   = 0x98;
  90      =1  
  91      =1  #endif
   2          #include <string.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  STRING.H
   3      =1  
   4      =1  String functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __STRING_H__
  10      =1  #define __STRING_H__
  11      =1  
  12      =1  #ifndef _SIZE_T
  13      =1   #define _SIZE_T
  14      =1   typedef unsigned int size_t;
  15      =1  #endif
  16      =1  
  17      =1  #ifndef NULL
  18      =1   #define NULL ((void *) 0L)
  19      =1  #endif
  20      =1  
  21      =1  #pragma SAVE
  22      =1  #pragma REGPARMS
  23      =1  extern char *strcat (char *s1, char *s2);
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 3   

  24      =1  extern char *strncat (char *s1, char *s2, int n);
  25      =1  
  26      =1  extern char strcmp (char *s1, char *s2);
  27      =1  extern char strncmp (char *s1, char *s2, int n);
  28      =1  
  29      =1  extern char *strcpy (char *s1, char *s2);
  30      =1  extern char *strncpy (char *s1, char *s2, int n);
  31      =1  
  32      =1  extern int strlen (char *);
  33      =1  
  34      =1  extern char *strchr (const char *s, char c);
  35      =1  extern int strpos (const char *s, char c);
  36      =1  extern char *strrchr (const char *s, char c);
  37      =1  extern int strrpos (const char *s, char c);
  38      =1  
  39      =1  extern int strspn (char *s, char *set);
  40      =1  extern int strcspn (char *s, char *set);
  41      =1  extern char *strpbrk (char *s, char *set);
  42      =1  extern char *strrpbrk (char *s, char *set);
  43      =1  extern char *strstr  (char *s, char *sub);
  44      =1  extern char *strtok  (char *str, const char *set);
  45      =1  
  46      =1  extern char memcmp (void *s1, void *s2, int n);
  47      =1  extern void *memcpy (void *s1, void *s2, int n);
  48      =1  extern void *memchr (void *s, char val, int n);
  49      =1  extern void *memccpy (void *s1, void *s2, char val, int n);
  50      =1  extern void *memmove (void *s1, void *s2, int n);
  51      =1  extern void *memset  (void *s, char val, int n);
  52      =1  #pragma RESTORE
  53      =1  
  54      =1  #endif
   3          #include "config.h"
   1      =1  #define CONFIG_FS_SIZE                  512
   2      =1  #define CONFIG_FS_START                 272
   3      =1  #define CONFIG_FS_BLOCK_SIZE            2
   4      =1  #define CONFIG_FS_FILE_TABLE_SIZE       128
   5      =1  
   6      =1  #define MAX_BUFFER_SIZE 32
   7      =1  
   8      =1  #define ATR_LEN_ADDR    0x0001
   9      =1  #define ATR_ADDR        0x0002
  10      =1  #define ATR_MAXLEN      24
  11      =1  
  12      =1  #define PIN_ADDR                ATR_ADDR+ATR_MAXLEN //2+24=26
  13      =1  #define PIN_LEN                 4
  14      =1  #define PIN_RETRIES_ADDR        PIN_ADDR+PIN_LEN //30
  15      =1  #define PIN_RETRIES_LEN         1
  16      =1  
  17      =1  #define PIN_MAX_RETRIES         3
  18      =1  
  19      =1  #define SERNUM_ADDR             PIN_RETRIES_ADDR + PIN_RETRIES_LEN //31
  20      =1  #define SERNUM_LEN              8
  21      =1  
  22      =1  #define RAND_STATE_ADDR         (SERNUM_ADDR + SERNUM_LEN) //39 27x
  23      =1  #define RAND_STATE_LEN          32
  24      =1  
  25      =1  #define EXT_AUTH_KEY_ADDR       (RAND_STATE_ADDR + RAND_STATE_LEN) //71
  26      =1  #define EXT_AUTH_KEY_LEN        16
  27      =1  
  28      =1  #define EXT_AUTH_RETRIES_ADDR   (EXT_AUTH_KEY_ADDR + EXT_AUTH_KEY_LEN) //87 x57
  29      =1  #define EXT_AUTH_RETRIES_LEN    1
  30      =1  
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 4   

  31      =1  #define EXT_AUTH_MAX_RETRIES         3
  32      =1  
  33      =1  #define KEY_ECC_ADDR_SC (EXT_AUTH_RETRIES_ADDR+EXT_AUTH_RETRIES_LEN) //88
  34      =1  #define KEY_ECC_SZ 60
  35      =1  
  36      =1  #define KEY_ECC_ADDR_RD (KEY_ECC_ADDR_SC+KEY_ECC_SZ) //148
  37      =1  
  38      =1  
  39      =1  #define PIN_HASH_ADDR (KEY_ECC_ADDR_RD+KEY_ECC_SZ) //208 //D0
  40      =1  #define PIN_HASH_LEN 32
  41      =1  
   4          #include "command.h"
   1      =1  #ifndef COMMAND_H
   2      =1  
   3      =1  #define COMMAND_H
   4      =1  
   5      =1  /* Command for CRYPTOPROCESSOR */
   6      =1  //#define DEBUG_ECDH        0x65
   7      =1  
   8      =1  /* Command for Debug */
   9      =1  #define DEBUG_WRITE        0x02
  10      =1  #define DEBUG_READ         0x04
  11      =1  #define DEBUG_GETCURRENT   0x22
  12      =1  #define DEBUG_GETSECURITY  0x24
  13      =1  #define DEBUG_GETCHALLENGE 0x28
  14      =1  #define DEBUG_ENCRYPT      0x26
  15      =1  #define DEBUG_FORMAT       0x0a
  16      =1  #define Debug_SHM          0x06
  17      =1  
  18      =1  /* File Operation */
  19      =1  #define ISO_SELECT              0xA4      ///< ISO 7816-4 SELECT Instruction code
  20      =1  #define ISO_READ_BINARY         0xB0      ///< ISO 7816-4 READ BINARY Instruction code
  21      =1  #define ISO_UPDATE_BINARY       0xD6      ///< ISO 7816-4 UPDATE BINARY Instruction code
  22      =1  #define ISO_ERASEBINARY                 0x0E
  23      =1  #define ISO_WRITEBINARY                 0xD0
  24      =1  #define ISO_READRECORD                  0xB2      ///< ISO 7816-4 READ RECORD Instruction code
  25      =1  #define ISO_UPDATE_RECORD               0xDC      ///< ISO 7816-4 UPDATE RECORD Instruction code
  26      =1  #define ISO_APPEND_RECORD               0xE2      ///< ISO 7816-4 APPEND RECORD Instruction code
  27      =1  #define ISO_WRITERECORD                 0xD2
  28      =1  
  29      =1  /* File Management */
  30      =1  #define ISO_CREATE_FILE         0xE0    ///< ISO 7816-4 CREATE FILE Instruction code
  31      =1  #define ISO_DELETE_FILE         0xE4    ///< ISO 7816-4 DELETE FILE Instruction code
  32      =1  
  33      =1  /* Security */
  34      =1  #define ISO_VERIFY              0x20    ///< ISO 7816-4 VERIFY Instruction code
  35      =1  #define ISO_EXT_AUTH            0x82    ///< ISO 7816-4 EXTERNAL_AUTH Instruction code
  36      =1  #define ISO_INT_AUTH            0x88    ///< ISO 7816-4 INTERNAL_AUTH Instruction code
  37      =1  #define ISO_GET_CHALLENGE               0x84    //!< INS byte: Get Challenge
  38      =1  
  39      =1  /* Program Code Management */
  40      =1  #define ISO_LOAD                0xDC      ///< ISO 7816-4 LOAD Instruction code
  41      =1  #define ISO_INSTALL             0xDC      ///< ISO 7816-4 INSTALL Instruction code
  42      =1  #define ISO_DELETE              0xDC      ///< ISO 7816-4 DELETE Instruction code
  43      =1  
  44      =1  /* Data Transmission */
  45      =1  #define ISO_GET_RESPONSE        0xC0    ///< ISO 7816-4 GET RESPONSE Instruction code
  46      =1  
  47      =1  void Command_Write();
  48      =1  void Command_Read();
  49      =1  void Command_Format();
  50      =1  void Command_Encrypt();
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 5   

  51      =1  void Command_GetCurrentChallenge();
  52      =1  void Command_GetChallenge();
  53      =1  void Command_ReadSHM();
  54      =1  void Command_Interpreter();
  55      =1  
  56      =1  unsigned int fibo(unsigned int i);
  57      =1  #endif
   5          #include "response.h"
   1      =1  #ifndef RESPONSE_H
   2      =1  
   3      =1  #define RESPONSE_H
   4      =1  
   5      =1  typedef enum
   6      =1  {
   7      =1    Response_OK,
   8      =1    Response_Normal,
   9      =1          Response_Auth_Success,
  10      =1    Response_Warning_Unchanged,
  11      =1    Response_Warning_DataCorrupt,
  12      =1    Response_Warning_EndOfFile,
  13      =1    Response_Warning_FileDeactivated,
  14      =1    Response_Warning_Changed,
  15      =1    Response_Warning_FilledUp,
  16      =1    Response_Warning_Counter,
  17      =1    Response_Error_Unchanged,
  18      =1    Response_Error_Changed,
  19      =1    Response_WrongLength,
  20      =1    Response_NotSupported,
  21      =1    Response_NotSupported_LogicalChannel,
  22      =1    Response_NotSupported_SecureMessaging,
  23      =1    Response_NotSupported_LastCommandExpected,
  24      =1    Response_NotSupported_CommandChain,
  25      =1    Response_CmdNotAllowed,
  26      =1    Response_CmdNotAllowed_Incompatible_FS,
  27      =1    Response_CmdNotAllowed_SecurityStatus,
  28      =1    Response_CmdNotAllowed_AuthBlocked,
  29      =1    Response_CmdNotAllowed_RefDataNotUsable,
  30      =1    Response_CmdNotAllowed_ConditionNotSatisfied,
  31      =1    Response_CmdNotAllowed_NoCurrentEF,
  32      =1    Response_CmdNotAllowed_ExpectSecureMsg,
  33      =1    Response_CmdNotAllowed_IncorrectSecureMsg,
  34      =1    Response_WrongP1P2,
  35      =1    Response_WrongP1P2_IncorrectData,
  36      =1    Response_WrongP1P2_FuncNotSupported,
  37      =1    Response_WrongP1P2_FileNotFound,
  38      =1    Response_WrongP1P2_RecordNotFound,
  39      =1    Response_WrongP1P2_NotEnoughMem,
  40      =1    Response_WrongP1P2_NCInconsistentTLV,
  41      =1    Response_WrongP1P2_IncorrectP1P2,
  42      =1    Response_WrongP1P2_NCInconsistentP1P2,
  43      =1    Response_WrongP1P2_RefDataNotFound,
  44      =1    Response_WrongP1P2_FileExist,
  45      =1    Response_WrongP1P2_DFNameExist,
  46      =1    Response_INSNotSupported,
  47      =1    Response_CLANotSupported,
  48      =1    Response_FatalError,
  49      =1  } rspn_type;
  50      =1  
  51      =1  
  52      =1  void Response_SetSW(unsigned char response, unsigned char extra);
  53      =1  #endif
   6          #include "transmission.h"
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 6   

   1      =1  #ifndef TRANSMISSION_HEADER_FILE
   2      =1  #define TRANSMISSION_HEADER_FILE 1
   3      =1  
   4      =1  extern unsigned char header[5];
   5      =1  extern unsigned int sw;
   6      =1  
   7      =1  void send_ATR();
   8      =1  void send_ATR_direct();
   9      =1  void Transmission_GetHeader(); 
  10      =1  void Transmission_SendSW();
  11      =1  void Transmission_SendDebug();
  12      =1  char Transmission_GetByte ();
  13      =1  void Transmission_SendByte (char c);
  14      =1  
  15      =1  
  16      =1  #endif
   7          #include "memory.h"
   1      =1  #ifndef __MEMORY_H__
   2      =1  #define __MEMORY_H__
   3      =1  
   4      =1  extern char eeprom_ID_write;
   5      =1  extern char eeprom_ID_read;
   6      =1  extern char LSB_address;
   7      =1  
   8      =1  unsigned char Memory_ReadByte(unsigned int address);
   9      =1  unsigned char Memory_ReadByte_Ext(unsigned int address);
  10      =1  void Memory_WriteByte_Ext(unsigned int address, char data_to_send);
  11      =1  void Memory_WriteByte(unsigned int address, char data_to_send);
  12      =1  int Memory_ReadBlock(unsigned int address, unsigned int read_size, unsigned char * databyte);
  13      =1  int Memory_WriteBlock(unsigned int address, unsigned int write_size, unsigned char * databyte);
  14      =1  #endif
   8          #include "fs.h"
   1      =1  
   2      =1  #ifndef FS_H
   3      =1  
   4      =1  #define FS_H
   5      =1  
   6      =1  // FS_RESPONSE TO COMMAND
   7      =1  #define FS_OK                                                   0
   8      =1  #define FS_ERROR                                                30
   9      =1  #define FS_ERROR_INSUFFICIENT_SPACE             31
  10      =1  #define FS_ERROR_NOT_FOUND                              32
  11      =1  #define FS_ERROR_DUPLICATE_FID                  33
  12      =1  #define FS_ERROR_SECURITY_STATUS                34
  13      =1  #define FS_ERROR_WRONG_FS_STRUCTURE             35
  14      =1  #define FS_NONE                                                 0XFF
  15      =1  
  16      =1  // FS_TAG ID
  17      =1  #define FS_TAG_MF                                               0x3F
  18      =1  #define FS_TAG_DF                                               0x4F
  19      =1  #define FS_TAG_EF                                               0x5F
  20      =1  
  21      =1  #define FS_EF_STRUCTURE_TRANSPARENT             0x01
  22      =1  #define FS_EF_STRUCTURE_RECORD_FIXED    0x02
  23      =1  #define FS_EF_STRUCTURE_RECORD_VAR              0x04
  24      =1  #define FS_EF_STRUCTURE_CYCLIC                  0x06
  25      =1  
  26      =1  #define FS_EF_TYPE_WORKING              0
  27      =1  #define FS_EF_TYPE_INTERNAL             1
  28      =1  
  29      =1  #define FS_OP_READ              0
  30      =1  #define FS_OP_UPDATE    1
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 7   

  31      =1  #define FS_OP_WRITE             2
  32      =1  
  33      =1  // OFFSET FILE
  34      =1  #define FS_START        CONFIG_FS_START //272
  35      =1  #define FS_BLOCK_SIZE   CONFIG_FS_BLOCK_SIZE //2
  36      =1  #define FS_SIZE         CONFIG_FS_SIZE //512
  37      =1  
  38      =1  // HEADER DEFINITION
  39      =1  #define FS_HEADER_TAG_SIZE                      1
  40      =1  #define FS_HEADER_FID_SIZE                      2
  41      =1  #define FS_HEADER_PARENT_SIZE           2
  42      =1  #define FS_HEADER_CHILD_SIZE            2
  43      =1  #define FS_HEADER_SIBLING_SIZE          2
  44      =1  #define FS_HEADER_BODY_POINTER_SIZE     2
  45      =1  
  46      =1  #define FS_HEADER_SIZE          FS_HEADER_TAG_SIZE + \
  47      =1                                                          FS_HEADER_FID_SIZE + \
  48      =1                                                          FS_HEADER_PARENT_SIZE + \
  49      =1                                                          FS_HEADER_CHILD_SIZE + \
  50      =1                                                          FS_HEADER_SIBLING_SIZE + \
  51      =1                                                          FS_HEADER_BODY_POINTER_SIZE
  52      =1  
  53      =1  
  54      =1  #define FS_HEADER_TAG_OFFSET                    0
  55      =1  #define FS_HEADER_FID_OFFSET                    FS_HEADER_TAG_OFFSET + FS_HEADER_TAG_SIZE
  56      =1  #define FS_HEADER_PARENT_OFFSET                 FS_HEADER_FID_OFFSET + FS_HEADER_FID_SIZE
  57      =1  #define FS_HEADER_CHILD_OFFSET                  FS_HEADER_PARENT_OFFSET + FS_HEADER_PARENT_SIZE
  58      =1  #define FS_HEADER_SIBLING_OFFSET                FS_HEADER_CHILD_OFFSET + FS_HEADER_CHILD_SIZE
  59      =1  #define FS_HEADER_BODY_POINTER_OFFSET   FS_HEADER_SIBLING_OFFSET + FS_HEADER_SIBLING_SIZE
  60      =1  
  61      =1  // BODY HEADER DEFINITION
  62      =1  #define FS_BODY_STRUCTURE_OFFSET        0
  63      =1  #define FS_BODY_STRUCTURE_SIZE          1
  64      =1  #define FS_BODY_TYPE_SIZE                       1
  65      =1  #define FS_BODY_AC_SIZE                         1
  66      =1  #define FS_BODY_SIZE_SIZE                       2
  67      =1  #define FS_BODY_RECORD_LENGTH_SIZE      1
  68      =1  
  69      =1  #define FS_BODY_TYPE_OFFSET             FS_BODY_STRUCTURE_OFFSET        + FS_BODY_STRUCTURE_SIZE
  70      =1  #define FS_BODY_AC_OFFSET               FS_BODY_TYPE_OFFSET             + FS_BODY_TYPE_SIZE
  71      =1  #define FS_BODY_SIZE_OFFSET     FS_BODY_AC_OFFSET                       + FS_BODY_AC_SIZE
  72      =1  #define FS_BODY_BODY_OFFSET             FS_BODY_SIZE_OFFSET             + FS_BODY_SIZE_SIZE
  73      =1  
  74      =1  #define FS_BODY_HEADER_SIZE             FS_BODY_STRUCTURE_SIZE + \
  75      =1                                                                  FS_BODY_TYPE_SIZE + \
  76      =1                                                                  FS_BODY_AC_SIZE + \
  77      =1                                                                  FS_BODY_SIZE_SIZE
  78      =1  
  79      =1  
  80      =1  #define FS_BLOCKS                                                               FS_SIZE/FS_BLOCK_SIZE //512/2 =256
  81      =1  #define FS_ALLOC_TABLE_SIZE                                             (FS_BLOCKS/8)/FS_BLOCK_SIZE //(256/8)/2 = 32
  82      =1  #define FS_FILE_TABLE_SIZE                                              CONFIG_FS_FILE_TABLE_SIZE/FS_BLOCK_SIZE // 128/2 = 64
  83      =1  
  84      =1  
  85      =1  #define FS_ALLOC_TABLE_OFFSET                                   0
  86      =1  #define FS_FILE_TABLE_OFFSET                                    FS_ALLOC_TABLE_OFFSET + FS_ALLOC_TABLE_SIZE //0+16 = 16 0x10
  87      =1  #define FS_FILE_BODY_OFFSET                                             FS_FILE_TABLE_OFFSET + FS_FILE_TABLE_SIZE // 16+64 = 80 = 0x50
  88      =1  
  89      =1  #define FS_ALLOC_HEADER(address)                                FSAlloc(CEIL((FS_HEADER_SIZE),FS_BLOCK_SIZE), FS_FILE_TABLE_OFFSET, FS
             -_FILE_BODY_OFFSET, address)
  90      =1  #define FS_ALLOC_BODY(address, length)                  FSAlloc(CEIL((FS_BODY_HEADER_SIZE + length),FS_BLOCK_SIZE), FS_FI
             -LE_BODY_OFFSET, FS_BLOCKS, address);
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 8   

  91      =1  
  92      =1  #define FS_SET_HEADER_TAG(block, src)                   Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADER_
             -TAG_OFFSET, FS_HEADER_TAG_SIZE, (unsigned char *)src)
  93      =1  #define FS_GET_HEADER_TAG(block, dest)                  Memory_ReadBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADER_
             -TAG_OFFSET, FS_HEADER_TAG_SIZE, (unsigned char *)dest)
  94      =1  #define FS_SET_HEADER_FID(block, src)                   Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADER_
             -FID_OFFSET, FS_HEADER_FID_SIZE, (unsigned char *)src)
  95      =1  #define FS_GET_HEADER_FID(block, dest)                  Memory_ReadBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADER_
             -FID_OFFSET, FS_HEADER_FID_SIZE, (unsigned char *)dest)
  96      =1  #define FS_GET_HEADER_PARENT(block, dest)               Memory_ReadBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADE
             -R_PARENT_OFFSET, FS_HEADER_PARENT_SIZE, (unsigned char *)dest)
  97      =1  #define FS_SET_HEADER_PARENT(block, src)                Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADE
             -R_PARENT_OFFSET, FS_HEADER_PARENT_SIZE, (unsigned char *)src)
  98      =1  #define FS_GET_HEADER_CHILD(block, dest)                Memory_ReadBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADER
             -_CHILD_OFFSET, FS_HEADER_CHILD_SIZE, (unsigned char *)dest)
  99      =1  #define FS_SET_HEADER_CHILD(block, src)                 Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEADER
             -_CHILD_OFFSET, FS_HEADER_CHILD_SIZE, (unsigned char *)src)
 100      =1  #define FS_GET_HEADER_SIBLING(block, dest)              Memory_ReadBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEAD
             -ER_SIBLING_OFFSET, FS_HEADER_SIBLING_SIZE, (unsigned char *)dest)
 101      =1  #define FS_SET_HEADER_SIBLING(block, src)               Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_HEAD
             -ER_SIBLING_OFFSET, FS_HEADER_SIBLING_SIZE, (unsigned char *)src)
 102      =1  #define FS_GET_HEADER_BODY_POINTER(block, dest) Memory_ReadBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_H
             -EADER_BODY_POINTER_OFFSET, FS_HEADER_BODY_POINTER_SIZE, (unsigned char *)dest)
 103      =1  #define FS_SET_HEADER_BODY_POINTER(block, src)  Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_
             -HEADER_BODY_POINTER_OFFSET, FS_HEADER_BODY_POINTER_SIZE, (unsigned char *)src)
 104      =1  
 105      =1  
 106      =1  #define FS_GET_BODY_STRUCTURE(block, dest)              Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) + FS_BOD
             -Y_STRUCTURE_OFFSET, FS_BODY_STRUCTURE_SIZE, (unsigned char *)dest)
 107      =1  #define FS_SET_BODY_STRUCTURE(block, src)               Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_BODY
             -_STRUCTURE_OFFSET, FS_BODY_STRUCTURE_SIZE, (unsigned char *)src)
 108      =1  #define FS_GET_BODY_TYPE(block, dest)                   Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_TY
             -PE_OFFSET, FS_BODY_TYPE_SIZE, (unsigned char *)dest)
 109      =1  #define FS_SET_BODY_TYPE(block, src)                    Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_TYP
             -E_OFFSET, FS_BODY_TYPE_SIZE, (unsigned char *)src)
 110      =1  #define FS_GET_BODY_AC(block, dest)                     Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_AC_O
             -FFSET, FS_BODY_AC_SIZE, (unsigned char *)dest)
 111      =1  #define FS_SET_BODY_AC(block, src)                              Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_AC_O
             -FFSET, FS_BODY_AC_SIZE, (unsigned char *)src)
 112      =1  #define FS_GET_BODY_ACUPDATE(block, dest)               Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) + FS_BODY
             -_ACUPDATE_OFFSET, FS_BODY_ACUPDATE_SIZE, (unsigned char *)dest)
 113      =1  #define FS_SET_BODY_ACUPDATE(block, src)                Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_
             -ACUPDATE_OFFSET, FS_BODY_ACUPDATE_SIZE, (unsigned char *)src)
 114      =1  #define FS_GET_BODY_SIZE(block, dest)                   Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_SI
             -ZE_OFFSET, FS_BODY_SIZE_SIZE, (unsigned char *)dest)
 115      =1  #define FS_SET_BODY_SIZE(block, src)                    Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_BODY_SIZ
             -E_OFFSET, FS_BODY_SIZE_SIZE, (unsigned char *)src)
 116      =1  #define FS_GET_BODY_BODY(block, length, dest)   Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) + FS_B
             -ODY_BODY_OFFSET + offset, length, (unsigned char *)dest)
 117      =1  #define FS_SET_BODY_BODY(block, length, src)    Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) + FS_BO
             -DY_BODY_OFFSET + offset, length, (unsigned char *)src)
 118      =1  
 119      =1  #define FS_GET_RECORD_FIXED_LENGTH(block, dest)                                         Memory_ReadBlock (FS_START + (block * FS_BLOCK_SIZE) 
             -+ FS_BODY_BODY_OFFSET, FS_BODY_RECORD_LENGTH_SIZE, (unsigned char *)dest)
 120      =1  #define FS_SET_RECORD_FIXED_LENGTH(block, src)                                          Memory_WriteBlock(FS_START + (block * FS_BLOCK_SIZE) 
             -+ FS_BODY_BODY_OFFSET, FS_BODY_RECORD_LENGTH_SIZE, (unsigned char *)src)
 121      =1  #define FS_GET_RECORD_FIXED_DATA(block, length, record_num, dest)       Memory_ReadBlock (FS_START + (block * F
             -S_BLOCK_SIZE) + FS_BODY_BODY_OFFSET + FS_BODY_RECORD_LENGTH_SIZE + (record_num-1)*length, length, (unsigned char *)dest)
 122      =1  #define FS_SET_RECORD_FIXED_DATA(block, length, record_num, src)        Memory_WriteBlock(FS_START + (block * FS
             -_BLOCK_SIZE) + FS_BODY_BODY_OFFSET + FS_BODY_RECORD_LENGTH_SIZE + (record_num-1)*length, length, (unsigned char *)src)
 123      =1  
 124      =1  #define FS_GET_RECORD_VAR_LENGTH(block, offset, dest)                           Memory_ReadBlock (FS_START + (block * FS_BLOCK_S
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 9   

             -IZE) + FS_BODY_BODY_OFFSET + offset, FS_BODY_RECORD_LENGTH_SIZE, (unsigned char *)dest)
 125      =1  #define FS_SET_RECORD_VAR_LENGTH(block, offset, src)                            Memory_WriteBlock(FS_START + (block * FS_BLOCK_SI
             -ZE) + FS_BODY_BODY_OFFSET + offset, FS_BODY_RECORD_LENGTH_SIZE, (unsigned char *)src)
 126      =1  
 127      =1  #define CEIL(A,B)       ((A%B)==0 ? (A/B) : (A/B + 1))
 128      =1  
 129      =1  
 130      =1  /*****************************/
 131      =1  /*        Enumeration        */
 132      =1  /*****************************/
 133      =1  
 134      =1  
 135      =1  /****************************/
 136      =1  /*      Data Structure      */
 137      =1  /****************************/
 138      =1  
 139      =1  struct EF_st
 140      =1  {
 141      =1          unsigned int    FID;            ///< File identifier
 142      =1          unsigned char   structure;      ///< file structure : Transparent or Record
 143      =1          unsigned char   type;           ///< type of file : Working or Internal
 144      =1          unsigned char   AC;                     ///< access control for read operation
 145      =1          unsigned char   *ptr_body;      ///< pointer to file body
 146      =1          unsigned int    file_size;      ///< size of file
 147      =1          unsigned char   record_le;      ///< record length
 148      =1  } ;
 149      =1  
 150      =1  struct DF_st
 151      =1  {
 152      =1          unsigned int    FID;                    ///< File identifier
 153      =1          char                    DFname[16];             ///< DF name 
 154      =1          char                    asc_flag;               ///< indication to application specific code
 155      =1          int                             (* asc)(int);           ///< pointer to the ASC handler
 156      =1  } ;
 157      =1  
 158      =1  /**************************/
 159      =1  /*        Variable        */
 160      =1  /**************************/
 161      =1  
 162      =1  
 163      =1  /**************************/
 164      =1  /*        Function        */
 165      =1  /**************************/
 166      =1  unsigned int FS_Init();
 167      =1  unsigned int FSAlloc(unsigned int size_alloc, unsigned int startBlock, unsigned int endBlock, unsigned int
             - * address);
 168      =1  int FSGetHeader(unsigned int block_addr, unsigned char offset, unsigned char * dest);
 169      =1  
 170      =1  unsigned char FS_CheckAC(unsigned int op);
 171      =1  
 172      =1  unsigned char FS_GetAC();
 173      =1  unsigned int FSFormat();
 174      =1  
 175      =1  unsigned int FS_SelectFID(unsigned int fid);
 176      =1  unsigned int FSSelectMF();
 177      =1  unsigned int FS_SearchAllFID(unsigned int fid);
 178      =1  
 179      =1  unsigned int FSAccessBinary(unsigned int op, unsigned int offset, unsigned int length, unsigned char *data
             -byte);
 180      =1  unsigned int FSCreateHeader(unsigned char tag, unsigned int fid, unsigned int * addr);
 181      =1  unsigned int FSCreateBodyEF(struct EF_st * desc, unsigned int * addr);
 182      =1  unsigned int FSCreateFile(unsigned int tag, void * desc);
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 10  

 183      =1  
 184      =1  unsigned int FSDeleteFile(unsigned int fid);
 185      =1  unsigned int FSFree(unsigned int address, unsigned int length);
 186      =1  unsigned int FS_CheckChildSibling_FID(unsigned int fid, unsigned int current);
 187      =1  #endif
   9          #include "state.h"
   1      =1  #ifndef STATE_H
   2      =1  #define STATE_H
   3      =1  
   4      =1  //! Length of key in octets.
   5      =1  #define CRYPT_KEY_LEN   16
   6      =1  //! Length of cipher block in octets.
   7      =1  #define CRYPT_BLOCK_LEN 8
   8      =1  //! Single block encryption function.
   9      =1  #define crypt_enc(v,k) BC3_enc((unsigned long int *)(v),(unsigned long int *)(k))
  10      =1  //! Single block decryption function.
  11      =1  #define crypt_dec(v,k) BC3_dec((unsigned long int *)(v),(unsigned long int *)(k))
  12      =1  
  13      =1  #define STATE_OK                0
  14      =1  #define STATE_ERROR             1
  15      =1  #define STATE_WRONG             2
  16      =1  #define STATE_BLOCKED           3
  17      =1  
  18      =1  #define KEY_SIZE               4
  19      =1  
  20      =1  /********************************/
  21      =1  /*        Data Structure        */
  22      =1  /********************************/
  23      =1  
  24      =1  struct state_struct
  25      =1  {
  26      =1    unsigned int        current;     ///< pointer to current DF header
  27      =1    unsigned int        currentKey;    ///< pointer to current Key EF header
  28      =1    unsigned int        currentRecord;  ///< Record number of currently selected EF
  29      =1    unsigned char         securityState;  ///< security state currently active
  30      =1    unsigned char         challenge[CRYPT_BLOCK_LEN];
  31      =1  };
  32      =1  
  33      =1  /**************************/
  34      =1  /*        Variable        */
  35      =1  /**************************/
  36      =1  
  37      =1  
  38      =1  /**************************/
  39      =1  /*        Function        */
  40      =1  /**************************/
  41      =1  
  42      =1  
  43      =1  int State_Init();
  44      =1  
  45      =1  int State_Verify();
  46      =1  
  47      =1  void State_GetChallenge();
  48      =1  
  49      =1  unsigned char State_VerifyAuth();
  50      =1  
  51      =1  int State_SetCurrent(unsigned int newfile);
  52      =1  
  53      =1  int State_SetCurrentRecord(unsigned int record_num);
  54      =1  
  55      =1  int State_SetCurrentKey(unsigned int newKey);
  56      =1  
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 11  

  57      =1  unsigned int State_GetCurrent();
  58      =1  
  59      =1  unsigned int State_GetCurrentRecord();
  60      =1  
  61      =1  unsigned char State_GetCurrentSecurity();
  62      =1  
  63      =1  void State_GetCurrentChallenge();
  64      =1  
  65      =1  #endif
  10          #include "krisna.h"
   1      =1  
   2      =1  #ifndef KRISNA_H
   3      =1  #define KRISNA_H
   4      =1  
   5      =1  #define addr_xi_ECC               0x00
   6      =1  #define addr_yi_ECC               0x1E
   7      =1  #define addr_xo_ECC               0xB2
   8      =1  #define addr_yo_ECC               0xD0
   9      =1  #define addr_k_ECC                0x3C
  10      =1  #define  addr_RNG                         0xEE
  11      =1  #define  addr_k_BC3       0x5A
  12      =1  #define addr_dati_BC3   0x62
  13      =1  #define addr_dati_HASH  0x6A
  14      =1  #define addr_dato_HASH  0x8A
  15      =1  #define addr_dato_BC3   0xAA
  16      =1  
  17      =1  sfr COPBC3              = 0xE8;
  18      =1  sfr COPSTATR    = 0xF8;
  19      =1  sfr COPMOSI     = 0xF9;
  20      =1  sfr COPMISO     = 0xFA;
  21      =1  sfr COPTH               = 0xFB;
  22      =1  sfr COPSRC              = 0xFC;
  23      =1  sfr COPDST              = 0xFD;
  24      =1  sfr COPCOM              = 0xFF;
  25      =1  
  26      =1  sbit s_Empty = 0xF8;
  27      =1  sbit s_Full = 0xF9;
  28      =1  sbit s_TR = 0xFA;
  29      =1  sbit s_ACK = 0xFB;
  30      =1  sbit s_SM = 0xFC;
  31      =1  sbit s_HASH = 0xFD;
  32      =1  sbit s_BC3 = 0xFE;
  33      =1  sbit s_ECC = 0xFF;
  34      =1  
  35      =1  sbit s_Done = 0xD8;
  36      =1  sbit s_6 = 0xD9;
  37      =1  sbit s_5 = 0xDA;
  38      =1  sbit s_4 = 0xDB;
  39      =1  sbit s_3 = 0xDC;
  40      =1  sbit s_2 = 0xDD;
  41      =1  sbit s_1 = 0xDE;
  42      =1  sbit s_0 = 0xDF;
  43      =1  
  44      =1  void coprocessor_init();
  45      =1  
  46      =1  
  47      =1  void copy_data_block_sequential(unsigned char source_address, unsigned char destination_address, unsigned 
             -int length);
  48      =1  
  49      =1  void copy_data_block_independent(unsigned char source_address, unsigned char destination_address, unsigned
             - int length);
  50      =1  
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 12  

  51      =1  void write_data_independent(unsigned char destination_address, unsigned copdata);
  52      =1  
  53      =1  
  54      =1  void write_data_sequential(unsigned char destination_address, unsigned copdata);
  55      =1  
  56      =1  void write_block_sequential(unsigned copdata);
  57      =1  
  58      =1          
  59      =1  unsigned read_data_sequential(unsigned char source_address);
  60      =1  
  61      =1  unsigned read_data_independent(unsigned char source_address);
  62      =1  
  63      =1  void copy_data_sequential(unsigned char source_address, unsigned char destination_address);
  64      =1  
  65      =1  void copy_data_independent(unsigned char source_address, unsigned char destination_address);
  66      =1  
  67      =1  void ECC_sequential();
  68      =1  
  69      =1  void ECC_independent();
  70      =1  
  71      =1  void HASH_sequential();
  72      =1  
  73      =1  void HASH_independent();
  74      =1  
  75      =1  void BC3_encrypt_k_sequential();
  76      =1  
  77      =1  void BC3_encrypt_k_independent();
  78      =1  
  79      =1  void BC3_encrypt_sequential();
  80      =1  
  81      =1  void BC3_encrypt_independent();
  82      =1  
  83      =1  void BC3_decrypt_k_independent();
  84      =1  
  85      =1  void BC3_decrypt_k_sequential();
  86      =1  
  87      =1  void BC3_decrypt_independent();
  88      =1  
  89      =1  void BC3_decrypt_sequential();
  90      =1  #endif
  11          
  12          #define ECC_ADDR        0x01B2
  13          #define BC3_ADDR                0x01AA
  14          #define SHA_ADDR                0x016A
  15          
  16          #define REC3_ADDR 0x0200
  17          #define REC4_ADDR 0x0210
  18          #define REC5_ADDR 0x0220
  19          #define KEY_AUTH 0x0240
  20          #define EXP_AUTH 0x0230
  21          
  22          
  23          unsigned char response[90];
  24          unsigned char resplen;
  25          unsigned char buffer[8];
  26          unsigned char pin[PIN_LEN];
  27          unsigned char encrypted[CRYPT_BLOCK_LEN];
  28          
  29          void Command_Write()//verified
  30          {
  31   1              unsigned int i; //variabel untuk iterasi penulisan data
  32   1              unsigned int length; //panjang data yang akan ditulis
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 13  

  33   1              unsigned char data_to_write;//data yang akan ditulis
  34   1              unsigned int address_EEPROM;//alamat data 
  35   1      
  36   1              address_EEPROM = (header[2]<<8)+header[3]; //alamat data diperoleh dari P1 dan P2
  37   1      
  38   1              length = (unsigned int) header[4];//panjang data yang akan ditulis diperoleh dari P3
  39   1      
  40   1              for( i=0; i<length; i++) //mengulang proses penulisan sebanyak length
  41   1              {
  42   2                      //ack
  43   2                      Transmission_SendByte( ~header[1] );
  44   2                      
  45   2                      //mendapatkan data yang akan ditulis
  46   2                      data_to_write = Transmission_GetByte();
  47   2                      //menulis data ke EEPROM
  48   2                      Memory_WriteByte( address_EEPROM+i, data_to_write );
  49   2              }
  50   1              
  51   1              //mengirimkan respons OK setelah selesai penulisan
  52   1              Response_SetSW( Response_OK, 0);
  53   1      }
  54          
  55          
  56          void Command_Read() // verified 8 April 2016
  57          {
  58   1      
  59   1              unsigned char i; // variabel untuk iterasi pembacaan data
  60   1              unsigned int length;//panjang data yang akan dibaca
  61   1              unsigned int address_EEPROM;//alamat data pertama yang akan dibaca
  62   1              unsigned char data_to_read;//data yang dibaca
  63   1      
  64   1              length = (unsigned int) header[4]; //panjang data diperoleh dari P3
  65   1              address_EEPROM = (header[2]<<8)+header[3];//
  66   1      
  67   1              /* ACK untuk mengirimkan banyak byte berturut-turut*/
  68   1              Transmission_SendByte( header[1] );
  69   1      
  70   1              for( i=0; i<length; i++ ) //mengulang proses pembacaan data sebanyak length
  71   1              {
  72   2                      data_to_read = Memory_ReadByte( address_EEPROM+i); //membaca data dari EEPROM
  73   2                      Transmission_SendByte( data_to_read );//mentransmisikan data yang dibaca
  74   2              }
  75   1                      
  76   1              //mengirimkan respons OK setelah selesai pengiriman seluruh data
  77   1              Response_SetSW( Response_OK , 0);
  78   1      
  79   1      }
  80          
  81          void Command_Tes() {
  82   1              unsigned int result;
  83   1      
  84   1              
  85   1      
  86   1              result = FS_SearchAllFID(((unsigned int)(header[2])<<8)+(unsigned int)header[3]);
  87   1      
  88   1              Transmission_SendByte( header[1] );
  89   1              Transmission_SendByte( (result>>8) );
  90   1              Transmission_SendByte( result );
  91   1      
  92   1              Response_SetSW( Response_OK, 0);
  93   1      
  94   1      }
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 14  

  95          
  96          void Command_ReadSHM(){
  97   1              unsigned char data_to_read;
  98   1              unsigned char address_SHM;
  99   1              Transmission_SendByte( ~header[1] );
 100   1              address_SHM = header[3];
 101   1              data_to_read = read_data_independent( address_SHM );
 102   1              Transmission_SendByte(data_to_read);
 103   1              Response_SetSW( Response_OK, 0);
 104   1      }
 105          
 106          
 107          
 108          // void Command_ReadSHM(){
 109          //      unsigned int current, body, size, record_num, offset;
 110          //      unsigned char record_le, i, record_current_addr, record_next_addr;
 111          //      unsigned char databyte;
 112          
 113          //      record_num = header[2];
 114          //      current = State_GetCurrent();
 115          
 116          //      FS_GET_HEADER_BODY_POINTER(current,&body);
 117          //      FS_GET_RECORD_FIXED_LENGTH(body, &record_le);
 118          //      FS_GET_BODY_SIZE(body, &size);
 119          
 120          //      FS_GET_RECORD_VAR_LENGTH(body, record_num-1, &record_current_addr);
 121          //      FS_GET_RECORD_VAR_LENGTH(body, record_num, &record_next_addr);
 122          //      record_le=record_next_addr-record_current_addr;
 123          //      offset=record_current_addr+size+1;
 124                  
 125          //      // Send ACK
 126          //      Transmission_SendByte( header[1] );
 127          //      for(i = 0; i<record_le;i++) {
 128          //              FSAccessBinary(FS_OP_READ,offset+i,1,&databyte);
 129          //              Transmission_SendByte(databyte);
 130          //      }
 131          //      Response_SetSW( Response_OK, 0);
 132          // }
 133          
 134          void Command_GetCurrent()//verified 9 April 2016
 135          {
 136   1              unsigned int current, body, length, record_num;
 137   1              unsigned char ac, structure, tag, record_current_addr, record_next_addr;
 138   1      
 139   1              record_num = State_GetCurrentRecord();
 140   1              current = State_GetCurrent();
 141   1              FS_GET_HEADER_BODY_POINTER(current,&body);
 142   1              FS_GET_HEADER_TAG(current,&tag);
 143   1              FS_GET_BODY_STRUCTURE(body, &structure);
 144   1              FS_GET_BODY_SIZE(body, &length);
 145   1              ac=FS_GetAC();
 146   1              FS_GET_RECORD_VAR_LENGTH(body, record_num-1, &record_current_addr);
 147   1              FS_GET_RECORD_VAR_LENGTH(body, record_num, &record_next_addr);
 148   1              
 149   1              Transmission_SendByte( header[1] );             
 150   1              Transmission_SendByte( (current>>8) );
 151   1              Transmission_SendByte( current );
 152   1              Transmission_SendByte( (body>>8) );
 153   1              Transmission_SendByte( body );
 154   1              Transmission_SendByte( (length>>8) );
 155   1              Transmission_SendByte( length );
 156   1              Transmission_SendByte( record_current_addr );
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 15  

 157   1              Transmission_SendByte( record_next_addr );
 158   1              Transmission_SendByte( structure );
 159   1              Transmission_SendByte( tag );
 160   1              Transmission_SendByte( record_num );
 161   1      
 162   1      
 163   1              Response_SetSW( Response_OK, 0);
 164   1      }
 165          
 166          void Command_GetSecurity() //no acupdate verified 9 April 2016
 167          {
 168   1              unsigned char security, acread;
 169   1              
 170   1              Transmission_SendByte( header[1] );
 171   1              security = State_GetCurrentSecurity();
 172   1              Transmission_SendByte( security );
 173   1      
 174   1              if( header[4]>1 ) {
 175   2                      acread = FS_GetAC();
 176   2                      Transmission_SendByte( acread );
 177   2              }       
 178   1      
 179   1              Response_SetSW(Response_OK, 0);
 180   1      }
 181          
 182          void Command_Format() {
 183   1              unsigned int i;
 184   1              if (!(FSFormat() == FS_OK)) {
 185   2                      Response_SetSW( Response_FatalError , 0);
 186   2                      return;
 187   2              }
 188   1      
 189   1              Response_SetSW( Response_OK , 0);
 190   1      }
*** WARNING C280 IN LINE 183 OF COMMAND.C: 'i': unreferenced local variable
 191          
 192          //verified 8 April 2016
 193          void Command_Encrypt() {
 194   1              unsigned int i;
 195   1              unsigned char temp;
 196   1              if (header[4] == 8){
 197   2                      for(i=0; i<header[4]; i++) {
 198   3                              Transmission_SendByte( ~header[1] );
 199   3      
 200   3                              temp = Transmission_GetByte();
 201   3                              write_data_independent((addr_dati_BC3+i),temp);
 202   3                              temp = Memory_ReadByte(RAND_STATE_ADDR + i);
 203   3                              write_data_independent((addr_k_BC3+i),temp);
 204   3                      }
 205   2                      BC3_encrypt_k_sequential();
 206   2                      resplen = 8;
 207   2                      for (i=0; i<resplen; i++) {
 208   3                              response[i] = read_data_sequential(addr_dato_BC3+i);
 209   3                              Memory_WriteByte(BC3_ADDR+i, response[i]);
 210   3                      }
 211   2                      for(i=0; i<header[4]; i++) {            
 212   3                              write_data_independent((addr_dati_BC3+i),response[i]);
 213   3                              temp = Memory_ReadByte(RAND_STATE_ADDR + i);
 214   3                              write_data_independent((addr_k_BC3+i),temp);
 215   3                      }
 216   2                      BC3_decrypt_k_sequential();
 217   2                      resplen = 8;
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 16  

 218   2                      for (i=0; i<resplen; i++){
 219   3                              response[i+8] = read_data_sequential(addr_dato_BC3+i);
 220   3                      }
 221   2              }
 222   1              
 223   1              if (header[4] == 90) {
 224   2                      for(i=0; i<60; i++){
 225   3                              Transmission_SendByte( ~header[1] );
 226   3                              temp = Transmission_GetByte();
 227   3                              write_data_independent((addr_xi_ECC+i),temp);
 228   3                      }
 229   2                      
 230   2                      for(i=0; i<30; i++) {
 231   3                              Transmission_SendByte( ~header[1] );
 232   3                              temp = Transmission_GetByte();
 233   3                              write_data_independent((addr_k_ECC+i),temp);
 234   3                              Memory_WriteByte(KEY_ECC_ADDR_RD + i, temp);
 235   3                      }
 236   2                      ECC_sequential();
 237   2                      for (i=0; i<60; i++){
 238   3                      response[i] = read_data_sequential(addr_xo_ECC+i);
 239   3                              Memory_WriteByte(ECC_ADDR+i, response[i]);
 240   3                      }
 241   2              }
 242   1      
 243   1              if (header[4] == 64) {
 244   2                      for(i=0; i<64; i++){
 245   3                              Transmission_SendByte( ~header[1] );
 246   3                              temp = Transmission_GetByte();
 247   3                              write_data_independent((addr_dati_HASH+i),temp);
 248   3                      }
 249   2                      HASH_sequential();
 250   2                      for(i=0; i<32; i++){
 251   3                              temp = read_data_sequential(addr_dato_HASH+i);
 252   3                              Memory_WriteByte(SHA_ADDR+i, temp);                     
 253   3                      }
 254   2              }
 255   1      
 256   1              Response_SetSW(Response_OK, 0);
 257   1      }
 258          
 259          //Verified by mahendra 7 April 2016
 260          void Command_GetCurrentChallenge() {
 261   1              unsigned char i, buf[CRYPT_BLOCK_LEN];
 262   1              if( !(header[4] == CRYPT_BLOCK_LEN ) ){
 263   2                      Response_SetSW( Response_WrongLength , 0);
 264   2                      return;
 265   2              }
 266   1      
 267   1              /* ACK */
 268   1              Transmission_SendByte( header[1] );
 269   1              State_GetCurrentChallenge();
 270   1      
 271   1              for( i=0; i<CRYPT_BLOCK_LEN; i++ ){
 272   2                      Transmission_SendByte( buf[i] );
 273   2              }
 274   1              Response_SetSW( Response_OK , 0);
 275   1      }
 276          
 277          
 278          void Command_CreateFile() //verified 9 April 2016
 279          {
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 17  

 280   1              unsigned char tag;
 281   1              unsigned int file_size, fid;
 282   1              unsigned char ac, record_le;
 283   1              unsigned char result;
 284   1              struct DF_st df;
 285   1              struct EF_st ef;
 286   1              unsigned char filetype, rfu1, rfu2; //untuk menyimpan byte 1-2 data yang belum digunakan
 287   1              
 288   1              Transmission_SendByte( ~header[1] );
 289   1              rfu1 = (unsigned int)(Transmission_GetByte());
 290   1              Transmission_SendByte( ~header[1] );
 291   1              rfu2 = (unsigned int) (Transmission_GetByte());
 292   1              
 293   1              //get file size
 294   1              Transmission_SendByte( ~header[1] );
 295   1              file_size = (unsigned int)(Transmission_GetByte()) <<8;
 296   1              Transmission_SendByte( ~header[1] );
 297   1              file_size |= (unsigned int)(Transmission_GetByte());
 298   1              
 299   1              //get fid
 300   1              Transmission_SendByte( ~header[1] );
 301   1              fid = (unsigned int) (Transmission_GetByte()) << 8;
 302   1              Transmission_SendByte( ~header[1] );
 303   1              fid |= (unsigned int) (Transmission_GetByte());
 304   1              
 305   1              // get file type
 306   1              Transmission_SendByte( ~header[1] );
 307   1              filetype = (unsigned int) (Transmission_GetByte());
 308   1              
 309   1              //get ac status / acread
 310   1              Transmission_SendByte( ~header[1] );
 311   1              ac= (unsigned int) (Transmission_GetByte());
 312   1      
 313   1              //check security status
 314   1              if( !((State_GetCurrentSecurity())>=0x01)) {
 315   2                      Response_SetSW( Response_CmdNotAllowed_SecurityStatus , 0);
 316   2                      return;
 317   2              }
 318   1              
 319   1              //get tag
 320   1              if (filetype == 0x38) {
 321   2                      tag = FS_TAG_DF;
 322   2              } else
 323   1              if ((filetype == 0x01)||(filetype == 0x02)||(filetype == 0x04)||(filetype == 0x06)) {
 324   2                      tag = FS_TAG_EF;
 325   2              } else {
 326   2                      tag = 0;
 327   2              }
 328   1              
 329   1              switch( tag ) {
 330   2                      case FS_TAG_DF:
 331   2                              df.FID = fid;
 332   2                              result = FSCreateFile(tag,&df);
 333   2                              break;
 334   2                      case FS_TAG_EF:
 335   2                              ef.FID = fid;
 336   2                              ef.type = FS_EF_TYPE_WORKING;
 337   2                              ef.AC = ac; //(ac && 0xf0) >> 4;
 338   2                              ef.file_size = file_size;
 339   2                              switch(filetype){
 340   3                                      case FS_EF_STRUCTURE_TRANSPARENT: { 
 341   4                                              ef.structure = FS_EF_STRUCTURE_TRANSPARENT;
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 18  

 342   4                                              break;
 343   4                                      }
 344   3                                      case FS_EF_STRUCTURE_RECORD_FIXED: {
 345   4                                              ef.structure = FS_EF_STRUCTURE_RECORD_FIXED;
 346   4                                              //get record length / acupdate
 347   4                                              Transmission_SendByte( ~header[1] );
 348   4                                              record_le = (unsigned int) (Transmission_GetByte());
 349   4                                              ef.record_le = record_le;
 350   4                                              break;
 351   4                                      }
 352   3                                      case FS_EF_STRUCTURE_RECORD_VAR: 
 353   3                                              ef.structure = FS_EF_STRUCTURE_RECORD_VAR;
 354   3                                              break;
 355   3                                      case FS_EF_STRUCTURE_CYCLIC:
 356   3                                              ef.structure = FS_EF_STRUCTURE_CYCLIC;
 357   3                                              break;
 358   3                                      default: 
 359   3                                              ef.structure = FS_EF_STRUCTURE_TRANSPARENT;
 360   3                              }
 361   2                              result = FSCreateFile(tag,&ef);
 362   2                              //result = FS_OK;
 363   2                              break;
 364   2                      default:
 365   2                              result = FS_ERROR;
 366   2              }
 367   1      
 368   1              switch ( result ) {
 369   2                      case FS_OK:
 370   2                              Response_SetSW( Response_OK , 0);
 371   2                              break;
 372   2                      case FS_ERROR_DUPLICATE_FID:
 373   2                              Response_SetSW( Response_WrongP1P2_FileExist , 0);
 374   2                              break;
 375   2                      case FS_ERROR_INSUFFICIENT_SPACE:
 376   2                              Response_SetSW( Response_WrongP1P2_NotEnoughMem , 0);
 377   2                              break;
 378   2                      case FS_ERROR_WRONG_FS_STRUCTURE:
 379   2                              Response_SetSW( Response_CmdNotAllowed_Incompatible_FS , 0);
 380   2                              break;
 381   2                      case FS_ERROR:
 382   2                              Response_SetSW( Response_FatalError , 0);
 383   2                              break;
 384   2                      default:
 385   2                              Response_SetSW( Response_Normal , 0);
 386   2                              break;
 387   2              }
 388   1      }
 389          
 390          void Command_Select() //verified 10 April 2016
 391          {
 392   1              unsigned int current,body, length;
 393   1              unsigned int fid;
 394   1              unsigned int record_num;
 395   1              unsigned char structure;
 396   1              
 397   1              //check security status
 398   1              if( !((State_GetCurrentSecurity())>=0x01)) {
 399   2                      Response_SetSW( Response_CmdNotAllowed_SecurityStatus , 0);
 400   2                      return;
 401   2              }
 402   1      
 403   1              // Check P1 for file selection
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 19  

 404   1              if( header[2] == 0x00 ) {
 405   2                      /* Select MF */
 406   2                      if(header[4] == 0) {
 407   3                              FSSelectMF();
 408   3                              Response_SetSW(Response_OK, 0);
 409   3                      } else {
 410   3                              Transmission_SendByte( ~header[1] );
 411   3                              fid = (unsigned int)(Transmission_GetByte()) << 8;
 412   3      
 413   3                              Transmission_SendByte( ~header[1] );
 414   3                              fid |= Transmission_GetByte();
 415   3      
 416   3                              switch( FS_SelectFID(fid) ) {
 417   4                                      case FS_OK: {
 418   5                                              Response_SetSW(Response_OK, 0);
 419   5                                              break;
 420   5                                      }
 421   4                                      case FS_ERROR_NOT_FOUND: 
 422   4                                              Response_SetSW( Response_WrongP1P2_FileNotFound, 0);
 423   4                                              return;
 424   4                                              break; 
 425   4                              }
 426   3                      }
 427   2              } else {
 428   2                      Response_SetSW( Response_WrongP1P2_IncorrectP1P2, 0);
 429   2                      return;
 430   2              }
 431   1      
 432   1              // Check File Structure
 433   1              current = State_GetCurrent();
 434   1              FS_GET_HEADER_BODY_POINTER(current,&body);
 435   1              FS_GET_BODY_SIZE(body, &length);
 436   1              FS_GET_BODY_STRUCTURE(body, &structure);
 437   1              
 438   1              if((structure==FS_EF_STRUCTURE_RECORD_FIXED) || (structure==FS_EF_STRUCTURE_RECORD_VAR)) {
 439   2                      if( header[3] == 0x00 ){
 440   3                              record_num = 1;
 441   3                              State_SetCurrentRecord(record_num);
 442   3                      }else
 443   2                      if ( header[3] == 0x01 ){
 444   3                              record_num = length;
 445   3                              State_SetCurrentRecord(record_num);
 446   3                      }else
 447   2                      if ( header[3] == 0x02 ){
 448   3                              if( State_GetCurrentRecord() ==  length){
 449   4                                      Response_SetSW( Response_WrongP1P2_RecordNotFound, 0);
 450   4                                      return;
 451   4                              }else{
 452   4                                      record_num = State_GetCurrentRecord() + 1;
 453   4                                      State_SetCurrentRecord(record_num);
 454   4                              }
 455   3                      }else
 456   2                      if ( header[3] == 0x03 ){
 457   3                              if( State_GetCurrentRecord() ==  1){
 458   4                                      Response_SetSW( Response_WrongP1P2_RecordNotFound, 0);
 459   4                                      return;
 460   4                              }else{
 461   4                                      record_num = State_GetCurrentRecord() - 1;
 462   4                                      State_SetCurrentRecord(record_num);
 463   4                              }
 464   3                      }
 465   2              }
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 20  

 466   1      }
 467          
 468          void Command_DeleteFile() {
 469   1              unsigned int fid;
 470   1      
 471   1              Transmission_SendByte( ~header[1] );
 472   1              fid = (unsigned int)(Transmission_GetByte()) << 8;
 473   1      
 474   1              Transmission_SendByte( ~header[1] );
 475   1              fid |= Transmission_GetByte();
 476   1      
 477   1              switch ( FSDeleteFile(fid) ) {
 478   2                      case FS_OK:
 479   2                              Response_SetSW( Response_OK , 0);
 480   2                              break;
 481   2                      default:
 482   2                              Response_SetSW( Response_WrongP1P2_FileNotFound , 0);
 483   2                              break;
 484   2              }
 485   1      }
 486          
 487          unsigned char Initial_Binary_Check(unsigned int *length, unsigned int *offset){
 488   1              unsigned int current, body, fid, tag;
 489   1              unsigned int tempLength;
 490   1              unsigned char security, structure;
 491   1      
 492   1              // Check security status
 493   1              security = State_GetCurrentSecurity();
 494   1              if( !( security >= 0x01 )) {
 495   2                      Response_SetSW( Response_CmdNotAllowed_SecurityStatus , 0);
 496   2                      return 2;
 497   2              }
 498   1      
 499   1              if( header[2]&0x80 == 0x80 ) {
 500   2                      fid=header[2]&0x1F; //get only bit4-07
 501   2                      switch( FS_SelectFID(fid) ){
 502   3                              case FS_OK:
 503   3                                      break;
 504   3                              case FS_ERROR_NOT_FOUND:
 505   3                                      Response_SetSW( Response_WrongP1P2_FileNotFound, 0);
 506   3                                      return 2;
 507   3                                      break;
 508   3                      }
 509   2                      *offset = header[3];
 510   2              } else {
 511   2                      current = State_GetCurrent();
 512   2                      if ( current == 0x00 ) {
 513   3                              Response_SetSW(Response_CmdNotAllowed_NoCurrentEF, 0);
 514   3                              return 2;
 515   3                      }
 516   2                      *offset = (header[2] << 8) | header[3];
 517   2              }
 518   1              
 519   1              current = State_GetCurrent();
 520   1              FS_GET_HEADER_TAG(current,&tag);
 521   1              FS_GET_HEADER_BODY_POINTER(current,&body);
 522   1              FS_GET_BODY_SIZE(body, &tempLength);
 523   1              *length = tempLength;
 524   1      
 525   1              //Check tag file
 526   1              if(tag == FS_TAG_DF) {
 527   2                      Response_SetSW(Response_CmdNotAllowed_Incompatible_FS, 0);
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 21  

 528   2                      return 2;
 529   2              }
 530   1              
 531   1              // Check offset > file length
 532   1              if (*offset>tempLength) {
 533   2                      Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
 534   2                      return 2;
 535   2              }
 536   1              
 537   1              // Check file structure
 538   1              FS_GET_BODY_STRUCTURE(body, &structure);
 539   1              if(!(structure==FS_EF_STRUCTURE_TRANSPARENT)) {
 540   2                      Response_SetSW(Response_CmdNotAllowed_Incompatible_FS, 0);
 541   2                      return 2;
 542   2              }
 543   1      
 544   1              return 0;
 545   1      }
 546          
 547          void Command_ReadBinary(){
 548   1              unsigned int offset, length, le;
 549   1              unsigned char data_binary;
 550   1              unsigned char i, ac;
 551   1              
 552   1              if(Initial_Binary_Check(&length, &offset) != 0){
 553   2                      return;
 554   2              }
 555   1              
 556   1              //check access condition
 557   1              ac=FS_GetAC();
 558   1              if(!( ac&0x01 == 0x01 )) {
 559   2                      Response_SetSW( Response_CmdNotAllowed_SecurityStatus , 0);
 560   2                      return;
 561   2              }
 562   1              
 563   1              le = header[4];
 564   1              
 565   1              Transmission_SendByte( header[1] );
 566   1              Transmission_SendByte( length );
 567   1              Transmission_SendByte( offset );
 568   1              // If Le = 0, Read all data in file
 569   1              // if(le==0) {
 570   1              //      for( i=0; i<length; i++ ) {
 571   1              //              FSAccessBinary(FS_OP_READ,offset+i,1,&data_binary);
 572   1              //              Transmission_SendByte(data_binary);
 573   1              //      }
 574   1              // }else
 575   1              // // If Le + Offset > length of file, Read until EOF
 576   1              // if((le+offset)>length) {
 577   1              //      for( i=0; i<(length-offset); i++ ) {
 578   1              //              FSAccessBinary(FS_OP_READ,offset+i,1,&data_binary);
 579   1              //              Transmission_SendByte(data_binary);
 580   1              //      }
 581   1              //      Response_SetSW(Response_Warning_EndOfFile, 0);
 582   1              //      return;
 583   1              // } else {
 584   1              // // Read normally
 585   1              //      for( i=0; i<le; i++ ) {
 586   1              //              FSAccessBinary(FS_OP_READ,offset+i,1,&data_binary);
 587   1              //              Transmission_SendByte(data_binary);
 588   1              //      }
 589   1              // }
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 22  

 590   1                      
 591   1              Response_SetSW( Response_OK, 0 );
 592   1      }
*** WARNING C280 IN LINE 549 OF COMMAND.C: 'data_binary': unreferenced local variable
*** WARNING C280 IN LINE 550 OF COMMAND.C: 'i': unreferenced local variable
 593          
 594          void Command_UpdateBinary(){
 595   1              unsigned int offset, length, le;
 596   1              unsigned char data_binary;
 597   1              unsigned char i, ac;
 598   1              
 599   1              if(Initial_Binary_Check(&length, &offset) != 0){
 600   2                      return;
 601   2              }
 602   1              
 603   1              //check access condition
 604   1              ac=FS_GetAC();
 605   1              if(!( ac&0x01 == 0x01 )){
 606   2                      Response_SetSW( Response_CmdNotAllowed_SecurityStatus , 0);
 607   2                      return;
 608   2              }
 609   1              
 610   1              le = (unsigned int) header[4];
 611   1      
 612   1              //If Le+Offset > length of file, Write until EOF
 613   1              if((le+offset)>length) {
 614   2                      for( i=0; i<(length-offset); i++) {
 615   3                              Transmission_SendByte( ~header[1] );
 616   3      
 617   3                              data_binary = Transmission_GetByte();
 618   3      
 619   3                              FSAccessBinary(FS_OP_UPDATE,offset+i,1,&data_binary);
 620   3                      }       
 621   2                      Response_SetSW(Response_Warning_EndOfFile, 0);
 622   2                      return;
 623   2              } else {
 624   2                      //Read normally
 625   2                      for( i=0; i<le; i++) {
 626   3                              Transmission_SendByte( ~header[1] );
 627   3      
 628   3                              data_binary = Transmission_GetByte();
 629   3      
 630   3                              FSAccessBinary(FS_OP_UPDATE,offset+i,1,&data_binary);
 631   3                      }       
 632   2              }
 633   1      
 634   1              Response_SetSW( Response_OK , 0);
 635   1      }
 636          
 637          void Command_EraseBinary() {
 638   1              unsigned int offset, length, le;
 639   1              unsigned char i, ac;
 640   1              
 641   1              if(Initial_Binary_Check(&length, &offset) != 0){
 642   2                      return;
 643   2              }
 644   1              
 645   1              //check access condition
 646   1              ac=FS_GetAC();
 647   1              if(!( ac&0x01 == 0x01 )){
 648   2                      Response_SetSW( Response_CmdNotAllowed_SecurityStatus , 0);
 649   2                      return;
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 23  

 650   2              }
 651   1              
 652   1              le = (unsigned int) header[4];
 653   1      
 654   1              //If Le+Offset > length of file, Write until EOF
 655   1              if((le+offset)>length){
 656   2                      for( i=0; i<(length-offset); i++) {
 657   3                              FSAccessBinary(FS_OP_UPDATE,offset+i,1,0xFF);
 658   3                      }       
 659   2                      Response_SetSW(Response_Warning_EndOfFile, 0);
 660   2                      return;
 661   2              } else {
 662   2                      //Read normally
 663   2                      for( i=0; i<le; i++) {
 664   3                              FSAccessBinary(FS_OP_UPDATE,offset+i,1,0xFF);
 665   3                      }       
 666   2              }
 667   1      
 668   1              Response_SetSW( Response_OK , 0);
 669   1      }
 670          
 671          void Command_WriteBinary(){
 672   1              unsigned int offset, length, le;
 673   1              unsigned char data_binary, data_read, data_write;
 674   1              unsigned char i, ac;
 675   1              
 676   1              if(Initial_Binary_Check(&length, &offset) != 0){
 677   2                      return;
 678   2              }
 679   1              
 680   1              //check access condition
 681   1              ac=FS_GetAC();
 682   1              if(!( ac&0x01 == 0x01 )){
 683   2                      Response_SetSW( Response_CmdNotAllowed_SecurityStatus , 0);
 684   2                      return;
 685   2              }
 686   1              
 687   1              le = (unsigned int) header[4];
 688   1      
 689   1              //If Le+Offset > length of file, Write until EOF
 690   1              if((le+offset)>length) {
 691   2                      for( i=0; i<(length-offset); i++) {
 692   3                              Transmission_SendByte( ~header[1] );
 693   3      
 694   3                              data_write = Transmission_GetByte();
 695   3                              
 696   3                              FSAccessBinary(FS_OP_READ,offset+i,1,&data_read);
 697   3                              
 698   3                              data_binary = data_write & data_read;
 699   3                              
 700   3                              FSAccessBinary(FS_OP_UPDATE,offset+i,1,&data_binary);
 701   3                      }       
 702   2                      Response_SetSW(Response_Warning_EndOfFile, 0);
 703   2                      return;
 704   2              } else {
 705   2                      //Read normally
 706   2                      for( i=0; i<le; i++) {
 707   3                              Transmission_SendByte( ~header[1] );
 708   3      
 709   3                              data_write = Transmission_GetByte();
 710   3                              
 711   3                              FSAccessBinary(FS_OP_READ,offset+i,1,&data_read);
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 24  

 712   3                              
 713   3                              data_binary = data_write & data_read;
 714   3      
 715   3                              FSAccessBinary(FS_OP_UPDATE,offset+i,1,&data_binary);
 716   3                      }       
 717   2              }
 718   1      
 719   1              Response_SetSW( Response_OK , 0);
 720   1      }
 721          
 722          
 723          void Read_One_Record(unsigned char structure, unsigned int body, unsigned int size, unsigned int record_nu
             -m){
 724   1              unsigned char record_le;
 725   1              unsigned char databyte;
 726   1              unsigned char record_current_addr, record_next_addr;
 727   1              unsigned int offset, i;
 728   1      
 729   1              if(structure==FS_EF_STRUCTURE_RECORD_FIXED){
 730   2                      FS_GET_RECORD_FIXED_LENGTH(body, &record_le);
 731   2                      offset = record_le*(record_num-1)+1;
 732   2                      for(i = 0; i<record_le;i++) {
 733   3                              FSAccessBinary(FS_OP_READ,offset+i,1,&databyte);
 734   3                              Transmission_SendByte(databyte);
 735   3                      }
 736   2              } else {
 737   2                      FS_GET_RECORD_VAR_LENGTH(body, record_num-1, &record_current_addr);
 738   2                      FS_GET_RECORD_VAR_LENGTH(body, record_num, &record_next_addr);
 739   2                      record_le=record_next_addr-record_current_addr;
 740   2                      offset=record_current_addr+size+1;
 741   2                      
 742   2                      for(i = 0; i<record_le;i++) {
 743   3                              FSAccessBinary(FS_OP_READ,offset+i,1,&databyte);
 744   3                              Transmission_SendByte(databyte);
 745   3                      }
 746   2              }
 747   1      }
 748          
 749          unsigned char Update_One_Record(unsigned char structure, unsigned int body, unsigned int size, unsigned in
             -t record_num, unsigned char length){
 750   1              unsigned char record_le;
 751   1              unsigned char databyte, i;
 752   1              unsigned char record_current_addr, record_next_addr;
 753   1              unsigned int offset;
 754   1      
 755   1              if(structure==FS_EF_STRUCTURE_RECORD_FIXED){
 756   2                      FS_GET_RECORD_FIXED_LENGTH(body, &record_le);
 757   2                      offset = record_le*(record_num-1)+1;
 758   2                      if( length == record_le ){
 759   3                              for(i = 0; i<record_le;i++) {
 760   4                                      Transmission_SendByte( ~header[1] );
 761   4                                      databyte = Transmission_GetByte();
 762   4                                      FSAccessBinary(FS_OP_UPDATE,offset+i,1,&databyte);
 763   4                              }
 764   3                      } else {
 765   3                              return record_le;
 766   3                      }
 767   2              } else {
 768   2                      FS_GET_RECORD_VAR_LENGTH(body, record_num-1, &record_current_addr);
 769   2                      FS_GET_RECORD_VAR_LENGTH(body, record_num, &record_next_addr);
 770   2                      record_le=record_next_addr-record_current_addr;
 771   2                      offset=record_current_addr+size+1;
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 25  

 772   2                      if( length == record_le ){              
 773   3                              for(i = 0; i<record_le;i++) {
 774   4                                      Transmission_SendByte( ~header[1] );
 775   4                                      databyte = Transmission_GetByte();
 776   4                                      FSAccessBinary(FS_OP_UPDATE,offset+i,1,&databyte);
 777   4                              }
 778   3                      } else {
 779   3                              return record_le;
 780   3                      }
 781   2              }
 782   1              return 0;
 783   1      }
 784          
 785          unsigned char Write_One_Record(unsigned char structure, unsigned int body, unsigned int size, unsigned int
             - record_num, unsigned char length){
 786   1              unsigned char record_le;
 787   1              unsigned char databyte, i, data_write, data_read;
 788   1              unsigned char record_current_addr, record_next_addr;
 789   1              unsigned int offset;
 790   1      
 791   1              if(structure==FS_EF_STRUCTURE_RECORD_FIXED){
 792   2                      FS_GET_RECORD_FIXED_LENGTH(body, &record_le);
 793   2                      offset = record_le*(record_num-1)+1;
 794   2                      if( length == record_le ){
 795   3                              for(i = 0; i<record_le;i++) {
 796   4                                      Transmission_SendByte( ~header[1] );
 797   4                                      data_write = Transmission_GetByte();
 798   4                              
 799   4                                      FSAccessBinary(FS_OP_READ,offset+i,1,&data_read);
 800   4                              
 801   4                                      databyte = data_write & data_read;
 802   4                                      FSAccessBinary(FS_OP_UPDATE,offset+i,1,&databyte);
 803   4                              }
 804   3                      } else {
 805   3                              return record_le;
 806   3                      }
 807   2              } else {
 808   2                      FS_GET_RECORD_VAR_LENGTH(body, record_num-1, &record_current_addr);
 809   2                      FS_GET_RECORD_VAR_LENGTH(body, record_num, &record_next_addr);
 810   2                      record_le=record_next_addr-record_current_addr;
 811   2                      offset=record_current_addr+size+1;
 812   2                      if( length == record_le ){              
 813   3                              for(i = 0; i<record_le;i++) {
 814   4                                      Transmission_SendByte( ~header[1] );
 815   4                                      data_write = Transmission_GetByte();
 816   4                              
 817   4                                      FSAccessBinary(FS_OP_READ,offset+i,1,&data_read);
 818   4                              
 819   4                                      databyte = data_write & data_read;
 820   4                                      FSAccessBinary(FS_OP_UPDATE,offset+i,1,&databyte);
 821   4                              }
 822   3                      } else {
 823   3                              return record_le;
 824   3                      }
 825   2              }
 826   1              return 0;
 827   1      }
 828          
 829          
 830          void Command_ReadRecord(){
 831   1              unsigned int current, body, size, tag, record_num;
 832   1              unsigned char i, security, structure, ac;
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 26  

 833   1              
 834   1              // Check security status
 835   1              security = State_GetCurrentSecurity();
 836   1              if( !( security >= 0x01 )) {
 837   2                      Response_SetSW( Response_CmdNotAllowed_SecurityStatus , 0);
 838   2                      return;
 839   2              }
 840   1              
 841   1              // File selection check
 842   1              if ((header[3]&0xF8) == 0x00){
 843   2                      //select current file
 844   2                      current = State_GetCurrent();
 845   2                      if ( current == 0x00 ) {
 846   3                              Response_SetSW(Response_CmdNotAllowed_NoCurrentEF, 0);
 847   3                              return;
 848   3                      }
 849   2              } else {
 850   2                      Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
 851   2                      return;
 852   2              }
 853   1              
 854   1              FS_GET_HEADER_TAG(current,&tag);
 855   1              FS_GET_HEADER_BODY_POINTER(current,&body);
 856   1              FS_GET_BODY_SIZE(body, &size);
 857   1              
 858   1              //Check tag file
 859   1              if(tag == FS_TAG_DF) {
 860   2                      Response_SetSW(Response_CmdNotAllowed_Incompatible_FS, 0);
 861   2                      return;
 862   2              }
 863   1              
 864   1              // Check file structure
 865   1              FS_GET_BODY_STRUCTURE(body, &structure);
 866   1              if( !( (structure==FS_EF_STRUCTURE_RECORD_FIXED) || (structure==FS_EF_STRUCTURE_RECORD_VAR) ) ) {
 867   2                      Response_SetSW(Response_CmdNotAllowed_Incompatible_FS, 0);
 868   2                      return;
 869   2              }
 870   1              
 871   1              // Check access condition
 872   1              ac=FS_GetAC();
 873   1              if(!( ac&0x01 == 0x01 )) {
 874   2                      Response_SetSW( Response_CmdNotAllowed_SecurityStatus , 0);
 875   2                      return;
 876   2              }
 877   1              
 878   1              // Check P1
 879   1              if(header[2]==0x00){
 880   2                      record_num = State_GetCurrentRecord();
 881   2              } else{
 882   2                      record_num = header[2];
 883   2              }
 884   1              
 885   1              // Check P1
 886   1                      if(record_num>size){
 887   2                              Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
 888   2                              return;
 889   2                      }
 890   1              
 891   1                      // Check P2[2]
 892   1                      // Send ACK
 893   1                      Transmission_SendByte( header[1] );
 894   1                      if((header[3]&0x04)==0x04){//P2[2]==1
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 27  

 895   2                              //check P2[1..0]
 896   2                              if((header[3]&0x03)==0x00){
 897   3                                      Read_One_Record(structure,body,size,record_num);
 898   3                              } else
 899   2                              if((header[3]&0x03)==0x01){
 900   3                                      for(i=record_num;i<=size;i++){
 901   4                                              Read_One_Record(structure,body,size,i);
 902   4                                      }
 903   3                              } else
 904   2                              if((header[3]&0x03)==0x02){
 905   3                                      for(i=size;i>=record_num;i--){
 906   4                                              Read_One_Record(structure,body,size,i);
 907   4                                      }
 908   3                              } else {
 909   3                                      Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
 910   3                                      return;
 911   3                              }
 912   2                      } else {
 913   2                              //check P2[1..0]
 914   2                              if((header[3]&0x03)==0x00){
 915   3                                      record_num = 1;
 916   3                                      Read_One_Record(structure,body,size,record_num);
 917   3                              } else
 918   2                              if((header[3]&0x03)==0x01){
 919   3                                      if(record_num!=size){
 920   4                                              record_num = record_num+1;
 921   4                                              Read_One_Record(structure,body,size,record_num);
 922   4                                      }else{
 923   4                                              Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
 924   4                                              return;
 925   4                                      }
 926   3                              } else
 927   2                              if((header[3]&0x03)==0x02){
 928   3                                      if(record_num!=1){
 929   4                                              record_num = record_num-1;
 930   4                                              Read_One_Record(structure,body,size,record_num);
 931   4                                      }else{
 932   4                                              Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
 933   4                                              return;
 934   4                                      }
 935   3                              } else  
 936   2                              if((header[3]&0x03)==0x03){
 937   3                                      record_num = size;
 938   3                                      Read_One_Record(structure,body,size,record_num);
 939   3                              } else {
 940   3                                      Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
 941   3                                      return;
 942   3                              }
 943   2                      }
 944   1              
 945   1              Response_SetSW( Response_OK, 0 );
 946   1      }
 947          
 948          void Command_UpdateRecord(){
 949   1              unsigned int current, body, size, tag, record_num;
 950   1              unsigned char security, structure, ac, status;
 951   1              
 952   1              // Check security status
 953   1              security = State_GetCurrentSecurity();
 954   1              if( !( security >= 0x01 )) {
 955   2                      Response_SetSW( Response_CmdNotAllowed_SecurityStatus , 0);
 956   2                      return;
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 28  

 957   2              }
 958   1              
 959   1              // File selection check
 960   1              if ( (header[3]&0xF8) == 0x00){
 961   2                      //select current file
 962   2                      current = State_GetCurrent();
 963   2                      if ( current == 0x00 ) {
 964   3                              Response_SetSW(Response_CmdNotAllowed_NoCurrentEF, 0);
 965   3                              return;
 966   3                      }
 967   2              } else {
 968   2                      Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
 969   2                      return;
 970   2              }
 971   1              
 972   1              current = State_GetCurrent();
 973   1              FS_GET_HEADER_TAG(current,&tag);
 974   1              FS_GET_HEADER_BODY_POINTER(current,&body);
 975   1              FS_GET_BODY_SIZE(body, &size);
 976   1              
 977   1              //Check tag file
 978   1              if(tag == FS_TAG_DF) {
 979   2                      Response_SetSW(Response_CmdNotAllowed_Incompatible_FS, 0);
 980   2                      return;
 981   2              }
 982   1              
 983   1              // Check file structure
 984   1              FS_GET_BODY_STRUCTURE(body, &structure);
 985   1              if( !( (structure==FS_EF_STRUCTURE_RECORD_FIXED) || (structure==FS_EF_STRUCTURE_RECORD_VAR) ) ) {
 986   2                      Response_SetSW(Response_CmdNotAllowed_Incompatible_FS, 0);
 987   2                      return;
 988   2              }
 989   1              
 990   1              //check access condition
 991   1              ac=FS_GetAC();
 992   1              if(!( ac&0x01 == 0x01 )) {
 993   2                      Response_SetSW( Response_CmdNotAllowed_SecurityStatus , 0);
 994   2                      return;
 995   2              }
 996   1              
 997   1              //check P1
 998   1              if(header[2]==0x00){
 999   2                      record_num = State_GetCurrentRecord();
1000   2              } else {
1001   2                      record_num = header[2];
1002   2              }
1003   1      
1004   1              //check P1
1005   1              if(record_num>size){
1006   2                      Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
1007   2                      return;
1008   2              }
1009   1              
1010   1              //check P2[2]
1011   1              if( (header[3]&0x04) == 0x04 ){//P2[2]==1
1012   2                      status = Update_One_Record(structure,body,size,record_num,header[4]);
1013   2              } else {
1014   2                      //check P2[1..0]
1015   2                      if( (header[3] & 0x03) == 0x00 ){
1016   3                              record_num = 1;
1017   3                              status = Update_One_Record(structure,body,size,record_num,header[4]);
1018   3                      } else
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 29  

1019   2                      if( (header[3] & 0x03) == 0x01 ){
1020   3                              if(record_num!=size){
1021   4                                      record_num = record_num+1;
1022   4                                      status = Update_One_Record(structure,body,size,record_num,header[4]);
1023   4                              }else{
1024   4                                      Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
1025   4                                      return;
1026   4                              }
1027   3                      } else
1028   2                      if( (header[3] & 0x03) == 0x02 ){
1029   3                              if(record_num!=1){
1030   4                                      record_num = record_num-1;
1031   4                                      status = Update_One_Record(structure,body,size,record_num,header[4]);
1032   4                              }else{
1033   4                                      Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
1034   4                                      return;
1035   4                              }
1036   3                      } else {
1037   3                              record_num = size;
1038   3                              status = Update_One_Record(structure,body,size,record_num,header[4]);
1039   3                      }
1040   2              }
1041   1      
1042   1              if(status != 0){
1043   2                      Response_SetSW( Response_WrongLength, status );
1044   2                      return;
1045   2              }
1046   1      
1047   1              Response_SetSW( Response_OK, 0 );
1048   1      }
1049          
1050          void Command_WriteRecord(){
1051   1              unsigned int current, body, size, tag, record_num;
1052   1              unsigned char security, structure, ac, status;
1053   1              
1054   1              // Check security status
1055   1              security = State_GetCurrentSecurity();
1056   1              if( !( security >= 0x01 )) {
1057   2                      Response_SetSW( Response_CmdNotAllowed_SecurityStatus , 0);
1058   2                      return;
1059   2              }
1060   1              
1061   1              // File selection check
1062   1              if ( (header[3]&0xF8) == 0x00){
1063   2                      //select current file
1064   2                      current = State_GetCurrent();
1065   2                      if ( current == 0x00 ) {
1066   3                              Response_SetSW(Response_CmdNotAllowed_NoCurrentEF, 0);
1067   3                              return;
1068   3                      }
1069   2              } else {
1070   2                      Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
1071   2                      return;
1072   2              }
1073   1              
1074   1              current = State_GetCurrent();
1075   1              FS_GET_HEADER_TAG(current,&tag);
1076   1              FS_GET_HEADER_BODY_POINTER(current,&body);
1077   1              FS_GET_BODY_SIZE(body, &size);
1078   1              
1079   1              //Check tag file
1080   1              if(tag == FS_TAG_DF) {
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 30  

1081   2                      Response_SetSW(Response_CmdNotAllowed_Incompatible_FS, 0);
1082   2                      return;
1083   2              }
1084   1              
1085   1              // Check file structure
1086   1              FS_GET_BODY_STRUCTURE(body, &structure);
1087   1              if( !( (structure==FS_EF_STRUCTURE_RECORD_FIXED) || (structure==FS_EF_STRUCTURE_RECORD_VAR) ) ) {
1088   2                      Response_SetSW(Response_CmdNotAllowed_Incompatible_FS, 0);
1089   2                      return;
1090   2              }
1091   1              
1092   1              //check access condition
1093   1              ac=FS_GetAC();
1094   1              if(!( ac&0x01 == 0x01 )) {
1095   2                      Response_SetSW( Response_CmdNotAllowed_SecurityStatus , 0);
1096   2                      return;
1097   2              }
1098   1              
1099   1              //check P1
1100   1              if(header[2]==0x00){
1101   2                      record_num = State_GetCurrentRecord();
1102   2              } else {
1103   2                      record_num = header[2];
1104   2              }
1105   1      
1106   1              //check P1
1107   1              if(record_num>size){
1108   2                      Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
1109   2                      return;
1110   2              }
1111   1              
1112   1              //check P2[2]
1113   1              if( (header[3]&0x04) == 0x04 ){//P2[2]==1
1114   2                      status = Update_One_Record(structure,body,size,record_num,header[4]);
1115   2              } else {
1116   2                      //check P2[1..0]
1117   2                      if( (header[3] & 0x03) == 0x00 ){
1118   3                              record_num = 1;
1119   3                              status = Write_One_Record(structure,body,size,record_num,header[4]);
1120   3                      } else
1121   2                      if( (header[3] & 0x03) == 0x01 ){
1122   3                              if(record_num!=size){
1123   4                                      record_num = record_num+1;
1124   4                                      status = Update_One_Record(structure,body,size,record_num,header[4]);
1125   4                              }else{
1126   4                                      Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
1127   4                                      return;
1128   4                              }
1129   3                      } else
1130   2                      if( (header[3] & 0x03) == 0x02 ){
1131   3                              if(record_num!=1){
1132   4                                      record_num = record_num-1;
1133   4                                      status = Update_One_Record(structure,body,size,record_num,header[4]);
1134   4                              }else{
1135   4                                      Response_SetSW(Response_WrongP1P2_IncorrectP1P2, 0);
1136   4                                      return;
1137   4                              }
1138   3                      } else {
1139   3                              record_num = size;
1140   3                              status = Write_One_Record(structure,body,size,record_num,header[4]);
1141   3                      }
1142   2              }
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 31  

1143   1      
1144   1              if(status != 0){
1145   2                      Response_SetSW( Response_WrongLength, status );
1146   2                      return;
1147   2              }
1148   1      
1149   1              Response_SetSW( Response_OK, 0 );
1150   1      }
1151          
1152          
1153          //Verified Mahendra 07 april 2016
1154          void Command_Verify() {
1155   1              unsigned char i;
1156   1              unsigned char retries;
1157   1      
1158   1              if( header[4] != PIN_LEN ) {
1159   2                      Response_SetSW( Response_WrongLength , 0);
1160   2                      return;
1161   2              }
1162   1      
1163   1              for( i=0; i<PIN_LEN; i++ ) {
1164   2                      Transmission_SendByte( ~header[1] );
1165   2                      pin[i] = Transmission_GetByte();
1166   2              }
1167   1              Transmission_SendByte( header[1] );
1168   1      
1169   1              switch( State_Verify() ) {
1170   2                      case STATE_OK:
1171   2                              Response_SetSW( Response_OK , 0);
1172   2                              break;
1173   2                      case STATE_BLOCKED:
1174   2                              Response_SetSW( Response_CmdNotAllowed_AuthBlocked , 0);
1175   2                              break;
1176   2                      case STATE_WRONG:
1177   2                              retries = Memory_ReadByte(PIN_RETRIES_ADDR);
1178   2                              Response_SetSW( Response_Warning_Counter  , retries & 0x0F);
1179   2              }
1180   1      }
1181          
1182          // void Command_GetChallenge() {
1183          //      unsigned char i;
1184          
1185          //      if( !(header[4] == CRYPT_BLOCK_LEN ) ){
1186          //              Response_SetSW( Response_WrongLength , 0);
1187          //              return;
1188          //      }
1189          
1190          //      Transmission_SendByte( header[1] );
1191          
1192          //      State_GetChallenge();
1193          
1194          //      for( i=0; i<CRYPT_BLOCK_LEN; i++ ){
1195          //              Transmission_SendByte( buffer[i] );
1196          //      }
1197          
1198          //      Response_SetSW( Response_OK , 0);
1199          // }
1200          
1201          // void Command_ExternalAuth() {
1202          //      unsigned char i, temp;
1203          //      unsigned char retries;
1204          
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 32  

1205          //      if( !(header[4] == 0x44) ) {
1206          //              Response_SetSW( Response_WrongLength , 0);
1207          //              return;
1208          //      }
1209                  
1210          //      for( i=0; i<7; i++) {
1211          //      copy_data_block_independent(addr_RNG, addr_k_ECC+i+2, 4);
1212          //      Memory_WriteByte(KEY_ECC_ADDR_RD + i, temp);
1213          //      }
1214          //      ECC_sequential();
1215                  
1216          //      for( i=0; i<CRYPT_BLOCK_LEN; i++ ) {
1217          //              Transmission_SendByte( ~header[1] );
1218          //              encrypted[i] = Transmission_GetByte();
1219          //      }
1220          
1221          //      for (i=0; i<60; i++){
1222          //              response[i] = read_data_sequential(addr_xo_ECC+i);
1223          //      }
1224                          
1225          //      for(i=0; i<60; i++){
1226          //              Transmission_SendByte( ~header[1] );
1227          //              temp = Transmission_GetByte();
1228          //              write_data_sequential((addr_xi_ECC+i),temp);
1229          //      }
1230                          
1231          //      for(i=0; i<30; i++){
1232          //              temp = read_data_independent(addr_RNG);
1233          //              write_data_sequential((addr_k_ECC+i),temp);
1234          //              Memory_WriteByte(KEY_ECC_ADDR_SC + i, temp);
1235          //      }
1236                          
1237          //      ECC_sequential();
1238                          
1239          //      for(i=0; i<60; i++){
1240          //              Memory_WriteByte(KEY_AUTH + i, response[i]);
1241          //      }
1242                  
1243          //      for (i=0; i<60; i++){
1244          //              response[i] = read_data_sequential(addr_xo_ECC+i);
1245          //              Memory_WriteByte(ECC_ADDR+i, response[i]);
1246          //      }
1247                          
1248          //      switch( State_VerifyAuth() ){
1249          //              case STATE_OK:
1250          //                      Response_SetSW( Response_Auth_Success , 0);
1251          //                      break;
1252          //              case STATE_BLOCKED:
1253          //                      Response_SetSW( Response_CmdNotAllowed_ConditionNotSatisfied , 0);
1254          //                      break;
1255          //              case STATE_WRONG:
1256          //                      retries = Memory_ReadByte(EXT_AUTH_RETRIES_ADDR);
1257          //                      Response_SetSW( Response_Warning_Counter | (retries & 0x0f) , 0);
1258          //      }
1259          
1260          // }
1261          
1262          // void Command_GetResponse(){
1263          //      unsigned char i;
1264          
1265          //      if( resplen==0 ) {
1266          //              Response_SetSW( Response_CmdNotAllowed_ConditionNotSatisfied , 0);
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 33  

1267          //              return;
1268          //      }
1269                  
1270          //      if( (header[4]>resplen) || (!header[4]) ) {
1271          //      Response_SetSW( Response_WrongLength , 0);
1272          //      return;
1273          //      }
1274          //      resplen=header[4];
1275          
1276          //      Transmission_SendByte( header[1] );
1277          
1278          //      for( i=0; i<resplen; i++ ){
1279          //              Transmission_SendByte(response[i]);
1280          //      }
1281          
1282          //      Response_SetSW( Response_OK , 0);
1283          // }
1284          
1285          void Command_Interpreter() {
1286   1              if ( (header[0]&0xFC)==0x80 ) {
1287   2                      switch( header[1]&0xFE ) {
1288   3                              case DEBUG_WRITE:
1289   3                                      Command_Write();
1290   3                                      break;
1291   3                              case DEBUG_READ:
1292   3                                      Command_Read();
1293   3                                      break;
1294   3                              case DEBUG_GETCURRENT:
1295   3                                      Command_GetCurrent();
1296   3                                      break;
1297   3                              case DEBUG_GETSECURITY:
1298   3                                      Command_GetSecurity();
1299   3                                      break;
1300   3                              case DEBUG_FORMAT:
1301   3                                      Command_Format();
1302   3                                      break;
1303   3                              case DEBUG_ENCRYPT:
1304   3                                      Command_Encrypt();
1305   3                                      break;
1306   3                              case DEBUG_GETCHALLENGE:
1307   3                                      Command_GetCurrentChallenge();
1308   3                                      break;
1309   3                              case ISO_SELECT:
1310   3                                      Command_Select();
1311   3                                      break;
1312   3                              case ISO_READ_BINARY:
1313   3                                      Command_ReadBinary();
1314   3                                      break;
1315   3                              case ISO_UPDATE_BINARY:
1316   3                                      Command_UpdateBinary();
1317   3                                      break;
1318   3                              case ISO_ERASEBINARY:
1319   3                                      Command_EraseBinary();
1320   3                                      break;
1321   3                              case ISO_CREATE_FILE:
1322   3                                      Command_CreateFile();
1323   3                                      break;
1324   3                              case ISO_DELETE_FILE:
1325   3                                      Command_DeleteFile();
1326   3                                      break;
1327   3                              case ISO_VERIFY:
1328   3                                      Command_Verify();
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 34  

1329   3                                      break;
1330   3                              case ISO_GET_CHALLENGE:
1331   3                                      Command_GetChallenge();
1332   3                                      break;
1333   3                              case ISO_EXT_AUTH:
1334   3                                      Command_ExternalAuth();
*** WARNING C206 IN LINE 1334 OF COMMAND.C: 'Command_ExternalAuth': missing function-prototype
1335   3                                      break;
1336   3                              case ISO_GET_RESPONSE:
1337   3                                      Command_GetResponse();
*** WARNING C206 IN LINE 1337 OF COMMAND.C: 'Command_GetResponse': missing function-prototype
1338   3                                      break;
1339   3                              case Debug_SHM:
1340   3                                      Command_ReadSHM();
1341   3                                      break;
1342   3                              case ISO_READRECORD:
1343   3                                      Command_ReadRecord();
1344   3                                      break;
1345   3                              case ISO_UPDATE_RECORD:
1346   3                                      Command_UpdateRecord();
1347   3                                      break;
1348   3                              case ISO_WRITERECORD:
1349   3                                      Command_WriteRecord();
1350   3                                      break;
1351   3                              case ISO_WRITEBINARY:
1352   3                                      Command_WriteBinary();
1353   3                                      break;
1354   3                              default:
1355   3                                      Response_SetSW( Response_INSNotSupported, 0 );
1356   3                                      break;
1357   3                      }
1358   2              } else {
1359   2                      Response_SetSW( Response_CLANotSupported, 0);
1360   2              }
1361   1      }
1362          
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 35  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Command_Write (BEGIN)
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 36
0000 900000      E     MOV     DPTR,#header+02H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 7C00              MOV     R4,#00H
0009 2400              ADD     A,#00H
000B FF                MOV     R7,A
000C EC                MOV     A,R4
000D 3E                ADDC    A,R6
000E 900000      R     MOV     DPTR,#address_EEPROM
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 38
0015 900000      E     MOV     DPTR,#header+04H
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 900000      R     MOV     DPTR,#length
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
001F A3                INC     DPTR
0020 EF                MOV     A,R7
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 40
0022 E4                CLR     A
0023 900000      R     MOV     DPTR,#i
0026 F0                MOVX    @DPTR,A
0027 A3                INC     DPTR
0028 F0                MOVX    @DPTR,A
0029         ?C0001:
0029 900000      R     MOV     DPTR,#length
002C E0                MOVX    A,@DPTR
002D FE                MOV     R6,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 C3                CLR     C
0032 900000      R     MOV     DPTR,#i+01H
0035 E0                MOVX    A,@DPTR
0036 9F                SUBB    A,R7
0037 900000      R     MOV     DPTR,#i
003A E0                MOVX    A,@DPTR
003B 9E                SUBB    A,R6
003C 5039              JNC     ?C0002
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 43
003E 900000      E     MOV     DPTR,#header+01H
0041 E0                MOVX    A,@DPTR
0042 F4                CPL     A
0043 FF                MOV     R7,A
0044 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 46
0047 120000      E     LCALL   Transmission_GetByte
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 36  

004A 900000      R     MOV     DPTR,#data_to_write
004D EF                MOV     A,R7
004E F0                MOVX    @DPTR,A
004F FD                MOV     R5,A
                                           ; SOURCE LINE # 48
0050 900000      R     MOV     DPTR,#i
0053 E0                MOVX    A,@DPTR
0054 FE                MOV     R6,A
0055 A3                INC     DPTR
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 900000      R     MOV     DPTR,#address_EEPROM+01H
005B E0                MOVX    A,@DPTR
005C 2F                ADD     A,R7
005D FF                MOV     R7,A
005E 900000      R     MOV     DPTR,#address_EEPROM
0061 E0                MOVX    A,@DPTR
0062 3E                ADDC    A,R6
0063 FE                MOV     R6,A
0064 120000      E     LCALL   _Memory_WriteByte
                                           ; SOURCE LINE # 49
0067 900000      R     MOV     DPTR,#i+01H
006A E0                MOVX    A,@DPTR
006B 04                INC     A
006C F0                MOVX    @DPTR,A
006D 70BA              JNZ     ?C0001
006F 900000      R     MOV     DPTR,#i
0072 E0                MOVX    A,@DPTR
0073 04                INC     A
0074 F0                MOVX    @DPTR,A
0075         ?C0323:
0075 80B2              SJMP    ?C0001
0077         ?C0002:
                                           ; SOURCE LINE # 52
0077 E4                CLR     A
0078 FD                MOV     R5,A
0079 FF                MOV     R7,A
007A 020000      E     LJMP    _Response_SetSW
             ; FUNCTION Command_Write (END)

             ; FUNCTION Command_Read (BEGIN)
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 64
0000 900000      E     MOV     DPTR,#header+04H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#length
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 65
000D 900000      E     MOV     DPTR,#header+02H
0010 E0                MOVX    A,@DPTR
0011 FE                MOV     R6,A
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 7C00              MOV     R4,#00H
0016 2400              ADD     A,#00H
0018 FF                MOV     R7,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 37  

0019 EC                MOV     A,R4
001A 3E                ADDC    A,R6
001B 900000      R     MOV     DPTR,#address_EEPROM
001E F0                MOVX    @DPTR,A
001F A3                INC     DPTR
0020 EF                MOV     A,R7
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 68
0022 900000      E     MOV     DPTR,#header+01H
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 70
002A E4                CLR     A
002B 900000      R     MOV     DPTR,#i
002E F0                MOVX    @DPTR,A
002F         ?C0005:
002F 900000      R     MOV     DPTR,#i
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 7E00              MOV     R6,#00H
0036 D3                SETB    C
0037 900000      R     MOV     DPTR,#length+01H
003A E0                MOVX    A,@DPTR
003B 9F                SUBB    A,R7
003C 900000      R     MOV     DPTR,#length
003F E0                MOVX    A,@DPTR
0040 9E                SUBB    A,R6
0041 401F              JC      ?C0006
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
0043 900000      R     MOV     DPTR,#address_EEPROM+01H
0046 E0                MOVX    A,@DPTR
0047 2F                ADD     A,R7
0048 FF                MOV     R7,A
0049 900000      R     MOV     DPTR,#address_EEPROM
004C E0                MOVX    A,@DPTR
004D 3E                ADDC    A,R6
004E FE                MOV     R6,A
004F 120000      E     LCALL   _Memory_ReadByte
0052 900000      R     MOV     DPTR,#data_to_read
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
0057 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 74
005A 900000      R     MOV     DPTR,#i
005D E0                MOVX    A,@DPTR
005E 04                INC     A
005F F0                MOVX    @DPTR,A
0060 80CD              SJMP    ?C0005
0062         ?C0006:
                                           ; SOURCE LINE # 77
0062 E4                CLR     A
0063 FD                MOV     R5,A
0064 FF                MOV     R7,A
0065 020000      E     LJMP    _Response_SetSW
             ; FUNCTION Command_Read (END)

             ; FUNCTION Command_Tes (BEGIN)
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 86
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 38  

0000 900000      E     MOV     DPTR,#header+02H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 7C00              MOV     R4,#00H
0009 2400              ADD     A,#00H
000B FF                MOV     R7,A
000C EC                MOV     A,R4
000D 3E                ADDC    A,R6
000E FE                MOV     R6,A
000F 120000      E     LCALL   _FS_SearchAllFID
0012 900000      R     MOV     DPTR,#result
0015 EE                MOV     A,R6
0016 F0                MOVX    @DPTR,A
0017 A3                INC     DPTR
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
001A 900000      E     MOV     DPTR,#header+01H
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 89
0022 900000      R     MOV     DPTR,#result
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 90
002A 900000      R     MOV     DPTR,#result
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 92
0033 E4                CLR     A
0034 FD                MOV     R5,A
0035 FF                MOV     R7,A
0036 020000      E     LJMP    _Response_SetSW
             ; FUNCTION Command_Tes (END)

             ; FUNCTION Command_ReadSHM (BEGIN)
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 99
0000 900000      E     MOV     DPTR,#header+01H
0003 E0                MOVX    A,@DPTR
0004 F4                CPL     A
0005 FF                MOV     R7,A
0006 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 100
0009 900000      E     MOV     DPTR,#header+03H
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
;---- Variable 'address_SHM' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 101
000E 120000      E     LCALL   _read_data_independent
;---- Variable 'data_to_read' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 102
0011 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 103
0014 E4                CLR     A
0015 FD                MOV     R5,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 39  

0016 FF                MOV     R7,A
0017 020000      E     LJMP    _Response_SetSW
             ; FUNCTION Command_ReadSHM (END)

             ; FUNCTION Command_GetCurrent (BEGIN)
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 139
0000 120000      E     LCALL   State_GetCurrentRecord
0003 900000      R     MOV     DPTR,#record_num
0006 EE                MOV     A,R6
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
000B 120000      E     LCALL   State_GetCurrent
000E 900000      R     MOV     DPTR,#current
0011 EE                MOV     A,R6
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
0016 E0                MOVX    A,@DPTR
0017 25E0              ADD     A,ACC
0019 FF                MOV     R7,A
001A 900000      R     MOV     DPTR,#current
001D E0                MOVX    A,@DPTR
001E 33                RLC     A
001F FE                MOV     R6,A
0020 EF                MOV     A,R7
0021 2419              ADD     A,#019H
0023 FF                MOV     R7,A
0024 EE                MOV     A,R6
0025 3401              ADDC    A,#01H
0027 FE                MOV     R6,A
0028 7B01              MOV     R3,#01H
002A 7A00        R     MOV     R2,#HIGH body
002C 7900        R     MOV     R1,#LOW body
002E 7D02              MOV     R5,#02H
0030 7C00              MOV     R4,#00H
0032 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 142
0035 900000      R     MOV     DPTR,#current+01H
0038 E0                MOVX    A,@DPTR
0039 25E0              ADD     A,ACC
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#current
003F E0                MOVX    A,@DPTR
0040 33                RLC     A
0041 FE                MOV     R6,A
0042 EF                MOV     A,R7
0043 2410              ADD     A,#010H
0045 FF                MOV     R7,A
0046 EE                MOV     A,R6
0047 3401              ADDC    A,#01H
0049 FE                MOV     R6,A
004A 7B01              MOV     R3,#01H
004C 7A00        R     MOV     R2,#HIGH tag
004E 7900        R     MOV     R1,#LOW tag
0050 7D01              MOV     R5,#01H
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 40  

0052 7C00              MOV     R4,#00H
0054 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 143
0057 900000      R     MOV     DPTR,#body+01H
005A E0                MOVX    A,@DPTR
005B 25E0              ADD     A,ACC
005D FF                MOV     R7,A
005E 900000      R     MOV     DPTR,#body
0061 E0                MOVX    A,@DPTR
0062 33                RLC     A
0063 FE                MOV     R6,A
0064 EF                MOV     A,R7
0065 2410              ADD     A,#010H
0067 FF                MOV     R7,A
0068 EE                MOV     A,R6
0069 3401              ADDC    A,#01H
006B FE                MOV     R6,A
006C 7B01              MOV     R3,#01H
006E 7A00        R     MOV     R2,#HIGH structure
0070 7900        R     MOV     R1,#LOW structure
0072 7D01              MOV     R5,#01H
0074 7C00              MOV     R4,#00H
0076 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 144
0079 900000      R     MOV     DPTR,#body+01H
007C E0                MOVX    A,@DPTR
007D 25E0              ADD     A,ACC
007F FF                MOV     R7,A
0080 900000      R     MOV     DPTR,#body
0083 E0                MOVX    A,@DPTR
0084 33                RLC     A
0085 FE                MOV     R6,A
0086 EF                MOV     A,R7
0087 2413              ADD     A,#013H
0089 FF                MOV     R7,A
008A EE                MOV     A,R6
008B 3401              ADDC    A,#01H
008D FE                MOV     R6,A
008E 7B01              MOV     R3,#01H
0090 7A00        R     MOV     R2,#HIGH length
0092 7900        R     MOV     R1,#LOW length
0094 7D02              MOV     R5,#02H
0096 7C00              MOV     R4,#00H
0098 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 145
009B 120000      E     LCALL   FS_GetAC
009E 900000      R     MOV     DPTR,#ac
00A1 EF                MOV     A,R7
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
00A3 900000      R     MOV     DPTR,#body+01H
00A6 E0                MOVX    A,@DPTR
00A7 25E0              ADD     A,ACC
00A9 FF                MOV     R7,A
00AA 900000      R     MOV     DPTR,#body
00AD E0                MOVX    A,@DPTR
00AE 33                RLC     A
00AF FE                MOV     R6,A
00B0 900000      R     MOV     DPTR,#record_num+01H
00B3 E0                MOVX    A,@DPTR
00B4 2F                ADD     A,R7
00B5 FF                MOV     R7,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 41  

00B6 900000      R     MOV     DPTR,#record_num
00B9 E0                MOVX    A,@DPTR
00BA 3E                ADDC    A,R6
00BB CF                XCH     A,R7
00BC 2414              ADD     A,#014H
00BE CF                XCH     A,R7
00BF 3401              ADDC    A,#01H
00C1 FE                MOV     R6,A
00C2 7B01              MOV     R3,#01H
00C4 7A00        R     MOV     R2,#HIGH record_current_addr
00C6 7900        R     MOV     R1,#LOW record_current_addr
00C8 7D01              MOV     R5,#01H
00CA 7C00              MOV     R4,#00H
00CC 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 147
00CF 900000      R     MOV     DPTR,#body+01H
00D2 E0                MOVX    A,@DPTR
00D3 25E0              ADD     A,ACC
00D5 FF                MOV     R7,A
00D6 900000      R     MOV     DPTR,#body
00D9 E0                MOVX    A,@DPTR
00DA 33                RLC     A
00DB FE                MOV     R6,A
00DC EF                MOV     A,R7
00DD 2415              ADD     A,#015H
00DF FF                MOV     R7,A
00E0 EE                MOV     A,R6
00E1 3401              ADDC    A,#01H
00E3 FE                MOV     R6,A
00E4 900000      R     MOV     DPTR,#record_num+01H
00E7 E0                MOVX    A,@DPTR
00E8 2F                ADD     A,R7
00E9 FF                MOV     R7,A
00EA 900000      R     MOV     DPTR,#record_num
00ED E0                MOVX    A,@DPTR
00EE 3E                ADDC    A,R6
00EF FE                MOV     R6,A
00F0 7B01              MOV     R3,#01H
00F2 7A00        R     MOV     R2,#HIGH record_next_addr
00F4 7900        R     MOV     R1,#LOW record_next_addr
00F6 7D01              MOV     R5,#01H
00F8 7C00              MOV     R4,#00H
00FA 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 149
00FD 900000      E     MOV     DPTR,#header+01H
0100 E0                MOVX    A,@DPTR
0101 FF                MOV     R7,A
0102 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 150
0105 900000      R     MOV     DPTR,#current
0108 E0                MOVX    A,@DPTR
0109 FF                MOV     R7,A
010A 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 151
010D 900000      R     MOV     DPTR,#current
0110 A3                INC     DPTR
0111 E0                MOVX    A,@DPTR
0112 FF                MOV     R7,A
0113 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 152
0116 900000      R     MOV     DPTR,#body
0119 E0                MOVX    A,@DPTR
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 42  

011A FF                MOV     R7,A
011B 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 153
011E 900000      R     MOV     DPTR,#body
0121 A3                INC     DPTR
0122 E0                MOVX    A,@DPTR
0123 FF                MOV     R7,A
0124 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 154
0127 900000      R     MOV     DPTR,#length
012A E0                MOVX    A,@DPTR
012B FF                MOV     R7,A
012C 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 155
012F 900000      R     MOV     DPTR,#length
0132 A3                INC     DPTR
0133 E0                MOVX    A,@DPTR
0134 FF                MOV     R7,A
0135 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 156
0138 900000      R     MOV     DPTR,#record_current_addr
013B E0                MOVX    A,@DPTR
013C FF                MOV     R7,A
013D 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 157
0140 900000      R     MOV     DPTR,#record_next_addr
0143 E0                MOVX    A,@DPTR
0144 FF                MOV     R7,A
0145 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 158
0148 900000      R     MOV     DPTR,#structure
014B E0                MOVX    A,@DPTR
014C FF                MOV     R7,A
014D 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 159
0150 900000      R     MOV     DPTR,#tag
0153 E0                MOVX    A,@DPTR
0154 FF                MOV     R7,A
0155 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 160
0158 900000      R     MOV     DPTR,#record_num
015B A3                INC     DPTR
015C E0                MOVX    A,@DPTR
015D FF                MOV     R7,A
015E 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 163
0161 E4                CLR     A
0162 FD                MOV     R5,A
0163 FF                MOV     R7,A
0164 020000      E     LJMP    _Response_SetSW
             ; FUNCTION Command_GetCurrent (END)

             ; FUNCTION Command_GetSecurity (BEGIN)
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 170
0000 900000      E     MOV     DPTR,#header+01H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 171
0008 120000      E     LCALL   State_GetCurrentSecurity
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 43  

;---- Variable 'security' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 172
000B 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 174
000E 900000      E     MOV     DPTR,#header+04H
0011 E0                MOVX    A,@DPTR
0012 D3                SETB    C
0013 9401              SUBB    A,#01H
0015 4006              JC      ?C0012
                                           ; SOURCE LINE # 175
0017 120000      E     LCALL   FS_GetAC
;---- Variable 'acread' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 176
001A 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 177
001D         ?C0012:
                                           ; SOURCE LINE # 179
001D E4                CLR     A
001E FD                MOV     R5,A
001F FF                MOV     R7,A
0020 020000      E     LJMP    _Response_SetSW
             ; FUNCTION Command_GetSecurity (END)

             ; FUNCTION Command_Format (BEGIN)
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 184
0000 120000      E     LCALL   FSFormat
0003 EF                MOV     A,R7
0004 4E                ORL     A,R6
0005 7003              JNZ     ?C0015
0007 D3                SETB    C
0008 8001              SJMP    ?C0016
000A         ?C0015:
000A C3                CLR     C
000B         ?C0016:
000B E4                CLR     A
000C FD                MOV     R5,A
000D 4004              JC      ?C0014
                                           ; SOURCE LINE # 185
000F 7F29              MOV     R7,#029H
0011 8001              SJMP    ?C0349
                                           ; SOURCE LINE # 187
0013         ?C0014:
                                           ; SOURCE LINE # 189
0013 FF                MOV     R7,A
0014         ?C0349:
0014 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 190
0017         ?C0017:
0017 22                RET     
             ; FUNCTION Command_Format (END)

             ; FUNCTION Command_Encrypt (BEGIN)
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 196
0000 900000      E     MOV     DPTR,#header+04H
0003 E0                MOVX    A,@DPTR
0004 6408              XRL     A,#08H
0006 6003              JZ      $ + 5H
0008 020000      R     LJMP    ?C0018
                                           ; SOURCE LINE # 197
000B 900000      R     MOV     DPTR,#i
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 44  

000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 F0                MOVX    @DPTR,A
0011         ?C0019:
0011 900000      E     MOV     DPTR,#header+04H
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 C3                CLR     C
0017 900000      R     MOV     DPTR,#i+01H
001A E0                MOVX    A,@DPTR
001B 9F                SUBB    A,R7
001C 900000      R     MOV     DPTR,#i
001F E0                MOVX    A,@DPTR
0020 9400              SUBB    A,#00H
0022 5057              JNC     ?C0020
                                           ; SOURCE LINE # 198
0024 900000      E     MOV     DPTR,#header+01H
0027 E0                MOVX    A,@DPTR
0028 F4                CPL     A
0029 FF                MOV     R7,A
002A 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 200
002D 120000      E     LCALL   Transmission_GetByte
0030 900000      R     MOV     DPTR,#temp
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
0035 FE                MOV     R6,A
                                           ; SOURCE LINE # 201
0036 900000      R     MOV     DPTR,#i
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B 2462              ADD     A,#062H
003D FF                MOV     R7,A
003E EE                MOV     A,R6
003F FD                MOV     R5,A
0040 7C00              MOV     R4,#00H
0042 120000      E     LCALL   _write_data_independent
                                           ; SOURCE LINE # 202
0045 900000      R     MOV     DPTR,#i+01H
0048 E0                MOVX    A,@DPTR
0049 2427              ADD     A,#027H
004B FF                MOV     R7,A
004C 900000      R     MOV     DPTR,#i
004F E0                MOVX    A,@DPTR
0050 3400              ADDC    A,#00H
0052 FE                MOV     R6,A
0053 120000      E     LCALL   _Memory_ReadByte
0056 900000      R     MOV     DPTR,#temp
0059 EF                MOV     A,R7
005A F0                MOVX    @DPTR,A
005B FE                MOV     R6,A
                                           ; SOURCE LINE # 203
005C 900000      R     MOV     DPTR,#i
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 245A              ADD     A,#05AH
0063 FF                MOV     R7,A
0064 EE                MOV     A,R6
0065 FD                MOV     R5,A
0066 7C00              MOV     R4,#00H
0068 120000      E     LCALL   _write_data_independent
                                           ; SOURCE LINE # 204
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 45  

006B 900000      R     MOV     DPTR,#i+01H
006E E0                MOVX    A,@DPTR
006F 04                INC     A
0070 F0                MOVX    @DPTR,A
0071 709E              JNZ     ?C0019
0073 900000      R     MOV     DPTR,#i
0076 E0                MOVX    A,@DPTR
0077 04                INC     A
0078 F0                MOVX    @DPTR,A
0079         ?C0324:
0079 8096              SJMP    ?C0019
007B         ?C0020:
                                           ; SOURCE LINE # 205
007B 120000      E     LCALL   BC3_encrypt_k_sequential
                                           ; SOURCE LINE # 206
007E 900000      R     MOV     DPTR,#resplen
0081 7408              MOV     A,#08H
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
0084 E4                CLR     A
0085 900000      R     MOV     DPTR,#i
0088 F0                MOVX    @DPTR,A
0089 A3                INC     DPTR
008A F0                MOVX    @DPTR,A
008B         ?C0022:
008B 900000      R     MOV     DPTR,#resplen
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 C3                CLR     C
0091 900000      R     MOV     DPTR,#i+01H
0094 E0                MOVX    A,@DPTR
0095 9F                SUBB    A,R7
0096 900000      R     MOV     DPTR,#i
0099 E0                MOVX    A,@DPTR
009A 9400              SUBB    A,#00H
009C 5043              JNC     ?C0023
                                           ; SOURCE LINE # 208
009E A3                INC     DPTR
009F E0                MOVX    A,@DPTR
00A0 24AA              ADD     A,#0AAH
00A2 FF                MOV     R7,A
00A3 120000      E     LCALL   _read_data_sequential
00A6 900000      R     MOV     DPTR,#i
00A9 E0                MOVX    A,@DPTR
00AA FC                MOV     R4,A
00AB A3                INC     DPTR
00AC E0                MOVX    A,@DPTR
00AD FD                MOV     R5,A
00AE FB                MOV     R3,A
00AF 2400        R     ADD     A,#LOW response
00B1 F582              MOV     DPL,A
00B3 E4                CLR     A
00B4 3400        R     ADDC    A,#HIGH response
00B6 F583              MOV     DPH,A
00B8 EF                MOV     A,R7
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
00BA ED                MOV     A,R5
00BB 24AA              ADD     A,#0AAH
00BD FF                MOV     R7,A
00BE EC                MOV     A,R4
00BF 3401              ADDC    A,#01H
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 46  

00C1 FE                MOV     R6,A
00C2 7400        R     MOV     A,#LOW response
00C4 2B                ADD     A,R3
00C5 F582              MOV     DPL,A
00C7 E4                CLR     A
00C8 3400        R     ADDC    A,#HIGH response
00CA F583              MOV     DPH,A
00CC E0                MOVX    A,@DPTR
00CD FD                MOV     R5,A
00CE 120000      E     LCALL   _Memory_WriteByte
                                           ; SOURCE LINE # 210
00D1 900000      R     MOV     DPTR,#i+01H
00D4 E0                MOVX    A,@DPTR
00D5 04                INC     A
00D6 F0                MOVX    @DPTR,A
00D7 70B2              JNZ     ?C0022
00D9 900000      R     MOV     DPTR,#i
00DC E0                MOVX    A,@DPTR
00DD 04                INC     A
00DE F0                MOVX    @DPTR,A
00DF         ?C0325:
00DF 80AA              SJMP    ?C0022
00E1         ?C0023:
                                           ; SOURCE LINE # 211
00E1 E4                CLR     A
00E2 900000      R     MOV     DPTR,#i
00E5 F0                MOVX    @DPTR,A
00E6 A3                INC     DPTR
00E7 F0                MOVX    @DPTR,A
00E8         ?C0025:
00E8 900000      E     MOV     DPTR,#header+04H
00EB E0                MOVX    A,@DPTR
00EC FF                MOV     R7,A
00ED 900000      R     MOV     DPTR,#i
00F0 E0                MOVX    A,@DPTR
00F1 FC                MOV     R4,A
00F2 A3                INC     DPTR
00F3 E0                MOVX    A,@DPTR
00F4 FD                MOV     R5,A
00F5 C3                CLR     C
00F6 9F                SUBB    A,R7
00F7 EC                MOV     A,R4
00F8 9400              SUBB    A,#00H
00FA 504D              JNC     ?C0026
                                           ; SOURCE LINE # 212
00FC AE05              MOV     R6,AR5
00FE EE                MOV     A,R6
00FF 2462              ADD     A,#062H
0101 FF                MOV     R7,A
0102 7400        R     MOV     A,#LOW response
0104 2E                ADD     A,R6
0105 F582              MOV     DPL,A
0107 E4                CLR     A
0108 3400        R     ADDC    A,#HIGH response
010A F583              MOV     DPH,A
010C E0                MOVX    A,@DPTR
010D FD                MOV     R5,A
010E 7C00              MOV     R4,#00H
0110 120000      E     LCALL   _write_data_independent
                                           ; SOURCE LINE # 213
0113 900000      R     MOV     DPTR,#i+01H
0116 E0                MOVX    A,@DPTR
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 47  

0117 2427              ADD     A,#027H
0119 FF                MOV     R7,A
011A 900000      R     MOV     DPTR,#i
011D E0                MOVX    A,@DPTR
011E 3400              ADDC    A,#00H
0120 FE                MOV     R6,A
0121 120000      E     LCALL   _Memory_ReadByte
0124 900000      R     MOV     DPTR,#temp
0127 EF                MOV     A,R7
0128 F0                MOVX    @DPTR,A
0129 FE                MOV     R6,A
                                           ; SOURCE LINE # 214
012A 900000      R     MOV     DPTR,#i
012D A3                INC     DPTR
012E E0                MOVX    A,@DPTR
012F 245A              ADD     A,#05AH
0131 FF                MOV     R7,A
0132 EE                MOV     A,R6
0133 FD                MOV     R5,A
0134 7C00              MOV     R4,#00H
0136 120000      E     LCALL   _write_data_independent
                                           ; SOURCE LINE # 215
0139 900000      R     MOV     DPTR,#i+01H
013C E0                MOVX    A,@DPTR
013D 04                INC     A
013E F0                MOVX    @DPTR,A
013F 70A7              JNZ     ?C0025
0141 900000      R     MOV     DPTR,#i
0144 E0                MOVX    A,@DPTR
0145 04                INC     A
0146 F0                MOVX    @DPTR,A
0147         ?C0326:
0147 809F              SJMP    ?C0025
0149         ?C0026:
                                           ; SOURCE LINE # 216
0149 120000      E     LCALL   BC3_decrypt_k_sequential
                                           ; SOURCE LINE # 217
014C 900000      R     MOV     DPTR,#resplen
014F 7408              MOV     A,#08H
0151 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
0152 E4                CLR     A
0153 900000      R     MOV     DPTR,#i
0156 F0                MOVX    @DPTR,A
0157 A3                INC     DPTR
0158 F0                MOVX    @DPTR,A
0159         ?C0028:
0159 900000      R     MOV     DPTR,#resplen
015C E0                MOVX    A,@DPTR
015D FF                MOV     R7,A
015E 900000      R     MOV     DPTR,#i
0161 E0                MOVX    A,@DPTR
0162 FC                MOV     R4,A
0163 A3                INC     DPTR
0164 E0                MOVX    A,@DPTR
0165 FD                MOV     R5,A
0166 C3                CLR     C
0167 9F                SUBB    A,R7
0168 EC                MOV     A,R4
0169 9400              SUBB    A,#00H
016B 5027              JNC     ?C0018
                                           ; SOURCE LINE # 219
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 48  

016D ED                MOV     A,R5
016E 24AA              ADD     A,#0AAH
0170 FF                MOV     R7,A
0171 120000      E     LCALL   _read_data_sequential
0174 900000      R     MOV     DPTR,#i
0177 A3                INC     DPTR
0178 E0                MOVX    A,@DPTR
0179 2400        R     ADD     A,#LOW response+08H
017B F582              MOV     DPL,A
017D E4                CLR     A
017E 3400        R     ADDC    A,#HIGH response+08H
0180 F583              MOV     DPH,A
0182 EF                MOV     A,R7
0183 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
0184 900000      R     MOV     DPTR,#i+01H
0187 E0                MOVX    A,@DPTR
0188 04                INC     A
0189 F0                MOVX    @DPTR,A
018A 70CD              JNZ     ?C0028
018C 900000      R     MOV     DPTR,#i
018F E0                MOVX    A,@DPTR
0190 04                INC     A
0191 F0                MOVX    @DPTR,A
0192         ?C0327:
0192 80C5              SJMP    ?C0028
                                           ; SOURCE LINE # 221
0194         ?C0018:
                                           ; SOURCE LINE # 223
0194 900000      E     MOV     DPTR,#header+04H
0197 E0                MOVX    A,@DPTR
0198 645A              XRL     A,#05AH
019A 6003              JZ      $ + 5H
019C 020000      R     LJMP    ?C0031
                                           ; SOURCE LINE # 224
019F 900000      R     MOV     DPTR,#i
01A2 F0                MOVX    @DPTR,A
01A3 A3                INC     DPTR
01A4 F0                MOVX    @DPTR,A
01A5         ?C0032:
                                           ; SOURCE LINE # 225
01A5 900000      E     MOV     DPTR,#header+01H
01A8 E0                MOVX    A,@DPTR
01A9 F4                CPL     A
01AA FF                MOV     R7,A
01AB 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 226
01AE 120000      E     LCALL   Transmission_GetByte
01B1 900000      R     MOV     DPTR,#temp
01B4 EF                MOV     A,R7
01B5 F0                MOVX    @DPTR,A
01B6 FE                MOV     R6,A
                                           ; SOURCE LINE # 227
01B7 900000      R     MOV     DPTR,#i
01BA A3                INC     DPTR
01BB E0                MOVX    A,@DPTR
01BC FF                MOV     R7,A
01BD EE                MOV     A,R6
01BE FD                MOV     R5,A
01BF 7C00              MOV     R4,#00H
01C1 120000      E     LCALL   _write_data_independent
                                           ; SOURCE LINE # 228
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 49  

01C4 900000      R     MOV     DPTR,#i+01H
01C7 E0                MOVX    A,@DPTR
01C8 04                INC     A
01C9 F0                MOVX    @DPTR,A
01CA 7006              JNZ     ?C0328
01CC 900000      R     MOV     DPTR,#i
01CF E0                MOVX    A,@DPTR
01D0 04                INC     A
01D1 F0                MOVX    @DPTR,A
01D2         ?C0328:
01D2 C3                CLR     C
01D3 900000      R     MOV     DPTR,#i+01H
01D6 E0                MOVX    A,@DPTR
01D7 943C              SUBB    A,#03CH
01D9 900000      R     MOV     DPTR,#i
01DC E0                MOVX    A,@DPTR
01DD 9400              SUBB    A,#00H
01DF 40C4              JC      ?C0032
01E1         ?C0033:
                                           ; SOURCE LINE # 230
01E1 E4                CLR     A
01E2 900000      R     MOV     DPTR,#i
01E5 F0                MOVX    @DPTR,A
01E6 A3                INC     DPTR
01E7 F0                MOVX    @DPTR,A
01E8         ?C0035:
                                           ; SOURCE LINE # 231
01E8 900000      E     MOV     DPTR,#header+01H
01EB E0                MOVX    A,@DPTR
01EC F4                CPL     A
01ED FF                MOV     R7,A
01EE 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 232
01F1 120000      E     LCALL   Transmission_GetByte
01F4 900000      R     MOV     DPTR,#temp
01F7 EF                MOV     A,R7
01F8 F0                MOVX    @DPTR,A
01F9 FE                MOV     R6,A
                                           ; SOURCE LINE # 233
01FA 900000      R     MOV     DPTR,#i
01FD A3                INC     DPTR
01FE E0                MOVX    A,@DPTR
01FF 243C              ADD     A,#03CH
0201 FF                MOV     R7,A
0202 EE                MOV     A,R6
0203 FD                MOV     R5,A
0204 7C00              MOV     R4,#00H
0206 120000      E     LCALL   _write_data_independent
                                           ; SOURCE LINE # 234
0209 900000      R     MOV     DPTR,#i+01H
020C E0                MOVX    A,@DPTR
020D 2494              ADD     A,#094H
020F FF                MOV     R7,A
0210 900000      R     MOV     DPTR,#i
0213 E0                MOVX    A,@DPTR
0214 3400              ADDC    A,#00H
0216 FE                MOV     R6,A
0217 900000      R     MOV     DPTR,#temp
021A E0                MOVX    A,@DPTR
021B FD                MOV     R5,A
021C 120000      E     LCALL   _Memory_WriteByte
                                           ; SOURCE LINE # 235
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 50  

021F 900000      R     MOV     DPTR,#i+01H
0222 E0                MOVX    A,@DPTR
0223 04                INC     A
0224 F0                MOVX    @DPTR,A
0225 7006              JNZ     ?C0329
0227 900000      R     MOV     DPTR,#i
022A E0                MOVX    A,@DPTR
022B 04                INC     A
022C F0                MOVX    @DPTR,A
022D         ?C0329:
022D C3                CLR     C
022E 900000      R     MOV     DPTR,#i+01H
0231 E0                MOVX    A,@DPTR
0232 941E              SUBB    A,#01EH
0234 900000      R     MOV     DPTR,#i
0237 E0                MOVX    A,@DPTR
0238 9400              SUBB    A,#00H
023A 40AC              JC      ?C0035
023C         ?C0036:
                                           ; SOURCE LINE # 236
023C 120000      E     LCALL   ECC_sequential
                                           ; SOURCE LINE # 237
023F E4                CLR     A
0240 900000      R     MOV     DPTR,#i
0243 F0                MOVX    @DPTR,A
0244 A3                INC     DPTR
0245 F0                MOVX    @DPTR,A
0246         ?C0038:
0246 900000      R     MOV     DPTR,#i
0249 E0                MOVX    A,@DPTR
024A FE                MOV     R6,A
024B A3                INC     DPTR
024C E0                MOVX    A,@DPTR
024D FF                MOV     R7,A
024E C3                CLR     C
024F 943C              SUBB    A,#03CH
0251 EE                MOV     A,R6
0252 9400              SUBB    A,#00H
0254 5042              JNC     ?C0031
                                           ; SOURCE LINE # 238
0256 EF                MOV     A,R7
0257 24B2              ADD     A,#0B2H
0259 FF                MOV     R7,A
025A 120000      E     LCALL   _read_data_sequential
025D 900000      R     MOV     DPTR,#i
0260 E0                MOVX    A,@DPTR
0261 FC                MOV     R4,A
0262 A3                INC     DPTR
0263 E0                MOVX    A,@DPTR
0264 FD                MOV     R5,A
0265 FB                MOV     R3,A
0266 2400        R     ADD     A,#LOW response
0268 F582              MOV     DPL,A
026A E4                CLR     A
026B 3400        R     ADDC    A,#HIGH response
026D F583              MOV     DPH,A
026F EF                MOV     A,R7
0270 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
0271 ED                MOV     A,R5
0272 24B2              ADD     A,#0B2H
0274 FF                MOV     R7,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 51  

0275 EC                MOV     A,R4
0276 3401              ADDC    A,#01H
0278 FE                MOV     R6,A
0279 7400        R     MOV     A,#LOW response
027B 2B                ADD     A,R3
027C F582              MOV     DPL,A
027E E4                CLR     A
027F 3400        R     ADDC    A,#HIGH response
0281 F583              MOV     DPH,A
0283 E0                MOVX    A,@DPTR
0284 FD                MOV     R5,A
0285 120000      E     LCALL   _Memory_WriteByte
                                           ; SOURCE LINE # 240
0288 900000      R     MOV     DPTR,#i+01H
028B E0                MOVX    A,@DPTR
028C 04                INC     A
028D F0                MOVX    @DPTR,A
028E 70B6              JNZ     ?C0038
0290 900000      R     MOV     DPTR,#i
0293 E0                MOVX    A,@DPTR
0294 04                INC     A
0295 F0                MOVX    @DPTR,A
0296         ?C0330:
0296 80AE              SJMP    ?C0038
                                           ; SOURCE LINE # 241
0298         ?C0031:
                                           ; SOURCE LINE # 243
0298 900000      E     MOV     DPTR,#header+04H
029B E0                MOVX    A,@DPTR
029C 6440              XRL     A,#040H
029E 6003              JZ      $ + 5H
02A0 020000      R     LJMP    ?C0041
                                           ; SOURCE LINE # 244
02A3 900000      R     MOV     DPTR,#i
02A6 F0                MOVX    @DPTR,A
02A7 A3                INC     DPTR
02A8 F0                MOVX    @DPTR,A
02A9         ?C0042:
                                           ; SOURCE LINE # 245
02A9 900000      E     MOV     DPTR,#header+01H
02AC E0                MOVX    A,@DPTR
02AD F4                CPL     A
02AE FF                MOV     R7,A
02AF 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 246
02B2 120000      E     LCALL   Transmission_GetByte
02B5 900000      R     MOV     DPTR,#temp
02B8 EF                MOV     A,R7
02B9 F0                MOVX    @DPTR,A
02BA FE                MOV     R6,A
                                           ; SOURCE LINE # 247
02BB 900000      R     MOV     DPTR,#i
02BE A3                INC     DPTR
02BF E0                MOVX    A,@DPTR
02C0 246A              ADD     A,#06AH
02C2 FF                MOV     R7,A
02C3 EE                MOV     A,R6
02C4 FD                MOV     R5,A
02C5 7C00              MOV     R4,#00H
02C7 120000      E     LCALL   _write_data_independent
                                           ; SOURCE LINE # 248
02CA 900000      R     MOV     DPTR,#i+01H
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 52  

02CD E0                MOVX    A,@DPTR
02CE 04                INC     A
02CF F0                MOVX    @DPTR,A
02D0 7006              JNZ     ?C0331
02D2 900000      R     MOV     DPTR,#i
02D5 E0                MOVX    A,@DPTR
02D6 04                INC     A
02D7 F0                MOVX    @DPTR,A
02D8         ?C0331:
02D8 C3                CLR     C
02D9 900000      R     MOV     DPTR,#i+01H
02DC E0                MOVX    A,@DPTR
02DD 9440              SUBB    A,#040H
02DF 900000      R     MOV     DPTR,#i
02E2 E0                MOVX    A,@DPTR
02E3 9400              SUBB    A,#00H
02E5 40C2              JC      ?C0042
02E7         ?C0043:
                                           ; SOURCE LINE # 249
02E7 120000      E     LCALL   HASH_sequential
                                           ; SOURCE LINE # 250
02EA E4                CLR     A
02EB 900000      R     MOV     DPTR,#i
02EE F0                MOVX    @DPTR,A
02EF A3                INC     DPTR
02F0 F0                MOVX    @DPTR,A
02F1         ?C0045:
02F1 900000      R     MOV     DPTR,#i
02F4 E0                MOVX    A,@DPTR
02F5 FE                MOV     R6,A
02F6 A3                INC     DPTR
02F7 E0                MOVX    A,@DPTR
02F8 FF                MOV     R7,A
02F9 C3                CLR     C
02FA 9420              SUBB    A,#020H
02FC EE                MOV     A,R6
02FD 9400              SUBB    A,#00H
02FF 502E              JNC     ?C0041
                                           ; SOURCE LINE # 251
0301 EF                MOV     A,R7
0302 248A              ADD     A,#08AH
0304 FF                MOV     R7,A
0305 120000      E     LCALL   _read_data_sequential
0308 900000      R     MOV     DPTR,#temp
030B EF                MOV     A,R7
030C F0                MOVX    @DPTR,A
030D FD                MOV     R5,A
                                           ; SOURCE LINE # 252
030E 900000      R     MOV     DPTR,#i+01H
0311 E0                MOVX    A,@DPTR
0312 246A              ADD     A,#06AH
0314 FF                MOV     R7,A
0315 900000      R     MOV     DPTR,#i
0318 E0                MOVX    A,@DPTR
0319 3401              ADDC    A,#01H
031B FE                MOV     R6,A
031C 120000      E     LCALL   _Memory_WriteByte
                                           ; SOURCE LINE # 253
031F 900000      R     MOV     DPTR,#i+01H
0322 E0                MOVX    A,@DPTR
0323 04                INC     A
0324 F0                MOVX    @DPTR,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 53  

0325 70CA              JNZ     ?C0045
0327 900000      R     MOV     DPTR,#i
032A E0                MOVX    A,@DPTR
032B 04                INC     A
032C F0                MOVX    @DPTR,A
032D         ?C0332:
032D 80C2              SJMP    ?C0045
                                           ; SOURCE LINE # 254
032F         ?C0041:
                                           ; SOURCE LINE # 256
032F E4                CLR     A
0330 FD                MOV     R5,A
0331 FF                MOV     R7,A
0332 020000      E     LJMP    _Response_SetSW
             ; FUNCTION Command_Encrypt (END)

             ; FUNCTION Command_GetCurrentChallenge (BEGIN)
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 262
0000 900000      E     MOV     DPTR,#header+04H
0003 E0                MOVX    A,@DPTR
0004 B40803            CJNE    A,#08H,?C0050
0007 D3                SETB    C
0008 8001              SJMP    ?C0051
000A         ?C0050:
000A C3                CLR     C
000B         ?C0051:
000B 4006              JC      ?C0049
                                           ; SOURCE LINE # 263
000D E4                CLR     A
000E FD                MOV     R5,A
000F 7F0C              MOV     R7,#0CH
0011 8034              SJMP    ?C0350
                                           ; SOURCE LINE # 265
0013         ?C0049:
                                           ; SOURCE LINE # 268
0013 900000      E     MOV     DPTR,#header+01H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 269
001B 120000      E     LCALL   State_GetCurrentChallenge
                                           ; SOURCE LINE # 271
001E E4                CLR     A
001F 900000      R     MOV     DPTR,#i
0022 F0                MOVX    @DPTR,A
0023         ?C0053:
0023 900000      R     MOV     DPTR,#i
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 C3                CLR     C
0029 9408              SUBB    A,#08H
002B 5017              JNC     ?C0054
                                           ; SOURCE LINE # 272
002D 7400        R     MOV     A,#LOW buf
002F 2F                ADD     A,R7
0030 F582              MOV     DPL,A
0032 E4                CLR     A
0033 3400        R     ADDC    A,#HIGH buf
0035 F583              MOV     DPH,A
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 54  

0039 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 273
003C 900000      R     MOV     DPTR,#i
003F E0                MOVX    A,@DPTR
0040 04                INC     A
0041 F0                MOVX    @DPTR,A
0042 80DF              SJMP    ?C0053
0044         ?C0054:
                                           ; SOURCE LINE # 274
0044 E4                CLR     A
0045 FD                MOV     R5,A
0046 FF                MOV     R7,A
0047         ?C0350:
0047 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 275
004A         ?C0052:
004A 22                RET     
             ; FUNCTION Command_GetCurrentChallenge (END)

             ; FUNCTION Command_CreateFile (BEGIN)
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 288
0000 900000      E     MOV     DPTR,#header+01H
0003 E0                MOVX    A,@DPTR
0004 F4                CPL     A
0005 FF                MOV     R7,A
0006 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 289
0009 120000      E     LCALL   Transmission_GetByte
000C EF                MOV     A,R7
000D 33                RLC     A
000E 95E0              SUBB    A,ACC
0010 900000      R     MOV     DPTR,#rfu1
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 290
0015 900000      E     MOV     DPTR,#header+01H
0018 E0                MOVX    A,@DPTR
0019 F4                CPL     A
001A FF                MOV     R7,A
001B 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 291
001E 120000      E     LCALL   Transmission_GetByte
0021 EF                MOV     A,R7
0022 33                RLC     A
0023 95E0              SUBB    A,ACC
0025 900000      R     MOV     DPTR,#rfu2
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
002A 900000      E     MOV     DPTR,#header+01H
002D E0                MOVX    A,@DPTR
002E F4                CPL     A
002F FF                MOV     R7,A
0030 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 295
0033 120000      E     LCALL   Transmission_GetByte
0036 EF                MOV     A,R7
0037 33                RLC     A
0038 95E0              SUBB    A,ACC
003A EF                MOV     A,R7
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 55  

003B 900000      R     MOV     DPTR,#file_size
003E F0                MOVX    @DPTR,A
003F A3                INC     DPTR
0040 E4                CLR     A
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0042 900000      E     MOV     DPTR,#header+01H
0045 E0                MOVX    A,@DPTR
0046 F4                CPL     A
0047 FF                MOV     R7,A
0048 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 297
004B 120000      E     LCALL   Transmission_GetByte
004E EF                MOV     A,R7
004F 33                RLC     A
0050 95E0              SUBB    A,ACC
0052 FE                MOV     R6,A
0053 900000      R     MOV     DPTR,#file_size
0056 E0                MOVX    A,@DPTR
0057 4E                ORL     A,R6
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A E0                MOVX    A,@DPTR
005B 4F                ORL     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
005D 900000      E     MOV     DPTR,#header+01H
0060 E0                MOVX    A,@DPTR
0061 F4                CPL     A
0062 FF                MOV     R7,A
0063 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 301
0066 120000      E     LCALL   Transmission_GetByte
0069 EF                MOV     A,R7
006A 33                RLC     A
006B 95E0              SUBB    A,ACC
006D EF                MOV     A,R7
006E 900000      R     MOV     DPTR,#fid
0071 F0                MOVX    @DPTR,A
0072 A3                INC     DPTR
0073 E4                CLR     A
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 302
0075 900000      E     MOV     DPTR,#header+01H
0078 E0                MOVX    A,@DPTR
0079 F4                CPL     A
007A FF                MOV     R7,A
007B 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 303
007E 120000      E     LCALL   Transmission_GetByte
0081 EF                MOV     A,R7
0082 33                RLC     A
0083 95E0              SUBB    A,ACC
0085 FE                MOV     R6,A
0086 900000      R     MOV     DPTR,#fid
0089 E0                MOVX    A,@DPTR
008A 4E                ORL     A,R6
008B F0                MOVX    @DPTR,A
008C A3                INC     DPTR
008D E0                MOVX    A,@DPTR
008E 4F                ORL     A,R7
008F F0                MOVX    @DPTR,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 56  

                                           ; SOURCE LINE # 306
0090 900000      E     MOV     DPTR,#header+01H
0093 E0                MOVX    A,@DPTR
0094 F4                CPL     A
0095 FF                MOV     R7,A
0096 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 307
0099 120000      E     LCALL   Transmission_GetByte
009C EF                MOV     A,R7
009D 33                RLC     A
009E 95E0              SUBB    A,ACC
00A0 900000      R     MOV     DPTR,#filetype
00A3 EF                MOV     A,R7
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
00A5 900000      E     MOV     DPTR,#header+01H
00A8 E0                MOVX    A,@DPTR
00A9 F4                CPL     A
00AA FF                MOV     R7,A
00AB 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 311
00AE 120000      E     LCALL   Transmission_GetByte
00B1 EF                MOV     A,R7
00B2 33                RLC     A
00B3 95E0              SUBB    A,ACC
00B5 900000      R     MOV     DPTR,#ac
00B8 EF                MOV     A,R7
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 314
00BA 120000      E     LCALL   State_GetCurrentSecurity
00BD EF                MOV     A,R7
00BE C3                CLR     C
00BF 9401              SUBB    A,#01H
00C1 4003              JC      ?C0057
00C3 D3                SETB    C
00C4 8001              SJMP    ?C0058
00C6         ?C0057:
00C6 C3                CLR     C
00C7         ?C0058:
00C7 4007              JC      ?C0056
                                           ; SOURCE LINE # 315
00C9 E4                CLR     A
00CA FD                MOV     R5,A
00CB 7F14              MOV     R7,#014H
00CD 020000      R     LJMP    ?C0358
                                           ; SOURCE LINE # 317
00D0         ?C0056:
                                           ; SOURCE LINE # 320
00D0 900000      R     MOV     DPTR,#filetype
00D3 E0                MOVX    A,@DPTR
00D4 FF                MOV     R7,A
00D5 B43808            CJNE    A,#038H,?C0060
                                           ; SOURCE LINE # 321
00D8 900000      R     MOV     DPTR,#tag
00DB 744F              MOV     A,#04FH
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 322
00DE 8020              SJMP    ?C0061
00E0         ?C0060:
                                           ; SOURCE LINE # 323
00E0 EF                MOV     A,R7
00E1 6401              XRL     A,#01H
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 57  

00E3 600E              JZ      ?C0063
00E5 EF                MOV     A,R7
00E6 6402              XRL     A,#02H
00E8 6009              JZ      ?C0063
00EA EF                MOV     A,R7
00EB 6404              XRL     A,#04H
00ED 6004              JZ      ?C0063
00EF EF                MOV     A,R7
00F0 B40608            CJNE    A,#06H,?C0062
00F3         ?C0063:
                                           ; SOURCE LINE # 324
00F3 900000      R     MOV     DPTR,#tag
00F6 745F              MOV     A,#05FH
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
00F9 8005              SJMP    ?C0061
00FB         ?C0062:
                                           ; SOURCE LINE # 326
00FB E4                CLR     A
00FC 900000      R     MOV     DPTR,#tag
00FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
0100         ?C0061:
                                           ; SOURCE LINE # 329
0100 900000      R     MOV     DPTR,#tag
0103 E0                MOVX    A,@DPTR
0104 FF                MOV     R7,A
0105 24A1              ADD     A,#0A1H
0107 6021              JZ      ?C0067
0109 2410              ADD     A,#010H
010B 6003              JZ      $ + 5H
010D 020000      R     LJMP    ?C0074
                                           ; SOURCE LINE # 330
0110         ?C0066:
                                           ; SOURCE LINE # 331
0110 900000      R     MOV     DPTR,#fid
0113 E0                MOVX    A,@DPTR
0114 FD                MOV     R5,A
0115 A3                INC     DPTR
0116 E0                MOVX    A,@DPTR
0117 900000      R     MOV     DPTR,#df
011A CD                XCH     A,R5
011B F0                MOVX    @DPTR,A
011C A3                INC     DPTR
011D ED                MOV     A,R5
011E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 332
011F 7E00              MOV     R6,#00H
0121 7B01              MOV     R3,#01H
0123 7A00        R     MOV     R2,#HIGH df
0125 7900        R     MOV     R1,#LOW df
                                           ; SOURCE LINE # 333
0127 020000      R     LJMP    ?C0352
                                           ; SOURCE LINE # 334
012A         ?C0067:
                                           ; SOURCE LINE # 335
012A 900000      R     MOV     DPTR,#fid
012D E0                MOVX    A,@DPTR
012E FF                MOV     R7,A
012F A3                INC     DPTR
0130 E0                MOVX    A,@DPTR
0131 900000      R     MOV     DPTR,#ef
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 58  

0134 CF                XCH     A,R7
0135 F0                MOVX    @DPTR,A
0136 A3                INC     DPTR
0137 EF                MOV     A,R7
0138 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 336
0139 E4                CLR     A
013A 900000      R     MOV     DPTR,#ef+03H
013D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 337
013E 900000      R     MOV     DPTR,#ac
0141 E0                MOVX    A,@DPTR
0142 900000      R     MOV     DPTR,#ef+04H
0145 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
0146 900000      R     MOV     DPTR,#file_size
0149 E0                MOVX    A,@DPTR
014A FF                MOV     R7,A
014B A3                INC     DPTR
014C E0                MOVX    A,@DPTR
014D 900000      R     MOV     DPTR,#ef+08H
0150 CF                XCH     A,R7
0151 F0                MOVX    @DPTR,A
0152 A3                INC     DPTR
0153 EF                MOV     A,R7
0154 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 339
0155 900000      R     MOV     DPTR,#filetype
0158 E0                MOVX    A,@DPTR
0159 24FE              ADD     A,#0FEH
015B 600C              JZ      ?C0070
015D 24FE              ADD     A,#0FEH
015F 6025              JZ      ?C0071
0161 24FE              ADD     A,#0FEH
0163 6029              JZ      ?C0072
0165 2405              ADD     A,#05H
                                           ; SOURCE LINE # 340
0167         ?C0069:
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
0167 802D              SJMP    ?C0353
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
0169         ?C0070:
                                           ; SOURCE LINE # 345
0169 900000      R     MOV     DPTR,#ef+02H
016C 7402              MOV     A,#02H
016E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 347
016F 900000      E     MOV     DPTR,#header+01H
0172 E0                MOVX    A,@DPTR
0173 F4                CPL     A
0174 FF                MOV     R7,A
0175 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 348
0178 120000      E     LCALL   Transmission_GetByte
017B EF                MOV     A,R7
017C 33                RLC     A
017D 95E0              SUBB    A,ACC
;---- Variable 'record_le' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 349
017F 900000      R     MOV     DPTR,#ef+0AH
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 59  

0182 EF                MOV     A,R7
0183 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 350
0184 8016              SJMP    ?C0068
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
0186         ?C0071:
                                           ; SOURCE LINE # 353
0186 900000      R     MOV     DPTR,#ef+02H
0189 7404              MOV     A,#04H
018B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
018C 800E              SJMP    ?C0068
                                           ; SOURCE LINE # 355
018E         ?C0072:
                                           ; SOURCE LINE # 356
018E 900000      R     MOV     DPTR,#ef+02H
0191 7406              MOV     A,#06H
0193 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
0194 8006              SJMP    ?C0068
                                           ; SOURCE LINE # 358
0196         ?C0353:
0196 900000      R     MOV     DPTR,#ef+02H
0199 7401              MOV     A,#01H
019B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 360
019C         ?C0068:
                                           ; SOURCE LINE # 361
019C 900000      R     MOV     DPTR,#tag
019F E0                MOVX    A,@DPTR
01A0 FF                MOV     R7,A
01A1 7E00              MOV     R6,#00H
01A3 7B01              MOV     R3,#01H
01A5 7A00        R     MOV     R2,#HIGH ef
01A7 7900        R     MOV     R1,#LOW ef
01A9         ?C0352:
01A9 120000      E     LCALL   _FSCreateFile
01AC 900000      R     MOV     DPTR,#result
01AF EF                MOV     A,R7
01B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
01B1 8006              SJMP    ?C0065
                                           ; SOURCE LINE # 364
01B3         ?C0074:
                                           ; SOURCE LINE # 365
01B3 900000      R     MOV     DPTR,#result
01B6 741E              MOV     A,#01EH
01B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 366
01B9         ?C0065:
                                           ; SOURCE LINE # 368
01B9 900000      R     MOV     DPTR,#result
01BC E0                MOVX    A,@DPTR
01BD 24E2              ADD     A,#0E2H
01BF 6026              JZ      ?C0080
01C1 14                DEC     A
01C2 6017              JZ      ?C0078
01C4 24FE              ADD     A,#0FEH
01C6 600D              JZ      ?C0077
01C8 24FE              ADD     A,#0FEH
01CA 6015              JZ      ?C0079
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 60  

01CC 2423              ADD     A,#023H
01CE 701D              JNZ     ?C0081
                                           ; SOURCE LINE # 369
01D0         ?C0076:
                                           ; SOURCE LINE # 370
01D0 E4                CLR     A
01D1 FD                MOV     R5,A
01D2 FF                MOV     R7,A
01D3         ?C0351:
                                           ; SOURCE LINE # 371
01D3 801C              SJMP    ?C0358
                                           ; SOURCE LINE # 372
01D5         ?C0077:
                                           ; SOURCE LINE # 373
01D5 E4                CLR     A
01D6 FD                MOV     R5,A
01D7 7F25              MOV     R7,#025H
01D9         ?C0354:
                                           ; SOURCE LINE # 374
01D9 8016              SJMP    ?C0358
                                           ; SOURCE LINE # 375
01DB         ?C0078:
                                           ; SOURCE LINE # 376
01DB E4                CLR     A
01DC FD                MOV     R5,A
01DD 7F20              MOV     R7,#020H
01DF         ?C0355:
                                           ; SOURCE LINE # 377
01DF 8010              SJMP    ?C0358
                                           ; SOURCE LINE # 378
01E1         ?C0079:
                                           ; SOURCE LINE # 379
01E1 E4                CLR     A
01E2 FD                MOV     R5,A
01E3 7F13              MOV     R7,#013H
01E5         ?C0356:
                                           ; SOURCE LINE # 380
01E5 800A              SJMP    ?C0358
                                           ; SOURCE LINE # 381
01E7         ?C0080:
                                           ; SOURCE LINE # 382
01E7 E4                CLR     A
01E8 FD                MOV     R5,A
01E9 7F29              MOV     R7,#029H
01EB         ?C0357:
                                           ; SOURCE LINE # 383
01EB 8004              SJMP    ?C0358
                                           ; SOURCE LINE # 384
01ED         ?C0081:
                                           ; SOURCE LINE # 385
01ED E4                CLR     A
01EE FD                MOV     R5,A
01EF 7F01              MOV     R7,#01H
01F1         ?C0358:
01F1 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
01F4         ?C0059:
01F4 22                RET     
             ; FUNCTION Command_CreateFile (END)

C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 61  

             ; FUNCTION Command_Select (BEGIN)
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 398
0000 120000      E     LCALL   State_GetCurrentSecurity
0003 EF                MOV     A,R7
0004 C3                CLR     C
0005 9401              SUBB    A,#01H
0007 4003              JC      ?C0083
0009 D3                SETB    C
000A 8001              SJMP    ?C0084
000C         ?C0083:
000C C3                CLR     C
000D         ?C0084:
000D 4007              JC      ?C0082
                                           ; SOURCE LINE # 399
000F E4                CLR     A
0010 FD                MOV     R5,A
0011 7F14              MOV     R7,#014H
0013 020000      R     LJMP    ?C0365
                                           ; SOURCE LINE # 401
0016         ?C0082:
                                           ; SOURCE LINE # 404
0016 900000      E     MOV     DPTR,#header+02H
0019 E0                MOVX    A,@DPTR
001A 7064              JNZ     ?C0086
                                           ; SOURCE LINE # 406
001C 900000      E     MOV     DPTR,#header+04H
001F E0                MOVX    A,@DPTR
0020 7005              JNZ     ?C0087
                                           ; SOURCE LINE # 407
0022 120000      E     LCALL   FSSelectMF
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
0025 804A              SJMP    ?C0360
0027         ?C0087:
                                           ; SOURCE LINE # 410
0027 900000      E     MOV     DPTR,#header+01H
002A E0                MOVX    A,@DPTR
002B F4                CPL     A
002C FF                MOV     R7,A
002D 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 411
0030 120000      E     LCALL   Transmission_GetByte
0033 EF                MOV     A,R7
0034 33                RLC     A
0035 95E0              SUBB    A,ACC
0037 EF                MOV     A,R7
0038 900000      R     MOV     DPTR,#fid
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D E4                CLR     A
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 413
003F 900000      E     MOV     DPTR,#header+01H
0042 E0                MOVX    A,@DPTR
0043 F4                CPL     A
0044 FF                MOV     R7,A
0045 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 414
0048 120000      E     LCALL   Transmission_GetByte
004B EF                MOV     A,R7
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 62  

004C 33                RLC     A
004D 95E0              SUBB    A,ACC
004F FE                MOV     R6,A
0050 900000      R     MOV     DPTR,#fid
0053 E0                MOVX    A,@DPTR
0054 4E                ORL     A,R6
0055 FE                MOV     R6,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 4F                ORL     A,R7
0059 FF                MOV     R7,A
005A 900000      R     MOV     DPTR,#fid
005D EE                MOV     A,R6
005E F0                MOVX    @DPTR,A
005F A3                INC     DPTR
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
0062 120000      E     LCALL   _FS_SelectFID
0065 EE                MOV     A,R6
0066 701F              JNZ     ?C0092
0068 EF                MOV     A,R7
0069 24E0              ADD     A,#0E0H
006B 600C              JZ      ?C0091
006D 2420              ADD     A,#020H
006F 7016              JNZ     ?C0092
                                           ; SOURCE LINE # 417
0071         ?C0090:
                                           ; SOURCE LINE # 418
0071         ?C0360:
0071 E4                CLR     A
0072 FD                MOV     R5,A
0073 FF                MOV     R7,A
0074 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 419
0077 800E              SJMP    ?C0092
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
0079         ?C0091:
                                           ; SOURCE LINE # 422
0079 E4                CLR     A
007A FD                MOV     R5,A
007B 7F1E              MOV     R7,#01EH
007D         ?C0359:
007D 020000      R     LJMP    ?C0365
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
0080         ?C0086:
                                           ; SOURCE LINE # 428
0080 E4                CLR     A
0081 FD                MOV     R5,A
0082 7F22              MOV     R7,#022H
0084         ?C0361:
0084 020000      R     LJMP    ?C0365
                                           ; SOURCE LINE # 430
0087         ?C0092:
                                           ; SOURCE LINE # 433
0087 120000      E     LCALL   State_GetCurrent
;---- Variable 'current' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 434
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 63  

008A EF                MOV     A,R7
008B 25E0              ADD     A,ACC
008D FF                MOV     R7,A
008E EE                MOV     A,R6
008F 33                RLC     A
0090 FE                MOV     R6,A
0091 EF                MOV     A,R7
0092 2419              ADD     A,#019H
0094 FF                MOV     R7,A
0095 EE                MOV     A,R6
0096 3401              ADDC    A,#01H
0098 FE                MOV     R6,A
0099 7B01              MOV     R3,#01H
009B 7A00        R     MOV     R2,#HIGH body
009D 7900        R     MOV     R1,#LOW body
009F 7D02              MOV     R5,#02H
00A1 7C00              MOV     R4,#00H
00A3 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 435
00A6 900000      R     MOV     DPTR,#body+01H
00A9 E0                MOVX    A,@DPTR
00AA 25E0              ADD     A,ACC
00AC FF                MOV     R7,A
00AD 900000      R     MOV     DPTR,#body
00B0 E0                MOVX    A,@DPTR
00B1 33                RLC     A
00B2 FE                MOV     R6,A
00B3 EF                MOV     A,R7
00B4 2413              ADD     A,#013H
00B6 FF                MOV     R7,A
00B7 EE                MOV     A,R6
00B8 3401              ADDC    A,#01H
00BA FE                MOV     R6,A
00BB 7B01              MOV     R3,#01H
00BD 7A00        R     MOV     R2,#HIGH length
00BF 7900        R     MOV     R1,#LOW length
00C1 7D02              MOV     R5,#02H
00C3 7C00              MOV     R4,#00H
00C5 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 436
00C8 900000      R     MOV     DPTR,#body+01H
00CB E0                MOVX    A,@DPTR
00CC 25E0              ADD     A,ACC
00CE FF                MOV     R7,A
00CF 900000      R     MOV     DPTR,#body
00D2 E0                MOVX    A,@DPTR
00D3 33                RLC     A
00D4 FE                MOV     R6,A
00D5 EF                MOV     A,R7
00D6 2410              ADD     A,#010H
00D8 FF                MOV     R7,A
00D9 EE                MOV     A,R6
00DA 3401              ADDC    A,#01H
00DC FE                MOV     R6,A
00DD 7B01              MOV     R3,#01H
00DF 7A00        R     MOV     R2,#HIGH structure
00E1 7900        R     MOV     R1,#LOW structure
00E3 7D01              MOV     R5,#01H
00E5 7C00              MOV     R4,#00H
00E7 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 438
00EA 900000      R     MOV     DPTR,#structure
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 64  

00ED E0                MOVX    A,@DPTR
00EE FF                MOV     R7,A
00EF 6402              XRL     A,#02H
00F1 6008              JZ      ?C0094
00F3 EF                MOV     A,R7
00F4 6404              XRL     A,#04H
00F6 6003              JZ      $ + 5H
00F8 020000      R     LJMP    ?C0085
00FB         ?C0094:
                                           ; SOURCE LINE # 439
00FB 900000      E     MOV     DPTR,#header+03H
00FE E0                MOVX    A,@DPTR
00FF 700C              JNZ     ?C0095
                                           ; SOURCE LINE # 440
0101 900000      R     MOV     DPTR,#record_num
0104 F0                MOVX    @DPTR,A
0105 A3                INC     DPTR
0106 04                INC     A
0107 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
0108 FF                MOV     R7,A
0109 7E00              MOV     R6,#00H
                                           ; SOURCE LINE # 442
010B 8071              SJMP    ?C0366
010D         ?C0095:
                                           ; SOURCE LINE # 443
010D 900000      E     MOV     DPTR,#header+03H
0110 E0                MOVX    A,@DPTR
0111 B40112            CJNE    A,#01H,?C0097
                                           ; SOURCE LINE # 444
0114 900000      R     MOV     DPTR,#length
0117 E0                MOVX    A,@DPTR
0118 FE                MOV     R6,A
0119 A3                INC     DPTR
011A E0                MOVX    A,@DPTR
011B FF                MOV     R7,A
011C 900000      R     MOV     DPTR,#record_num
011F EE                MOV     A,R6
0120 F0                MOVX    @DPTR,A
0121 A3                INC     DPTR
0122 EF                MOV     A,R7
0123 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
0124         ?C0363:
                                           ; SOURCE LINE # 446
0124 8058              SJMP    ?C0366
0126         ?C0097:
                                           ; SOURCE LINE # 447
0126 900000      E     MOV     DPTR,#header+03H
0129 E0                MOVX    A,@DPTR
012A 6402              XRL     A,#02H
012C 7028              JNZ     ?C0099
                                           ; SOURCE LINE # 448
012E 120000      E     LCALL   State_GetCurrentRecord
0131 900000      R     MOV     DPTR,#length
0134 E0                MOVX    A,@DPTR
0135 B5060B            CJNE    A,AR6,?C0100
0138 A3                INC     DPTR
0139 E0                MOVX    A,@DPTR
013A B50706            CJNE    A,AR7,?C0100
                                           ; SOURCE LINE # 449
013D E4                CLR     A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 65  

013E FD                MOV     R5,A
013F 7F1F              MOV     R7,#01FH
0141         ?C0362:
0141 8026              SJMP    ?C0365
                                           ; SOURCE LINE # 451
0143         ?C0100:
                                           ; SOURCE LINE # 452
0143 120000      E     LCALL   State_GetCurrentRecord
0146 EF                MOV     A,R7
0147 2401              ADD     A,#01H
0149 FF                MOV     R7,A
014A E4                CLR     A
014B 3E                ADDC    A,R6
014C FE                MOV     R6,A
014D 900000      R     MOV     DPTR,#record_num
0150 F0                MOVX    @DPTR,A
0151 A3                INC     DPTR
0152 EF                MOV     A,R7
0153 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 453
0154         ?C0364:
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 455
0154 8028              SJMP    ?C0366
0156         ?C0099:
                                           ; SOURCE LINE # 456
0156 900000      E     MOV     DPTR,#header+03H
0159 E0                MOVX    A,@DPTR
015A B40324            CJNE    A,#03H,?C0085
                                           ; SOURCE LINE # 457
015D 120000      E     LCALL   State_GetCurrentRecord
0160 EF                MOV     A,R7
0161 6401              XRL     A,#01H
0163 4E                ORL     A,R6
0164 7006              JNZ     ?C0104
                                           ; SOURCE LINE # 458
0166 FD                MOV     R5,A
0167 7F1F              MOV     R7,#01FH
0169         ?C0365:
0169 020000      E     LJMP    _Response_SetSW
                                           ; SOURCE LINE # 460
016C         ?C0104:
                                           ; SOURCE LINE # 461
016C 120000      E     LCALL   State_GetCurrentRecord
016F EF                MOV     A,R7
0170 24FF              ADD     A,#0FFH
0172 FF                MOV     R7,A
0173 EE                MOV     A,R6
0174 34FF              ADDC    A,#0FFH
0176 FE                MOV     R6,A
0177 900000      R     MOV     DPTR,#record_num
017A F0                MOVX    @DPTR,A
017B A3                INC     DPTR
017C EF                MOV     A,R7
017D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
017E         ?C0366:
017E 120000      E     LCALL   _State_SetCurrentRecord
                                           ; SOURCE LINE # 463
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 66  

0181         ?C0085:
0181 22                RET     
             ; FUNCTION Command_Select (END)

             ; FUNCTION Command_DeleteFile (BEGIN)
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 471
0000 900000      E     MOV     DPTR,#header+01H
0003 E0                MOVX    A,@DPTR
0004 F4                CPL     A
0005 FF                MOV     R7,A
0006 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 472
0009 120000      E     LCALL   Transmission_GetByte
000C EF                MOV     A,R7
000D 33                RLC     A
000E 95E0              SUBB    A,ACC
0010 EF                MOV     A,R7
0011 900000      R     MOV     DPTR,#fid
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
0018 900000      E     MOV     DPTR,#header+01H
001B E0                MOVX    A,@DPTR
001C F4                CPL     A
001D FF                MOV     R7,A
001E 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 475
0021 120000      E     LCALL   Transmission_GetByte
0024 EF                MOV     A,R7
0025 33                RLC     A
0026 95E0              SUBB    A,ACC
0028 FE                MOV     R6,A
0029 900000      R     MOV     DPTR,#fid
002C E0                MOVX    A,@DPTR
002D 4E                ORL     A,R6
002E FE                MOV     R6,A
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031 4F                ORL     A,R7
0032 FF                MOV     R7,A
0033 900000      R     MOV     DPTR,#fid
0036 EE                MOV     A,R6
0037 F0                MOVX    @DPTR,A
0038 A3                INC     DPTR
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
003B 120000      E     LCALL   _FSDeleteFile
003E EF                MOV     A,R7
003F 7008              JNZ     ?C0108
0041 EE                MOV     A,R6
0042 7005              JNZ     ?C0108
                                           ; SOURCE LINE # 478
0044         ?C0107:
                                           ; SOURCE LINE # 479
0044 E4                CLR     A
0045 FD                MOV     R5,A
0046 FF                MOV     R7,A
                                           ; SOURCE LINE # 480
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 67  

0047 8004              SJMP    ?C0367
                                           ; SOURCE LINE # 481
0049         ?C0108:
                                           ; SOURCE LINE # 482
0049 E4                CLR     A
004A FD                MOV     R5,A
004B 7F1E              MOV     R7,#01EH
004D         ?C0367:
004D 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
0050         ?C0109:
0050 22                RET     
             ; FUNCTION Command_DeleteFile (END)

             ; FUNCTION _Initial_Binary_Check (BEGIN)
                                           ; SOURCE LINE # 487
0000 900000      R     MOV     DPTR,#length
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
000B 120000      E     LCALL   State_GetCurrentSecurity
;---- Variable 'security' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 494
000E EF                MOV     A,R7
000F C3                CLR     C
0010 9401              SUBB    A,#01H
0012 4003              JC      ?C0111
0014 D3                SETB    C
0015 8001              SJMP    ?C0112
0017         ?C0111:
0017 C3                CLR     C
0018         ?C0112:
0018 4007              JC      ?C0110
                                           ; SOURCE LINE # 495
001A E4                CLR     A
001B FD                MOV     R5,A
001C 7F14              MOV     R7,#014H
                                           ; SOURCE LINE # 496
001E 020000      R     LJMP    ?C0373
                                           ; SOURCE LINE # 497
0021         ?C0110:
                                           ; SOURCE LINE # 499
0021 900000      E     MOV     DPTR,#header+02H
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 30E02A            JNB     ACC.0,?C0114
                                           ; SOURCE LINE # 500
0029 541F              ANL     A,#01FH
002B FF                MOV     R7,A
002C 7E00              MOV     R6,#00H
;---- Variable 'fid' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 501
002E 120000      E     LCALL   _FS_SelectFID
0031 EE                MOV     A,R6
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 68  

0032 700C              JNZ     ?C0115
0034 EF                MOV     A,R7
0035 24E0              ADD     A,#0E0H
0037 7007              JNZ     ?C0115
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
0039         ?C0117:
                                           ; SOURCE LINE # 505
0039 E4                CLR     A
003A FD                MOV     R5,A
003B 7F1E              MOV     R7,#01EH
003D         ?C0368:
                                           ; SOURCE LINE # 506
003D 020000      R     LJMP    ?C0373
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 508
0040         ?C0115:
                                           ; SOURCE LINE # 509
0040 900000      E     MOV     DPTR,#header+03H
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 900000      R     MOV     DPTR,#offset
0048 E0                MOVX    A,@DPTR
0049 FB                MOV     R3,A
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C FA                MOV     R2,A
004D A3                INC     DPTR
004E E0                MOVX    A,@DPTR
004F F9                MOV     R1,A
0050 E4                CLR     A
                                           ; SOURCE LINE # 510
0051 802A              SJMP    ?C0370
0053         ?C0114:
                                           ; SOURCE LINE # 511
0053 120000      E     LCALL   State_GetCurrent
0056 900000      R     MOV     DPTR,#current
0059 EE                MOV     A,R6
005A F0                MOVX    @DPTR,A
005B A3                INC     DPTR
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
005E 4E                ORL     A,R6
005F 7006              JNZ     ?C0119
                                           ; SOURCE LINE # 513
0061 FD                MOV     R5,A
0062 7F18              MOV     R7,#018H
0064         ?C0369:
                                           ; SOURCE LINE # 514
0064 020000      R     LJMP    ?C0373
                                           ; SOURCE LINE # 515
0067         ?C0119:
                                           ; SOURCE LINE # 516
0067 900000      E     MOV     DPTR,#header+02H
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E FD                MOV     R5,A
006F ED                MOV     A,R5
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 69  

0070 FF                MOV     R7,A
0071 900000      R     MOV     DPTR,#offset
0074 E0                MOVX    A,@DPTR
0075 FB                MOV     R3,A
0076 A3                INC     DPTR
0077 E0                MOVX    A,@DPTR
0078 FA                MOV     R2,A
0079 A3                INC     DPTR
007A E0                MOVX    A,@DPTR
007B F9                MOV     R1,A
007C EE                MOV     A,R6
007D         ?C0370:
007D 8FF0              MOV     B,R7
007F 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 517
0082         ?C0118:
                                           ; SOURCE LINE # 519
0082 120000      E     LCALL   State_GetCurrent
0085 900000      R     MOV     DPTR,#current
0088 EE                MOV     A,R6
0089 F0                MOVX    @DPTR,A
008A A3                INC     DPTR
008B EF                MOV     A,R7
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
008D E0                MOVX    A,@DPTR
008E 25E0              ADD     A,ACC
0090 FF                MOV     R7,A
0091 900000      R     MOV     DPTR,#current
0094 E0                MOVX    A,@DPTR
0095 33                RLC     A
0096 FE                MOV     R6,A
0097 EF                MOV     A,R7
0098 2410              ADD     A,#010H
009A FF                MOV     R7,A
009B EE                MOV     A,R6
009C 3401              ADDC    A,#01H
009E FE                MOV     R6,A
009F 7B01              MOV     R3,#01H
00A1 7A00        R     MOV     R2,#HIGH tag
00A3 7900        R     MOV     R1,#LOW tag
00A5 7D01              MOV     R5,#01H
00A7 7C00              MOV     R4,#00H
00A9 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 521
00AC 900000      R     MOV     DPTR,#current+01H
00AF E0                MOVX    A,@DPTR
00B0 25E0              ADD     A,ACC
00B2 FF                MOV     R7,A
00B3 900000      R     MOV     DPTR,#current
00B6 E0                MOVX    A,@DPTR
00B7 33                RLC     A
00B8 FE                MOV     R6,A
00B9 EF                MOV     A,R7
00BA 2419              ADD     A,#019H
00BC FF                MOV     R7,A
00BD EE                MOV     A,R6
00BE 3401              ADDC    A,#01H
00C0 FE                MOV     R6,A
00C1 7B01              MOV     R3,#01H
00C3 7A00        R     MOV     R2,#HIGH body
00C5 7900        R     MOV     R1,#LOW body
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 70  

00C7 7D02              MOV     R5,#02H
00C9 7C00              MOV     R4,#00H
00CB 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 522
00CE 900000      R     MOV     DPTR,#body+01H
00D1 E0                MOVX    A,@DPTR
00D2 25E0              ADD     A,ACC
00D4 FF                MOV     R7,A
00D5 900000      R     MOV     DPTR,#body
00D8 E0                MOVX    A,@DPTR
00D9 33                RLC     A
00DA FE                MOV     R6,A
00DB EF                MOV     A,R7
00DC 2413              ADD     A,#013H
00DE FF                MOV     R7,A
00DF EE                MOV     A,R6
00E0 3401              ADDC    A,#01H
00E2 FE                MOV     R6,A
00E3 7B01              MOV     R3,#01H
00E5 7A00        R     MOV     R2,#HIGH tempLength
00E7 7900        R     MOV     R1,#LOW tempLength
00E9 7D02              MOV     R5,#02H
00EB 7C00              MOV     R4,#00H
00ED 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 523
00F0 900000      R     MOV     DPTR,#tempLength
00F3 E0                MOVX    A,@DPTR
00F4 F9                MOV     R1,A
00F5 A3                INC     DPTR
00F6 E0                MOVX    A,@DPTR
00F7 FF                MOV     R7,A
00F8 900000      R     MOV     DPTR,#length
00FB E0                MOVX    A,@DPTR
00FC FB                MOV     R3,A
00FD A3                INC     DPTR
00FE E0                MOVX    A,@DPTR
00FF FA                MOV     R2,A
0100 A3                INC     DPTR
0101 E0                MOVX    A,@DPTR
0102 C9                XCH     A,R1
0103 8FF0              MOV     B,R7
0105 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 526
0108 900000      R     MOV     DPTR,#tag
010B E0                MOVX    A,@DPTR
010C 7004              JNZ     ?C0334
010E A3                INC     DPTR
010F E0                MOVX    A,@DPTR
0110 644F              XRL     A,#04FH
0112         ?C0334:
0112 7005              JNZ     ?C0120
                                           ; SOURCE LINE # 527
0114 FD                MOV     R5,A
0115 7F13              MOV     R7,#013H
0117         ?C0371:
                                           ; SOURCE LINE # 528
0117 8056              SJMP    ?C0373
                                           ; SOURCE LINE # 529
0119         ?C0120:
                                           ; SOURCE LINE # 532
0119 900000      R     MOV     DPTR,#offset
011C E0                MOVX    A,@DPTR
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 71  

011D FB                MOV     R3,A
011E A3                INC     DPTR
011F E0                MOVX    A,@DPTR
0120 FA                MOV     R2,A
0121 A3                INC     DPTR
0122 E0                MOVX    A,@DPTR
0123 F9                MOV     R1,A
0124 120000      E     LCALL   ?C?ILDPTR
0127 FF                MOV     R7,A
0128 C3                CLR     C
0129 900000      R     MOV     DPTR,#tempLength+01H
012C E0                MOVX    A,@DPTR
012D 9F                SUBB    A,R7
012E 900000      R     MOV     DPTR,#tempLength
0131 E0                MOVX    A,@DPTR
0132 95F0              SUBB    A,B
0134 5006              JNC     ?C0121
                                           ; SOURCE LINE # 533
0136 E4                CLR     A
0137 FD                MOV     R5,A
0138 7F22              MOV     R7,#022H
013A         ?C0372:
                                           ; SOURCE LINE # 534
013A 8033              SJMP    ?C0373
                                           ; SOURCE LINE # 535
013C         ?C0121:
                                           ; SOURCE LINE # 538
013C 900000      R     MOV     DPTR,#body+01H
013F E0                MOVX    A,@DPTR
0140 25E0              ADD     A,ACC
0142 FF                MOV     R7,A
0143 900000      R     MOV     DPTR,#body
0146 E0                MOVX    A,@DPTR
0147 33                RLC     A
0148 FE                MOV     R6,A
0149 EF                MOV     A,R7
014A 2410              ADD     A,#010H
014C FF                MOV     R7,A
014D EE                MOV     A,R6
014E 3401              ADDC    A,#01H
0150 FE                MOV     R6,A
0151 7B01              MOV     R3,#01H
0153 7A00        R     MOV     R2,#HIGH structure
0155 7900        R     MOV     R1,#LOW structure
0157 7D01              MOV     R5,#01H
0159 7C00              MOV     R4,#00H
015B 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 539
015E 900000      R     MOV     DPTR,#structure
0161 E0                MOVX    A,@DPTR
0162 B40103            CJNE    A,#01H,?C0123
0165 D3                SETB    C
0166 8001              SJMP    ?C0124
0168         ?C0123:
0168 C3                CLR     C
0169         ?C0124:
0169 400A              JC      ?C0122
                                           ; SOURCE LINE # 540
016B E4                CLR     A
016C FD                MOV     R5,A
016D 7F13              MOV     R7,#013H
016F         ?C0373:
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 72  

016F 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 541
0172 7F02              MOV     R7,#02H
0174 22                RET     
                                           ; SOURCE LINE # 542
0175         ?C0122:
                                           ; SOURCE LINE # 544
0175 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 545
0177         ?C0113:
0177 22                RET     
             ; FUNCTION _Initial_Binary_Check (END)

             ; FUNCTION Command_ReadBinary (BEGIN)
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 552
0000 900000      R     MOV     DPTR,#?_Initial_Binary_Check?BYTE+03H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 7400        R     MOV     A,#HIGH offset
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B 7400        R     MOV     A,#LOW offset
000D F0                MOVX    @DPTR,A
000E 7B01              MOV     R3,#01H
0010 7A00        R     MOV     R2,#HIGH length
0012 7900        R     MOV     R1,#LOW length
0014 120000      R     LCALL   _Initial_Binary_Check
0017 EF                MOV     A,R7
0018 703A              JNZ     ?C0126
                                           ; SOURCE LINE # 554
001A         ?C0125:
                                           ; SOURCE LINE # 557
001A 120000      E     LCALL   FS_GetAC
;---- Variable 'ac' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 558
001D EF                MOV     A,R7
001E 20E006            JB      ACC.0,?C0127
                                           ; SOURCE LINE # 559
0021 E4                CLR     A
0022 FD                MOV     R5,A
0023 7F14              MOV     R7,#014H
0025 802A              SJMP    ?C0374
                                           ; SOURCE LINE # 561
0027         ?C0127:
                                           ; SOURCE LINE # 563
0027 900000      E     MOV     DPTR,#header+04H
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#le
002F E4                CLR     A
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 565
0034 900000      E     MOV     DPTR,#header+01H
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 566
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 73  

003C 900000      R     MOV     DPTR,#length
003F A3                INC     DPTR
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 567
0045 900000      R     MOV     DPTR,#offset
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 591
004E E4                CLR     A
004F FD                MOV     R5,A
0050 FF                MOV     R7,A
0051         ?C0374:
0051 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 592
0054         ?C0126:
0054 22                RET     
             ; FUNCTION Command_ReadBinary (END)

             ; FUNCTION Command_UpdateBinary (BEGIN)
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 599
0000 900000      R     MOV     DPTR,#?_Initial_Binary_Check?BYTE+03H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 7400        R     MOV     A,#HIGH offset
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B 7400        R     MOV     A,#LOW offset
000D F0                MOVX    @DPTR,A
000E 7B01              MOV     R3,#01H
0010 7A00        R     MOV     R2,#HIGH length
0012 7900        R     MOV     R1,#LOW length
0014 120000      R     LCALL   _Initial_Binary_Check
0017 EF                MOV     A,R7
0018 6003              JZ      $ + 5H
001A 020000      R     LJMP    ?C0129
                                           ; SOURCE LINE # 601
001D         ?C0128:
                                           ; SOURCE LINE # 604
001D 120000      E     LCALL   FS_GetAC
;---- Variable 'ac' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 605
0020 EF                MOV     A,R7
0021 20E007            JB      ACC.0,?C0130
                                           ; SOURCE LINE # 606
0024 E4                CLR     A
0025 FD                MOV     R5,A
0026 7F14              MOV     R7,#014H
0028 020000      R     LJMP    ?C0376
                                           ; SOURCE LINE # 608
002B         ?C0130:
                                           ; SOURCE LINE # 610
002B 900000      E     MOV     DPTR,#header+04H
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 7E00              MOV     R6,#00H
0032 900000      R     MOV     DPTR,#le
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 74  

0035 EE                MOV     A,R6
0036 F0                MOVX    @DPTR,A
0037 A3                INC     DPTR
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 613
003A 900000      R     MOV     DPTR,#offset+01H
003D E0                MOVX    A,@DPTR
003E 2F                ADD     A,R7
003F FF                MOV     R7,A
0040 900000      R     MOV     DPTR,#offset
0043 E0                MOVX    A,@DPTR
0044 3E                ADDC    A,R6
0045 FE                MOV     R6,A
0046 C3                CLR     C
0047 900000      R     MOV     DPTR,#length+01H
004A E0                MOVX    A,@DPTR
004B 9F                SUBB    A,R7
004C 900000      R     MOV     DPTR,#length
004F E0                MOVX    A,@DPTR
0050 9E                SUBB    A,R6
0051 506C              JNC     ?C0131
                                           ; SOURCE LINE # 614
0053 E4                CLR     A
0054 900000      R     MOV     DPTR,#i
0057 F0                MOVX    @DPTR,A
0058         ?C0132:
0058 900000      R     MOV     DPTR,#offset
005B E0                MOVX    A,@DPTR
005C FE                MOV     R6,A
005D A3                INC     DPTR
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 C3                CLR     C
0061 900000      R     MOV     DPTR,#length+01H
0064 E0                MOVX    A,@DPTR
0065 9F                SUBB    A,R7
0066 FF                MOV     R7,A
0067 900000      R     MOV     DPTR,#length
006A E0                MOVX    A,@DPTR
006B 9E                SUBB    A,R6
006C FE                MOV     R6,A
006D 900000      R     MOV     DPTR,#i
0070 E0                MOVX    A,@DPTR
0071 C3                CLR     C
0072 9F                SUBB    A,R7
0073 E4                CLR     A
0074 9E                SUBB    A,R6
0075 5042              JNC     ?C0133
                                           ; SOURCE LINE # 615
0077 900000      E     MOV     DPTR,#header+01H
007A E0                MOVX    A,@DPTR
007B F4                CPL     A
007C FF                MOV     R7,A
007D 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 617
0080 120000      E     LCALL   Transmission_GetByte
0083 900000      R     MOV     DPTR,#data_binary
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
0088 A3                INC     DPTR
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 75  

0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B 900000      R     MOV     DPTR,#offset+01H
008E E0                MOVX    A,@DPTR
008F 2F                ADD     A,R7
0090 FD                MOV     R5,A
0091 900000      R     MOV     DPTR,#offset
0094 E0                MOVX    A,@DPTR
0095 3400              ADDC    A,#00H
0097 FC                MOV     R4,A
0098 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
009B 7401              MOV     A,#01H
009D F0                MOVX    @DPTR,A
009E A3                INC     DPTR
009F 7400        R     MOV     A,#HIGH data_binary
00A1 F0                MOVX    @DPTR,A
00A2 A3                INC     DPTR
00A3 7400        R     MOV     A,#LOW data_binary
00A5 F0                MOVX    @DPTR,A
00A6 7B01              MOV     R3,#01H
00A8 7A00              MOV     R2,#00H
00AA 7F01              MOV     R7,#01H
00AC 7E00              MOV     R6,#00H
00AE 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 620
00B1 900000      R     MOV     DPTR,#i
00B4 E0                MOVX    A,@DPTR
00B5 04                INC     A
00B6 F0                MOVX    @DPTR,A
00B7 809F              SJMP    ?C0132
00B9         ?C0133:
                                           ; SOURCE LINE # 621
00B9 E4                CLR     A
00BA FD                MOV     R5,A
00BB 7F05              MOV     R7,#05H
00BD         ?C0375:
00BD 805D              SJMP    ?C0376
                                           ; SOURCE LINE # 623
00BF         ?C0131:
                                           ; SOURCE LINE # 625
00BF E4                CLR     A
00C0 900000      R     MOV     DPTR,#i
00C3 F0                MOVX    @DPTR,A
00C4         ?C0136:
00C4 900000      R     MOV     DPTR,#i
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 D3                SETB    C
00CA 900000      R     MOV     DPTR,#le+01H
00CD E0                MOVX    A,@DPTR
00CE 9F                SUBB    A,R7
00CF 900000      R     MOV     DPTR,#le
00D2 E0                MOVX    A,@DPTR
00D3 9400              SUBB    A,#00H
00D5 4042              JC      ?C0135
                                           ; SOURCE LINE # 626
00D7 900000      E     MOV     DPTR,#header+01H
00DA E0                MOVX    A,@DPTR
00DB F4                CPL     A
00DC FF                MOV     R7,A
00DD 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 628
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 76  

00E0 120000      E     LCALL   Transmission_GetByte
00E3 900000      R     MOV     DPTR,#data_binary
00E6 EF                MOV     A,R7
00E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 630
00E8 A3                INC     DPTR
00E9 E0                MOVX    A,@DPTR
00EA FF                MOV     R7,A
00EB 900000      R     MOV     DPTR,#offset+01H
00EE E0                MOVX    A,@DPTR
00EF 2F                ADD     A,R7
00F0 FD                MOV     R5,A
00F1 900000      R     MOV     DPTR,#offset
00F4 E0                MOVX    A,@DPTR
00F5 3400              ADDC    A,#00H
00F7 FC                MOV     R4,A
00F8 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
00FB 7401              MOV     A,#01H
00FD F0                MOVX    @DPTR,A
00FE A3                INC     DPTR
00FF 7400        R     MOV     A,#HIGH data_binary
0101 F0                MOVX    @DPTR,A
0102 A3                INC     DPTR
0103 7400        R     MOV     A,#LOW data_binary
0105 F0                MOVX    @DPTR,A
0106 7B01              MOV     R3,#01H
0108 7A00              MOV     R2,#00H
010A 7F01              MOV     R7,#01H
010C 7E00              MOV     R6,#00H
010E 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 631
0111 900000      R     MOV     DPTR,#i
0114 E0                MOVX    A,@DPTR
0115 04                INC     A
0116 F0                MOVX    @DPTR,A
0117 80AB              SJMP    ?C0136
                                           ; SOURCE LINE # 632
0119         ?C0135:
                                           ; SOURCE LINE # 634
0119 E4                CLR     A
011A FD                MOV     R5,A
011B FF                MOV     R7,A
011C         ?C0376:
011C 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 635
011F         ?C0129:
011F 22                RET     
             ; FUNCTION Command_UpdateBinary (END)

             ; FUNCTION Command_EraseBinary (BEGIN)
                                           ; SOURCE LINE # 637
                                           ; SOURCE LINE # 641
0000 900000      R     MOV     DPTR,#?_Initial_Binary_Check?BYTE+03H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 7400        R     MOV     A,#HIGH offset
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B 7400        R     MOV     A,#LOW offset
000D F0                MOVX    @DPTR,A
000E 7B01              MOV     R3,#01H
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 77  

0010 7A00        R     MOV     R2,#HIGH length
0012 7900        R     MOV     R1,#LOW length
0014 120000      R     LCALL   _Initial_Binary_Check
0017 EF                MOV     A,R7
0018 6003              JZ      $ + 5H
001A 020000      R     LJMP    ?C0140
                                           ; SOURCE LINE # 643
001D         ?C0139:
                                           ; SOURCE LINE # 646
001D 120000      E     LCALL   FS_GetAC
;---- Variable 'ac' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 647
0020 EF                MOV     A,R7
0021 20E007            JB      ACC.0,?C0141
                                           ; SOURCE LINE # 648
0024 E4                CLR     A
0025 FD                MOV     R5,A
0026 7F14              MOV     R7,#014H
0028 020000      R     LJMP    ?C0378
                                           ; SOURCE LINE # 650
002B         ?C0141:
                                           ; SOURCE LINE # 652
002B 900000      E     MOV     DPTR,#header+04H
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 7E00              MOV     R6,#00H
0032 900000      R     MOV     DPTR,#le
0035 EE                MOV     A,R6
0036 F0                MOVX    @DPTR,A
0037 A3                INC     DPTR
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 655
003A 900000      R     MOV     DPTR,#offset+01H
003D E0                MOVX    A,@DPTR
003E 2F                ADD     A,R7
003F FF                MOV     R7,A
0040 900000      R     MOV     DPTR,#offset
0043 E0                MOVX    A,@DPTR
0044 3E                ADDC    A,R6
0045 FE                MOV     R6,A
0046 C3                CLR     C
0047 900000      R     MOV     DPTR,#length+01H
004A E0                MOVX    A,@DPTR
004B 9F                SUBB    A,R7
004C 900000      R     MOV     DPTR,#length
004F E0                MOVX    A,@DPTR
0050 9E                SUBB    A,R6
0051 5057              JNC     ?C0142
                                           ; SOURCE LINE # 656
0053 E4                CLR     A
0054 900000      R     MOV     DPTR,#i
0057 F0                MOVX    @DPTR,A
0058         ?C0143:
0058 900000      R     MOV     DPTR,#offset
005B E0                MOVX    A,@DPTR
005C FE                MOV     R6,A
005D A3                INC     DPTR
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 C3                CLR     C
0061 900000      R     MOV     DPTR,#length+01H
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 78  

0064 E0                MOVX    A,@DPTR
0065 9F                SUBB    A,R7
0066 FF                MOV     R7,A
0067 900000      R     MOV     DPTR,#length
006A E0                MOVX    A,@DPTR
006B 9E                SUBB    A,R6
006C FE                MOV     R6,A
006D 900000      R     MOV     DPTR,#i
0070 E0                MOVX    A,@DPTR
0071 FD                MOV     R5,A
0072 7C00              MOV     R4,#00H
0074 C3                CLR     C
0075 9F                SUBB    A,R7
0076 EC                MOV     A,R4
0077 9E                SUBB    A,R6
0078 502A              JNC     ?C0144
                                           ; SOURCE LINE # 657
007A 900000      R     MOV     DPTR,#offset+01H
007D E0                MOVX    A,@DPTR
007E 2D                ADD     A,R5
007F FD                MOV     R5,A
0080 900000      R     MOV     DPTR,#offset
0083 E0                MOVX    A,@DPTR
0084 3C                ADDC    A,R4
0085 FC                MOV     R4,A
0086 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
0089 E4                CLR     A
008A F0                MOVX    @DPTR,A
008B A3                INC     DPTR
008C F0                MOVX    @DPTR,A
008D A3                INC     DPTR
008E 74FF              MOV     A,#0FFH
0090 F0                MOVX    @DPTR,A
0091 7B01              MOV     R3,#01H
0093 7A00              MOV     R2,#00H
0095 7F01              MOV     R7,#01H
0097 7E00              MOV     R6,#00H
0099 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 658
009C 900000      R     MOV     DPTR,#i
009F E0                MOVX    A,@DPTR
00A0 04                INC     A
00A1 F0                MOVX    @DPTR,A
00A2 80B4              SJMP    ?C0143
00A4         ?C0144:
                                           ; SOURCE LINE # 659
00A4 E4                CLR     A
00A5 FD                MOV     R5,A
00A6 7F05              MOV     R7,#05H
00A8         ?C0377:
00A8 8044              SJMP    ?C0378
                                           ; SOURCE LINE # 661
00AA         ?C0142:
                                           ; SOURCE LINE # 663
00AA E4                CLR     A
00AB 900000      R     MOV     DPTR,#i
00AE F0                MOVX    @DPTR,A
00AF         ?C0147:
00AF 900000      R     MOV     DPTR,#i
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 7E00              MOV     R6,#00H
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 79  

00B6 D3                SETB    C
00B7 900000      R     MOV     DPTR,#le+01H
00BA E0                MOVX    A,@DPTR
00BB 9F                SUBB    A,R7
00BC 900000      R     MOV     DPTR,#le
00BF E0                MOVX    A,@DPTR
00C0 9E                SUBB    A,R6
00C1 4028              JC      ?C0146
                                           ; SOURCE LINE # 664
00C3 900000      R     MOV     DPTR,#offset+01H
00C6 E0                MOVX    A,@DPTR
00C7 2F                ADD     A,R7
00C8 FD                MOV     R5,A
00C9 900000      R     MOV     DPTR,#offset
00CC E0                MOVX    A,@DPTR
00CD 3E                ADDC    A,R6
00CE FC                MOV     R4,A
00CF 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
00D2 E4                CLR     A
00D3 F0                MOVX    @DPTR,A
00D4 A3                INC     DPTR
00D5 F0                MOVX    @DPTR,A
00D6 A3                INC     DPTR
00D7 74FF              MOV     A,#0FFH
00D9 F0                MOVX    @DPTR,A
00DA 7B01              MOV     R3,#01H
00DC 7A00              MOV     R2,#00H
00DE 7F01              MOV     R7,#01H
00E0 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 665
00E3 900000      R     MOV     DPTR,#i
00E6 E0                MOVX    A,@DPTR
00E7 04                INC     A
00E8 F0                MOVX    @DPTR,A
00E9 80C4              SJMP    ?C0147
                                           ; SOURCE LINE # 666
00EB         ?C0146:
                                           ; SOURCE LINE # 668
00EB E4                CLR     A
00EC FD                MOV     R5,A
00ED FF                MOV     R7,A
00EE         ?C0378:
00EE 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 669
00F1         ?C0140:
00F1 22                RET     
             ; FUNCTION Command_EraseBinary (END)

             ; FUNCTION Command_WriteBinary (BEGIN)
                                           ; SOURCE LINE # 671
                                           ; SOURCE LINE # 676
0000 900000      R     MOV     DPTR,#?_Initial_Binary_Check?BYTE+03H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 7400        R     MOV     A,#HIGH offset
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B 7400        R     MOV     A,#LOW offset
000D F0                MOVX    @DPTR,A
000E 7B01              MOV     R3,#01H
0010 7A00        R     MOV     R2,#HIGH length
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 80  

0012 7900        R     MOV     R1,#LOW length
0014 120000      R     LCALL   _Initial_Binary_Check
0017 EF                MOV     A,R7
0018 6003              JZ      $ + 5H
001A 020000      R     LJMP    ?C0151
                                           ; SOURCE LINE # 678
001D         ?C0150:
                                           ; SOURCE LINE # 681
001D 120000      E     LCALL   FS_GetAC
;---- Variable 'ac' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 682
0020 EF                MOV     A,R7
0021 20E007            JB      ACC.0,?C0152
                                           ; SOURCE LINE # 683
0024 E4                CLR     A
0025 FD                MOV     R5,A
0026 7F14              MOV     R7,#014H
0028 020000      R     LJMP    ?C0380
                                           ; SOURCE LINE # 685
002B         ?C0152:
                                           ; SOURCE LINE # 687
002B 900000      E     MOV     DPTR,#header+04H
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 7E00              MOV     R6,#00H
0032 900000      R     MOV     DPTR,#le
0035 EE                MOV     A,R6
0036 F0                MOVX    @DPTR,A
0037 A3                INC     DPTR
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 690
003A 900000      R     MOV     DPTR,#offset+01H
003D E0                MOVX    A,@DPTR
003E 2F                ADD     A,R7
003F FF                MOV     R7,A
0040 900000      R     MOV     DPTR,#offset
0043 E0                MOVX    A,@DPTR
0044 3E                ADDC    A,R6
0045 FE                MOV     R6,A
0046 C3                CLR     C
0047 900000      R     MOV     DPTR,#length+01H
004A E0                MOVX    A,@DPTR
004B 9F                SUBB    A,R7
004C 900000      R     MOV     DPTR,#length
004F E0                MOVX    A,@DPTR
0050 9E                SUBB    A,R6
0051 4003              JC      $ + 5H
0053 020000      R     LJMP    ?C0153
                                           ; SOURCE LINE # 691
0056 E4                CLR     A
0057 900000      R     MOV     DPTR,#i
005A F0                MOVX    @DPTR,A
005B         ?C0154:
005B 900000      R     MOV     DPTR,#offset
005E E0                MOVX    A,@DPTR
005F FE                MOV     R6,A
0060 A3                INC     DPTR
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 C3                CLR     C
0064 900000      R     MOV     DPTR,#length+01H
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 81  

0067 E0                MOVX    A,@DPTR
0068 9F                SUBB    A,R7
0069 FF                MOV     R7,A
006A 900000      R     MOV     DPTR,#length
006D E0                MOVX    A,@DPTR
006E 9E                SUBB    A,R6
006F FE                MOV     R6,A
0070 900000      R     MOV     DPTR,#i
0073 E0                MOVX    A,@DPTR
0074 C3                CLR     C
0075 9F                SUBB    A,R7
0076 E4                CLR     A
0077 9E                SUBB    A,R6
0078 5079              JNC     ?C0155
                                           ; SOURCE LINE # 692
007A 900000      E     MOV     DPTR,#header+01H
007D E0                MOVX    A,@DPTR
007E F4                CPL     A
007F FF                MOV     R7,A
0080 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 694
0083 120000      E     LCALL   Transmission_GetByte
0086 900000      R     MOV     DPTR,#data_write
0089 EF                MOV     A,R7
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 696
008B A3                INC     DPTR
008C E0                MOVX    A,@DPTR
008D FF                MOV     R7,A
008E 900000      R     MOV     DPTR,#offset+01H
0091 E0                MOVX    A,@DPTR
0092 2F                ADD     A,R7
0093 FD                MOV     R5,A
0094 900000      R     MOV     DPTR,#offset
0097 E0                MOVX    A,@DPTR
0098 3400              ADDC    A,#00H
009A FC                MOV     R4,A
009B 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
009E 7401              MOV     A,#01H
00A0 F0                MOVX    @DPTR,A
00A1 A3                INC     DPTR
00A2 7400        R     MOV     A,#HIGH data_read
00A4 F0                MOVX    @DPTR,A
00A5 A3                INC     DPTR
00A6 7400        R     MOV     A,#LOW data_read
00A8 F0                MOVX    @DPTR,A
00A9 7B01              MOV     R3,#01H
00AB 7A00              MOV     R2,#00H
00AD E4                CLR     A
00AE FF                MOV     R7,A
00AF FE                MOV     R6,A
00B0 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 698
00B3 900000      R     MOV     DPTR,#data_read
00B6 E0                MOVX    A,@DPTR
00B7 FF                MOV     R7,A
00B8 A3                INC     DPTR
00B9 E0                MOVX    A,@DPTR
00BA 5F                ANL     A,R7
00BB 900000      R     MOV     DPTR,#data_binary
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 700
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 82  

00BF 900000      R     MOV     DPTR,#i
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 900000      R     MOV     DPTR,#offset+01H
00C7 E0                MOVX    A,@DPTR
00C8 2F                ADD     A,R7
00C9 FD                MOV     R5,A
00CA 900000      R     MOV     DPTR,#offset
00CD E0                MOVX    A,@DPTR
00CE 3400              ADDC    A,#00H
00D0 FC                MOV     R4,A
00D1 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
00D4 7401              MOV     A,#01H
00D6 F0                MOVX    @DPTR,A
00D7 A3                INC     DPTR
00D8 7400        R     MOV     A,#HIGH data_binary
00DA F0                MOVX    @DPTR,A
00DB A3                INC     DPTR
00DC 7400        R     MOV     A,#LOW data_binary
00DE F0                MOVX    @DPTR,A
00DF 7B01              MOV     R3,#01H
00E1 7A00              MOV     R2,#00H
00E3 7F01              MOV     R7,#01H
00E5 7E00              MOV     R6,#00H
00E7 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 701
00EA 900000      R     MOV     DPTR,#i
00ED E0                MOVX    A,@DPTR
00EE 04                INC     A
00EF F0                MOVX    @DPTR,A
00F0 020000      R     LJMP    ?C0154
00F3         ?C0155:
                                           ; SOURCE LINE # 702
00F3 E4                CLR     A
00F4 FD                MOV     R5,A
00F5 7F05              MOV     R7,#05H
00F7         ?C0379:
00F7 020000      R     LJMP    ?C0380
                                           ; SOURCE LINE # 704
00FA         ?C0153:
                                           ; SOURCE LINE # 706
00FA E4                CLR     A
00FB 900000      R     MOV     DPTR,#i
00FE F0                MOVX    @DPTR,A
00FF         ?C0158:
00FF 900000      R     MOV     DPTR,#i
0102 E0                MOVX    A,@DPTR
0103 FF                MOV     R7,A
0104 D3                SETB    C
0105 900000      R     MOV     DPTR,#le+01H
0108 E0                MOVX    A,@DPTR
0109 9F                SUBB    A,R7
010A 900000      R     MOV     DPTR,#le
010D E0                MOVX    A,@DPTR
010E 9400              SUBB    A,#00H
0110 4079              JC      ?C0157
                                           ; SOURCE LINE # 707
0112 900000      E     MOV     DPTR,#header+01H
0115 E0                MOVX    A,@DPTR
0116 F4                CPL     A
0117 FF                MOV     R7,A
0118 120000      E     LCALL   _Transmission_SendByte
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 83  

                                           ; SOURCE LINE # 709
011B 120000      E     LCALL   Transmission_GetByte
011E 900000      R     MOV     DPTR,#data_write
0121 EF                MOV     A,R7
0122 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 711
0123 A3                INC     DPTR
0124 E0                MOVX    A,@DPTR
0125 FF                MOV     R7,A
0126 900000      R     MOV     DPTR,#offset+01H
0129 E0                MOVX    A,@DPTR
012A 2F                ADD     A,R7
012B FD                MOV     R5,A
012C 900000      R     MOV     DPTR,#offset
012F E0                MOVX    A,@DPTR
0130 3400              ADDC    A,#00H
0132 FC                MOV     R4,A
0133 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
0136 7401              MOV     A,#01H
0138 F0                MOVX    @DPTR,A
0139 A3                INC     DPTR
013A 7400        R     MOV     A,#HIGH data_read
013C F0                MOVX    @DPTR,A
013D A3                INC     DPTR
013E 7400        R     MOV     A,#LOW data_read
0140 F0                MOVX    @DPTR,A
0141 7B01              MOV     R3,#01H
0143 7A00              MOV     R2,#00H
0145 E4                CLR     A
0146 FF                MOV     R7,A
0147 FE                MOV     R6,A
0148 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 713
014B 900000      R     MOV     DPTR,#data_read
014E E0                MOVX    A,@DPTR
014F FF                MOV     R7,A
0150 A3                INC     DPTR
0151 E0                MOVX    A,@DPTR
0152 5F                ANL     A,R7
0153 900000      R     MOV     DPTR,#data_binary
0156 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 715
0157 900000      R     MOV     DPTR,#i
015A E0                MOVX    A,@DPTR
015B FF                MOV     R7,A
015C 900000      R     MOV     DPTR,#offset+01H
015F E0                MOVX    A,@DPTR
0160 2F                ADD     A,R7
0161 FD                MOV     R5,A
0162 900000      R     MOV     DPTR,#offset
0165 E0                MOVX    A,@DPTR
0166 3400              ADDC    A,#00H
0168 FC                MOV     R4,A
0169 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
016C 7401              MOV     A,#01H
016E F0                MOVX    @DPTR,A
016F A3                INC     DPTR
0170 7400        R     MOV     A,#HIGH data_binary
0172 F0                MOVX    @DPTR,A
0173 A3                INC     DPTR
0174 7400        R     MOV     A,#LOW data_binary
0176 F0                MOVX    @DPTR,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 84  

0177 7B01              MOV     R3,#01H
0179 7A00              MOV     R2,#00H
017B 7F01              MOV     R7,#01H
017D 7E00              MOV     R6,#00H
017F 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 716
0182 900000      R     MOV     DPTR,#i
0185 E0                MOVX    A,@DPTR
0186 04                INC     A
0187 F0                MOVX    @DPTR,A
0188 020000      R     LJMP    ?C0158
                                           ; SOURCE LINE # 717
018B         ?C0157:
                                           ; SOURCE LINE # 719
018B E4                CLR     A
018C FD                MOV     R5,A
018D FF                MOV     R7,A
018E         ?C0380:
018E 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 720
0191         ?C0151:
0191 22                RET     
             ; FUNCTION Command_WriteBinary (END)

             ; FUNCTION L?0433 (BEGIN)
0000 900000      R     MOV     DPTR,#?_Read_One_Record?BYTE+05H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007         L?0434:
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#structure
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
             ; FUNCTION _Read_One_Record (BEGIN)
                                           ; SOURCE LINE # 723
000D 900000      R     MOV     DPTR,#body
0010 EC                MOV     A,R4
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 ED                MOV     A,R5
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 EA                MOV     A,R2
0017 F0                MOVX    @DPTR,A
0018 A3                INC     DPTR
0019 EB                MOV     A,R3
001A F0                MOVX    @DPTR,A
;---- Variable 'structure' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 729
001B EF                MOV     A,R7
001C 6402              XRL     A,#02H
001E 6003              JZ      $ + 5H
0020 020000      R     LJMP    ?C0161
                                           ; SOURCE LINE # 730
0023 900000      R     MOV     DPTR,#body+01H
0026 E0                MOVX    A,@DPTR
0027 25E0              ADD     A,ACC
0029 FF                MOV     R7,A
002A 900000      R     MOV     DPTR,#body
002D E0                MOVX    A,@DPTR
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 85  

002E 33                RLC     A
002F FE                MOV     R6,A
0030 EF                MOV     A,R7
0031 2415              ADD     A,#015H
0033 FF                MOV     R7,A
0034 EE                MOV     A,R6
0035 3401              ADDC    A,#01H
0037 FE                MOV     R6,A
0038 7B01              MOV     R3,#01H
003A 7A00        R     MOV     R2,#HIGH record_le
003C 7900        R     MOV     R1,#LOW record_le
003E 7D01              MOV     R5,#01H
0040 7C00              MOV     R4,#00H
0042 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 731
0045 900000      R     MOV     DPTR,#record_num+01H
0048 E0                MOVX    A,@DPTR
0049 24FF              ADD     A,#0FFH
004B FF                MOV     R7,A
004C 900000      R     MOV     DPTR,#record_num
004F E0                MOVX    A,@DPTR
0050 34FF              ADDC    A,#0FFH
0052 FE                MOV     R6,A
0053 900000      R     MOV     DPTR,#record_le
0056 E0                MOVX    A,@DPTR
0057 FD                MOV     R5,A
0058 7C00              MOV     R4,#00H
005A 120000      E     LCALL   ?C?IMUL
005D EF                MOV     A,R7
005E 2401              ADD     A,#01H
0060 FF                MOV     R7,A
0061 E4                CLR     A
0062 3E                ADDC    A,R6
0063 900000      R     MOV     DPTR,#offset
0066 F0                MOVX    @DPTR,A
0067 A3                INC     DPTR
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 732
006A E4                CLR     A
006B A3                INC     DPTR
006C F0                MOVX    @DPTR,A
006D A3                INC     DPTR
006E F0                MOVX    @DPTR,A
006F         ?C0162:
006F 900000      R     MOV     DPTR,#record_le
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 900000      R     MOV     DPTR,#i
0077 E0                MOVX    A,@DPTR
0078 FC                MOV     R4,A
0079 A3                INC     DPTR
007A E0                MOVX    A,@DPTR
007B FD                MOV     R5,A
007C C3                CLR     C
007D 9F                SUBB    A,R7
007E EC                MOV     A,R4
007F 9400              SUBB    A,#00H
0081 4003              JC      $ + 5H
0083 020000      R     LJMP    ?C0169
                                           ; SOURCE LINE # 733
0086 900000      R     MOV     DPTR,#offset+01H
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 86  

0089 E0                MOVX    A,@DPTR
008A 2D                ADD     A,R5
008B FD                MOV     R5,A
008C 900000      R     MOV     DPTR,#offset
008F E0                MOVX    A,@DPTR
0090 3C                ADDC    A,R4
0091 FC                MOV     R4,A
0092 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
0095 7401              MOV     A,#01H
0097 F0                MOVX    @DPTR,A
0098 A3                INC     DPTR
0099 7400        R     MOV     A,#HIGH databyte
009B F0                MOVX    @DPTR,A
009C A3                INC     DPTR
009D 7400        R     MOV     A,#LOW databyte
009F F0                MOVX    @DPTR,A
00A0 7B01              MOV     R3,#01H
00A2 7A00              MOV     R2,#00H
00A4 E4                CLR     A
00A5 FF                MOV     R7,A
00A6 FE                MOV     R6,A
00A7 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 734
00AA 900000      R     MOV     DPTR,#databyte
00AD E0                MOVX    A,@DPTR
00AE FF                MOV     R7,A
00AF 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 735
00B2 900000      R     MOV     DPTR,#i+01H
00B5 E0                MOVX    A,@DPTR
00B6 04                INC     A
00B7 F0                MOVX    @DPTR,A
00B8 70B5              JNZ     ?C0162
00BA 900000      R     MOV     DPTR,#i
00BD E0                MOVX    A,@DPTR
00BE 04                INC     A
00BF F0                MOVX    @DPTR,A
00C0         ?C0335:
00C0 80AD              SJMP    ?C0162
                                           ; SOURCE LINE # 736
00C2         ?C0161:
                                           ; SOURCE LINE # 737
00C2 900000      R     MOV     DPTR,#body+01H
00C5 E0                MOVX    A,@DPTR
00C6 25E0              ADD     A,ACC
00C8 FF                MOV     R7,A
00C9 900000      R     MOV     DPTR,#body
00CC E0                MOVX    A,@DPTR
00CD 33                RLC     A
00CE FE                MOV     R6,A
00CF 900000      R     MOV     DPTR,#record_num+01H
00D2 E0                MOVX    A,@DPTR
00D3 2F                ADD     A,R7
00D4 FF                MOV     R7,A
00D5 900000      R     MOV     DPTR,#record_num
00D8 E0                MOVX    A,@DPTR
00D9 3E                ADDC    A,R6
00DA CF                XCH     A,R7
00DB 2414              ADD     A,#014H
00DD CF                XCH     A,R7
00DE 3401              ADDC    A,#01H
00E0 FE                MOV     R6,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 87  

00E1 7B01              MOV     R3,#01H
00E3 7A00        R     MOV     R2,#HIGH record_current_addr
00E5 7900        R     MOV     R1,#LOW record_current_addr
00E7 7D01              MOV     R5,#01H
00E9 7C00              MOV     R4,#00H
00EB 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 738
00EE 900000      R     MOV     DPTR,#body+01H
00F1 E0                MOVX    A,@DPTR
00F2 25E0              ADD     A,ACC
00F4 FF                MOV     R7,A
00F5 900000      R     MOV     DPTR,#body
00F8 E0                MOVX    A,@DPTR
00F9 33                RLC     A
00FA FE                MOV     R6,A
00FB EF                MOV     A,R7
00FC 2415              ADD     A,#015H
00FE FF                MOV     R7,A
00FF EE                MOV     A,R6
0100 3401              ADDC    A,#01H
0102 FE                MOV     R6,A
0103 900000      R     MOV     DPTR,#record_num+01H
0106 E0                MOVX    A,@DPTR
0107 2F                ADD     A,R7
0108 FF                MOV     R7,A
0109 900000      R     MOV     DPTR,#record_num
010C E0                MOVX    A,@DPTR
010D 3E                ADDC    A,R6
010E FE                MOV     R6,A
010F 7B01              MOV     R3,#01H
0111 7A00        R     MOV     R2,#HIGH record_next_addr
0113 7900        R     MOV     R1,#LOW record_next_addr
0115 7D01              MOV     R5,#01H
0117 7C00              MOV     R4,#00H
0119 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 739
011C 900000      R     MOV     DPTR,#record_current_addr
011F E0                MOVX    A,@DPTR
0120 FD                MOV     R5,A
0121 A3                INC     DPTR
0122 E0                MOVX    A,@DPTR
0123 C3                CLR     C
0124 9D                SUBB    A,R5
0125 900000      R     MOV     DPTR,#record_le
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 740
0129 ED                MOV     A,R5
012A FF                MOV     R7,A
012B 900000      R     MOV     DPTR,#size+01H
012E E0                MOVX    A,@DPTR
012F 2F                ADD     A,R7
0130 FF                MOV     R7,A
0131 900000      R     MOV     DPTR,#size
0134 E0                MOVX    A,@DPTR
0135 3400              ADDC    A,#00H
0137 CF                XCH     A,R7
0138 2401              ADD     A,#01H
013A CF                XCH     A,R7
013B 3400              ADDC    A,#00H
013D 900000      R     MOV     DPTR,#offset
0140 F0                MOVX    @DPTR,A
0141 A3                INC     DPTR
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 88  

0142 EF                MOV     A,R7
0143 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 742
0144 E4                CLR     A
0145 A3                INC     DPTR
0146 F0                MOVX    @DPTR,A
0147 A3                INC     DPTR
0148 F0                MOVX    @DPTR,A
0149         ?C0166:
0149 900000      R     MOV     DPTR,#record_le
014C E0                MOVX    A,@DPTR
014D FF                MOV     R7,A
014E 900000      R     MOV     DPTR,#i
0151 E0                MOVX    A,@DPTR
0152 FC                MOV     R4,A
0153 A3                INC     DPTR
0154 E0                MOVX    A,@DPTR
0155 FD                MOV     R5,A
0156 C3                CLR     C
0157 9F                SUBB    A,R7
0158 EC                MOV     A,R4
0159 9400              SUBB    A,#00H
015B 503C              JNC     ?C0169
                                           ; SOURCE LINE # 743
015D 900000      R     MOV     DPTR,#offset+01H
0160 E0                MOVX    A,@DPTR
0161 2D                ADD     A,R5
0162 FD                MOV     R5,A
0163 900000      R     MOV     DPTR,#offset
0166 E0                MOVX    A,@DPTR
0167 3C                ADDC    A,R4
0168 FC                MOV     R4,A
0169 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
016C 7401              MOV     A,#01H
016E F0                MOVX    @DPTR,A
016F A3                INC     DPTR
0170 7400        R     MOV     A,#HIGH databyte
0172 F0                MOVX    @DPTR,A
0173 A3                INC     DPTR
0174 7400        R     MOV     A,#LOW databyte
0176 F0                MOVX    @DPTR,A
0177 7B01              MOV     R3,#01H
0179 7A00              MOV     R2,#00H
017B E4                CLR     A
017C FF                MOV     R7,A
017D FE                MOV     R6,A
017E 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 744
0181 900000      R     MOV     DPTR,#databyte
0184 E0                MOVX    A,@DPTR
0185 FF                MOV     R7,A
0186 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 745
0189 900000      R     MOV     DPTR,#i+01H
018C E0                MOVX    A,@DPTR
018D 04                INC     A
018E F0                MOVX    @DPTR,A
018F 70B8              JNZ     ?C0166
0191 900000      R     MOV     DPTR,#i
0194 E0                MOVX    A,@DPTR
0195 04                INC     A
0196 F0                MOVX    @DPTR,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 89  

0197         ?C0336:
0197 80B0              SJMP    ?C0166
                                           ; SOURCE LINE # 746
                                           ; SOURCE LINE # 747
0199         ?C0169:
0199 22                RET     
             ; FUNCTION _Read_One_Record (END)

             ; FUNCTION _Update_One_Record (BEGIN)
                                           ; SOURCE LINE # 749
0000 900000      R     MOV     DPTR,#body
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EA                MOV     A,R2
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
;---- Variable 'structure' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 755
000E EF                MOV     A,R7
000F 6402              XRL     A,#02H
0011 6003              JZ      $ + 5H
0013 020000      R     LJMP    ?C0170
                                           ; SOURCE LINE # 756
0016 900000      R     MOV     DPTR,#body+01H
0019 E0                MOVX    A,@DPTR
001A 25E0              ADD     A,ACC
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#body
0020 E0                MOVX    A,@DPTR
0021 33                RLC     A
0022 FE                MOV     R6,A
0023 EF                MOV     A,R7
0024 2415              ADD     A,#015H
0026 FF                MOV     R7,A
0027 EE                MOV     A,R6
0028 3401              ADDC    A,#01H
002A FE                MOV     R6,A
002B 7B01              MOV     R3,#01H
002D 7A00        R     MOV     R2,#HIGH record_le
002F 7900        R     MOV     R1,#LOW record_le
0031 7D01              MOV     R5,#01H
0033 7C00              MOV     R4,#00H
0035 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 757
0038 900000      R     MOV     DPTR,#record_num+01H
003B E0                MOVX    A,@DPTR
003C 24FF              ADD     A,#0FFH
003E FF                MOV     R7,A
003F 900000      R     MOV     DPTR,#record_num
0042 E0                MOVX    A,@DPTR
0043 34FF              ADDC    A,#0FFH
0045 FE                MOV     R6,A
0046 900000      R     MOV     DPTR,#record_le
0049 E0                MOVX    A,@DPTR
004A FB                MOV     R3,A
004B FD                MOV     R5,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 90  

004C 7C00              MOV     R4,#00H
004E 120000      E     LCALL   ?C?IMUL
0051 EF                MOV     A,R7
0052 2401              ADD     A,#01H
0054 FF                MOV     R7,A
0055 E4                CLR     A
0056 3E                ADDC    A,R6
0057 900000      R     MOV     DPTR,#offset
005A F0                MOVX    @DPTR,A
005B A3                INC     DPTR
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 758
005E 900000      R     MOV     DPTR,#length
0061 E0                MOVX    A,@DPTR
0062 6B                XRL     A,R3
0063 7056              JNZ     ?C0171
                                           ; SOURCE LINE # 759
0065 900000      R     MOV     DPTR,#i
0068 F0                MOVX    @DPTR,A
0069         ?C0172:
0069 900000      R     MOV     DPTR,#record_le
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E 900000      R     MOV     DPTR,#i
0071 E0                MOVX    A,@DPTR
0072 C3                CLR     C
0073 9F                SUBB    A,R7
0074 4003              JC      $ + 5H
0076 020000      R     LJMP    ?C0177
                                           ; SOURCE LINE # 760
0079 900000      E     MOV     DPTR,#header+01H
007C E0                MOVX    A,@DPTR
007D F4                CPL     A
007E FF                MOV     R7,A
007F 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 761
0082 120000      E     LCALL   Transmission_GetByte
0085 900000      R     MOV     DPTR,#databyte
0088 EF                MOV     A,R7
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 762
008A A3                INC     DPTR
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D 900000      R     MOV     DPTR,#offset+01H
0090 E0                MOVX    A,@DPTR
0091 2F                ADD     A,R7
0092 FD                MOV     R5,A
0093 900000      R     MOV     DPTR,#offset
0096 E0                MOVX    A,@DPTR
0097 3400              ADDC    A,#00H
0099 FC                MOV     R4,A
009A 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
009D 7401              MOV     A,#01H
009F F0                MOVX    @DPTR,A
00A0 A3                INC     DPTR
00A1 7400        R     MOV     A,#HIGH databyte
00A3 F0                MOVX    @DPTR,A
00A4 A3                INC     DPTR
00A5 7400        R     MOV     A,#LOW databyte
00A7 F0                MOVX    @DPTR,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 91  

00A8 7B01              MOV     R3,#01H
00AA 7A00              MOV     R2,#00H
00AC 7F01              MOV     R7,#01H
00AE 7E00              MOV     R6,#00H
00B0 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 763
00B3 900000      R     MOV     DPTR,#i
00B6 E0                MOVX    A,@DPTR
00B7 04                INC     A
00B8 F0                MOVX    @DPTR,A
00B9 80AE              SJMP    ?C0172
                                           ; SOURCE LINE # 764
00BB         ?C0171:
                                           ; SOURCE LINE # 765
00BB 020000      R     LJMP    ?C0381
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
00BE         ?C0170:
                                           ; SOURCE LINE # 768
00BE 900000      R     MOV     DPTR,#body+01H
00C1 E0                MOVX    A,@DPTR
00C2 25E0              ADD     A,ACC
00C4 FF                MOV     R7,A
00C5 900000      R     MOV     DPTR,#body
00C8 E0                MOVX    A,@DPTR
00C9 33                RLC     A
00CA FE                MOV     R6,A
00CB 900000      R     MOV     DPTR,#record_num+01H
00CE E0                MOVX    A,@DPTR
00CF 2F                ADD     A,R7
00D0 FF                MOV     R7,A
00D1 900000      R     MOV     DPTR,#record_num
00D4 E0                MOVX    A,@DPTR
00D5 3E                ADDC    A,R6
00D6 CF                XCH     A,R7
00D7 2414              ADD     A,#014H
00D9 CF                XCH     A,R7
00DA 3401              ADDC    A,#01H
00DC FE                MOV     R6,A
00DD 7B01              MOV     R3,#01H
00DF 7A00        R     MOV     R2,#HIGH record_current_addr
00E1 7900        R     MOV     R1,#LOW record_current_addr
00E3 7D01              MOV     R5,#01H
00E5 7C00              MOV     R4,#00H
00E7 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 769
00EA 900000      R     MOV     DPTR,#body+01H
00ED E0                MOVX    A,@DPTR
00EE 25E0              ADD     A,ACC
00F0 FF                MOV     R7,A
00F1 900000      R     MOV     DPTR,#body
00F4 E0                MOVX    A,@DPTR
00F5 33                RLC     A
00F6 FE                MOV     R6,A
00F7 EF                MOV     A,R7
00F8 2415              ADD     A,#015H
00FA FF                MOV     R7,A
00FB EE                MOV     A,R6
00FC 3401              ADDC    A,#01H
00FE FE                MOV     R6,A
00FF 900000      R     MOV     DPTR,#record_num+01H
0102 E0                MOVX    A,@DPTR
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 92  

0103 2F                ADD     A,R7
0104 FF                MOV     R7,A
0105 900000      R     MOV     DPTR,#record_num
0108 E0                MOVX    A,@DPTR
0109 3E                ADDC    A,R6
010A FE                MOV     R6,A
010B 7B01              MOV     R3,#01H
010D 7A00        R     MOV     R2,#HIGH record_next_addr
010F 7900        R     MOV     R1,#LOW record_next_addr
0111 7D01              MOV     R5,#01H
0113 7C00              MOV     R4,#00H
0115 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 770
0118 900000      R     MOV     DPTR,#record_current_addr
011B E0                MOVX    A,@DPTR
011C FD                MOV     R5,A
011D A3                INC     DPTR
011E E0                MOVX    A,@DPTR
011F C3                CLR     C
0120 9D                SUBB    A,R5
0121 900000      R     MOV     DPTR,#record_le
0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 771
0125 ED                MOV     A,R5
0126 FF                MOV     R7,A
0127 900000      R     MOV     DPTR,#size+01H
012A E0                MOVX    A,@DPTR
012B 2F                ADD     A,R7
012C FF                MOV     R7,A
012D 900000      R     MOV     DPTR,#size
0130 E0                MOVX    A,@DPTR
0131 3400              ADDC    A,#00H
0133 CF                XCH     A,R7
0134 2401              ADD     A,#01H
0136 CF                XCH     A,R7
0137 3400              ADDC    A,#00H
0139 900000      R     MOV     DPTR,#offset
013C F0                MOVX    @DPTR,A
013D A3                INC     DPTR
013E EF                MOV     A,R7
013F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 772
0140 900000      R     MOV     DPTR,#record_le
0143 E0                MOVX    A,@DPTR
0144 FF                MOV     R7,A
0145 900000      R     MOV     DPTR,#length
0148 E0                MOVX    A,@DPTR
0149 6F                XRL     A,R7
014A 7053              JNZ     ?C0178
                                           ; SOURCE LINE # 773
014C 900000      R     MOV     DPTR,#i
014F F0                MOVX    @DPTR,A
0150         ?C0179:
0150 900000      R     MOV     DPTR,#record_le
0153 E0                MOVX    A,@DPTR
0154 FF                MOV     R7,A
0155 900000      R     MOV     DPTR,#i
0158 E0                MOVX    A,@DPTR
0159 C3                CLR     C
015A 9F                SUBB    A,R7
015B 5048              JNC     ?C0177
                                           ; SOURCE LINE # 774
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 93  

015D 900000      E     MOV     DPTR,#header+01H
0160 E0                MOVX    A,@DPTR
0161 F4                CPL     A
0162 FF                MOV     R7,A
0163 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 775
0166 120000      E     LCALL   Transmission_GetByte
0169 900000      R     MOV     DPTR,#databyte
016C EF                MOV     A,R7
016D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 776
016E A3                INC     DPTR
016F E0                MOVX    A,@DPTR
0170 FF                MOV     R7,A
0171 900000      R     MOV     DPTR,#offset+01H
0174 E0                MOVX    A,@DPTR
0175 2F                ADD     A,R7
0176 FD                MOV     R5,A
0177 900000      R     MOV     DPTR,#offset
017A E0                MOVX    A,@DPTR
017B 3400              ADDC    A,#00H
017D FC                MOV     R4,A
017E 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
0181 7401              MOV     A,#01H
0183 F0                MOVX    @DPTR,A
0184 A3                INC     DPTR
0185 7400        R     MOV     A,#HIGH databyte
0187 F0                MOVX    @DPTR,A
0188 A3                INC     DPTR
0189 7400        R     MOV     A,#LOW databyte
018B F0                MOVX    @DPTR,A
018C 7B01              MOV     R3,#01H
018E 7A00              MOV     R2,#00H
0190 7F01              MOV     R7,#01H
0192 7E00              MOV     R6,#00H
0194 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 777
0197 900000      R     MOV     DPTR,#i
019A E0                MOVX    A,@DPTR
019B 04                INC     A
019C F0                MOVX    @DPTR,A
019D 80B1              SJMP    ?C0179
                                           ; SOURCE LINE # 778
019F         ?C0178:
                                           ; SOURCE LINE # 779
019F         ?C0381:
019F 900000      R     MOV     DPTR,#record_le
01A2 E0                MOVX    A,@DPTR
01A3 FF                MOV     R7,A
01A4 22                RET     
                                           ; SOURCE LINE # 780
                                           ; SOURCE LINE # 781
01A5         ?C0177:
                                           ; SOURCE LINE # 782
01A5 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 783
01A7         ?C0176:
01A7 22                RET     
             ; FUNCTION _Update_One_Record (END)

             ; FUNCTION _Write_One_Record (BEGIN)
                                           ; SOURCE LINE # 785
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 94  

0000 900000      R     MOV     DPTR,#body
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EA                MOV     A,R2
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
;---- Variable 'structure' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 791
000E EF                MOV     A,R7
000F 6402              XRL     A,#02H
0011 6003              JZ      $ + 5H
0013 020000      R     LJMP    ?C0183
                                           ; SOURCE LINE # 792
0016 900000      R     MOV     DPTR,#body+01H
0019 E0                MOVX    A,@DPTR
001A 25E0              ADD     A,ACC
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#body
0020 E0                MOVX    A,@DPTR
0021 33                RLC     A
0022 FE                MOV     R6,A
0023 EF                MOV     A,R7
0024 2415              ADD     A,#015H
0026 FF                MOV     R7,A
0027 EE                MOV     A,R6
0028 3401              ADDC    A,#01H
002A FE                MOV     R6,A
002B 7B01              MOV     R3,#01H
002D 7A00        R     MOV     R2,#HIGH record_le
002F 7900        R     MOV     R1,#LOW record_le
0031 7D01              MOV     R5,#01H
0033 7C00              MOV     R4,#00H
0035 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 793
0038 900000      R     MOV     DPTR,#record_num+01H
003B E0                MOVX    A,@DPTR
003C 24FF              ADD     A,#0FFH
003E FF                MOV     R7,A
003F 900000      R     MOV     DPTR,#record_num
0042 E0                MOVX    A,@DPTR
0043 34FF              ADDC    A,#0FFH
0045 FE                MOV     R6,A
0046 900000      R     MOV     DPTR,#record_le
0049 E0                MOVX    A,@DPTR
004A FB                MOV     R3,A
004B FD                MOV     R5,A
004C 7C00              MOV     R4,#00H
004E 120000      E     LCALL   ?C?IMUL
0051 EF                MOV     A,R7
0052 2401              ADD     A,#01H
0054 FF                MOV     R7,A
0055 E4                CLR     A
0056 3E                ADDC    A,R6
0057 900000      R     MOV     DPTR,#offset
005A F0                MOVX    @DPTR,A
005B A3                INC     DPTR
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 95  

005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 794
005E 900000      R     MOV     DPTR,#length
0061 E0                MOVX    A,@DPTR
0062 6B                XRL     A,R3
0063 6003              JZ      $ + 5H
0065 020000      R     LJMP    ?C0382
                                           ; SOURCE LINE # 795
0068 900000      R     MOV     DPTR,#i
006B F0                MOVX    @DPTR,A
006C         ?C0185:
006C 900000      R     MOV     DPTR,#record_le
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 900000      R     MOV     DPTR,#i
0074 E0                MOVX    A,@DPTR
0075 C3                CLR     C
0076 9F                SUBB    A,R7
0077 4003              JC      $ + 5H
0079 020000      R     LJMP    ?C0190
                                           ; SOURCE LINE # 796
007C 900000      E     MOV     DPTR,#header+01H
007F E0                MOVX    A,@DPTR
0080 F4                CPL     A
0081 FF                MOV     R7,A
0082 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 797
0085 120000      E     LCALL   Transmission_GetByte
0088 900000      R     MOV     DPTR,#data_write
008B EF                MOV     A,R7
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 799
008D 900000      R     MOV     DPTR,#i
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 900000      R     MOV     DPTR,#offset+01H
0095 E0                MOVX    A,@DPTR
0096 2F                ADD     A,R7
0097 FD                MOV     R5,A
0098 900000      R     MOV     DPTR,#offset
009B E0                MOVX    A,@DPTR
009C 3400              ADDC    A,#00H
009E FC                MOV     R4,A
009F 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
00A2 7401              MOV     A,#01H
00A4 F0                MOVX    @DPTR,A
00A5 A3                INC     DPTR
00A6 7400        R     MOV     A,#HIGH data_read
00A8 F0                MOVX    @DPTR,A
00A9 A3                INC     DPTR
00AA 7400        R     MOV     A,#LOW data_read
00AC F0                MOVX    @DPTR,A
00AD 7B01              MOV     R3,#01H
00AF 7A00              MOV     R2,#00H
00B1 E4                CLR     A
00B2 FF                MOV     R7,A
00B3 FE                MOV     R6,A
00B4 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 801
00B7 900000      R     MOV     DPTR,#data_read
00BA E0                MOVX    A,@DPTR
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 96  

00BB FF                MOV     R7,A
00BC 900000      R     MOV     DPTR,#data_write
00BF E0                MOVX    A,@DPTR
00C0 5F                ANL     A,R7
00C1 900000      R     MOV     DPTR,#databyte
00C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 802
00C5 A3                INC     DPTR
00C6 E0                MOVX    A,@DPTR
00C7 FF                MOV     R7,A
00C8 900000      R     MOV     DPTR,#offset+01H
00CB E0                MOVX    A,@DPTR
00CC 2F                ADD     A,R7
00CD FD                MOV     R5,A
00CE 900000      R     MOV     DPTR,#offset
00D1 E0                MOVX    A,@DPTR
00D2 3400              ADDC    A,#00H
00D4 FC                MOV     R4,A
00D5 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
00D8 7401              MOV     A,#01H
00DA F0                MOVX    @DPTR,A
00DB A3                INC     DPTR
00DC 7400        R     MOV     A,#HIGH databyte
00DE F0                MOVX    @DPTR,A
00DF A3                INC     DPTR
00E0 7400        R     MOV     A,#LOW databyte
00E2 F0                MOVX    @DPTR,A
00E3 7B01              MOV     R3,#01H
00E5 7A00              MOV     R2,#00H
00E7 7F01              MOV     R7,#01H
00E9 7E00              MOV     R6,#00H
00EB 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 803
00EE 900000      R     MOV     DPTR,#i
00F1 E0                MOVX    A,@DPTR
00F2 04                INC     A
00F3 F0                MOVX    @DPTR,A
00F4 020000      R     LJMP    ?C0185
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 806
                                           ; SOURCE LINE # 807
00F7         ?C0183:
                                           ; SOURCE LINE # 808
00F7 900000      R     MOV     DPTR,#body+01H
00FA E0                MOVX    A,@DPTR
00FB 25E0              ADD     A,ACC
00FD FF                MOV     R7,A
00FE 900000      R     MOV     DPTR,#body
0101 E0                MOVX    A,@DPTR
0102 33                RLC     A
0103 FE                MOV     R6,A
0104 900000      R     MOV     DPTR,#record_num+01H
0107 E0                MOVX    A,@DPTR
0108 2F                ADD     A,R7
0109 FF                MOV     R7,A
010A 900000      R     MOV     DPTR,#record_num
010D E0                MOVX    A,@DPTR
010E 3E                ADDC    A,R6
010F CF                XCH     A,R7
0110 2414              ADD     A,#014H
0112 CF                XCH     A,R7
0113 3401              ADDC    A,#01H
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 97  

0115 FE                MOV     R6,A
0116 7B01              MOV     R3,#01H
0118 7A00        R     MOV     R2,#HIGH record_current_addr
011A 7900        R     MOV     R1,#LOW record_current_addr
011C 7D01              MOV     R5,#01H
011E 7C00              MOV     R4,#00H
0120 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 809
0123 900000      R     MOV     DPTR,#body+01H
0126 E0                MOVX    A,@DPTR
0127 25E0              ADD     A,ACC
0129 FF                MOV     R7,A
012A 900000      R     MOV     DPTR,#body
012D E0                MOVX    A,@DPTR
012E 33                RLC     A
012F FE                MOV     R6,A
0130 EF                MOV     A,R7
0131 2415              ADD     A,#015H
0133 FF                MOV     R7,A
0134 EE                MOV     A,R6
0135 3401              ADDC    A,#01H
0137 FE                MOV     R6,A
0138 900000      R     MOV     DPTR,#record_num+01H
013B E0                MOVX    A,@DPTR
013C 2F                ADD     A,R7
013D FF                MOV     R7,A
013E 900000      R     MOV     DPTR,#record_num
0141 E0                MOVX    A,@DPTR
0142 3E                ADDC    A,R6
0143 FE                MOV     R6,A
0144 7B01              MOV     R3,#01H
0146 7A00        R     MOV     R2,#HIGH record_next_addr
0148 7900        R     MOV     R1,#LOW record_next_addr
014A 7D01              MOV     R5,#01H
014C 7C00              MOV     R4,#00H
014E 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 810
0151 900000      R     MOV     DPTR,#record_current_addr
0154 E0                MOVX    A,@DPTR
0155 FD                MOV     R5,A
0156 A3                INC     DPTR
0157 E0                MOVX    A,@DPTR
0158 C3                CLR     C
0159 9D                SUBB    A,R5
015A 900000      R     MOV     DPTR,#record_le
015D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 811
015E ED                MOV     A,R5
015F FF                MOV     R7,A
0160 900000      R     MOV     DPTR,#size+01H
0163 E0                MOVX    A,@DPTR
0164 2F                ADD     A,R7
0165 FF                MOV     R7,A
0166 900000      R     MOV     DPTR,#size
0169 E0                MOVX    A,@DPTR
016A 3400              ADDC    A,#00H
016C CF                XCH     A,R7
016D 2401              ADD     A,#01H
016F CF                XCH     A,R7
0170 3400              ADDC    A,#00H
0172 900000      R     MOV     DPTR,#offset
0175 F0                MOVX    @DPTR,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 98  

0176 A3                INC     DPTR
0177 EF                MOV     A,R7
0178 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 812
0179 900000      R     MOV     DPTR,#record_le
017C E0                MOVX    A,@DPTR
017D FF                MOV     R7,A
017E 900000      R     MOV     DPTR,#length
0181 E0                MOVX    A,@DPTR
0182 6F                XRL     A,R7
0183 6003              JZ      $ + 5H
0185 020000      R     LJMP    ?C0191
                                           ; SOURCE LINE # 813
0188 900000      R     MOV     DPTR,#i
018B F0                MOVX    @DPTR,A
018C         ?C0192:
018C 900000      R     MOV     DPTR,#record_le
018F E0                MOVX    A,@DPTR
0190 FF                MOV     R7,A
0191 900000      R     MOV     DPTR,#i
0194 E0                MOVX    A,@DPTR
0195 C3                CLR     C
0196 9F                SUBB    A,R7
0197 4003              JC      $ + 5H
0199 020000      R     LJMP    ?C0190
                                           ; SOURCE LINE # 814
019C 900000      E     MOV     DPTR,#header+01H
019F E0                MOVX    A,@DPTR
01A0 F4                CPL     A
01A1 FF                MOV     R7,A
01A2 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 815
01A5 120000      E     LCALL   Transmission_GetByte
01A8 900000      R     MOV     DPTR,#data_write
01AB EF                MOV     A,R7
01AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 817
01AD 900000      R     MOV     DPTR,#i
01B0 E0                MOVX    A,@DPTR
01B1 FF                MOV     R7,A
01B2 900000      R     MOV     DPTR,#offset+01H
01B5 E0                MOVX    A,@DPTR
01B6 2F                ADD     A,R7
01B7 FD                MOV     R5,A
01B8 900000      R     MOV     DPTR,#offset
01BB E0                MOVX    A,@DPTR
01BC 3400              ADDC    A,#00H
01BE FC                MOV     R4,A
01BF 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
01C2 7401              MOV     A,#01H
01C4 F0                MOVX    @DPTR,A
01C5 A3                INC     DPTR
01C6 7400        R     MOV     A,#HIGH data_read
01C8 F0                MOVX    @DPTR,A
01C9 A3                INC     DPTR
01CA 7400        R     MOV     A,#LOW data_read
01CC F0                MOVX    @DPTR,A
01CD 7B01              MOV     R3,#01H
01CF 7A00              MOV     R2,#00H
01D1 E4                CLR     A
01D2 FF                MOV     R7,A
01D3 FE                MOV     R6,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 99  

01D4 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 819
01D7 900000      R     MOV     DPTR,#data_read
01DA E0                MOVX    A,@DPTR
01DB FF                MOV     R7,A
01DC 900000      R     MOV     DPTR,#data_write
01DF E0                MOVX    A,@DPTR
01E0 5F                ANL     A,R7
01E1 900000      R     MOV     DPTR,#databyte
01E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 820
01E5 A3                INC     DPTR
01E6 E0                MOVX    A,@DPTR
01E7 FF                MOV     R7,A
01E8 900000      R     MOV     DPTR,#offset+01H
01EB E0                MOVX    A,@DPTR
01EC 2F                ADD     A,R7
01ED FD                MOV     R5,A
01EE 900000      R     MOV     DPTR,#offset
01F1 E0                MOVX    A,@DPTR
01F2 3400              ADDC    A,#00H
01F4 FC                MOV     R4,A
01F5 900000      E     MOV     DPTR,#?_FSAccessBinary?BYTE+06H
01F8 7401              MOV     A,#01H
01FA F0                MOVX    @DPTR,A
01FB A3                INC     DPTR
01FC 7400        R     MOV     A,#HIGH databyte
01FE F0                MOVX    @DPTR,A
01FF A3                INC     DPTR
0200 7400        R     MOV     A,#LOW databyte
0202 F0                MOVX    @DPTR,A
0203 7B01              MOV     R3,#01H
0205 7A00              MOV     R2,#00H
0207 7F01              MOV     R7,#01H
0209 7E00              MOV     R6,#00H
020B 120000      E     LCALL   _FSAccessBinary
                                           ; SOURCE LINE # 821
020E 900000      R     MOV     DPTR,#i
0211 E0                MOVX    A,@DPTR
0212 04                INC     A
0213 F0                MOVX    @DPTR,A
0214 020000      R     LJMP    ?C0192
                                           ; SOURCE LINE # 822
0217         ?C0191:
                                           ; SOURCE LINE # 823
0217         ?C0382:
0217 900000      R     MOV     DPTR,#record_le
021A E0                MOVX    A,@DPTR
021B FF                MOV     R7,A
021C 22                RET     
                                           ; SOURCE LINE # 824
                                           ; SOURCE LINE # 825
021D         ?C0190:
                                           ; SOURCE LINE # 826
021D 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 827
021F         ?C0189:
021F 22                RET     
             ; FUNCTION _Write_One_Record (END)

             ; FUNCTION Command_ReadRecord (BEGIN)
                                           ; SOURCE LINE # 830
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 100 

                                           ; SOURCE LINE # 835
0000 120000      E     LCALL   State_GetCurrentSecurity
;---- Variable 'security' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 836
0003 EF                MOV     A,R7
0004 C3                CLR     C
0005 9401              SUBB    A,#01H
0007 4003              JC      ?C0197
0009 D3                SETB    C
000A 8001              SJMP    ?C0198
000C         ?C0197:
000C C3                CLR     C
000D         ?C0198:
000D 4003              JC      ?C0196
                                           ; SOURCE LINE # 837
000F 020000      R     LJMP    ?C0384
                                           ; SOURCE LINE # 839
0012         ?C0196:
                                           ; SOURCE LINE # 842
0012 900000      E     MOV     DPTR,#header+03H
0015 E0                MOVX    A,@DPTR
0016 54F8              ANL     A,#0F8H
0018 7014              JNZ     ?C0200
                                           ; SOURCE LINE # 844
001A 120000      E     LCALL   State_GetCurrent
001D 900000      R     MOV     DPTR,#current
0020 EE                MOV     A,R6
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 845
0025 4E                ORL     A,R6
0026 700D              JNZ     ?C0202
                                           ; SOURCE LINE # 846
0028 FD                MOV     R5,A
0029 7F18              MOV     R7,#018H
002B 020000      R     LJMP    ?C0398
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 849
002E         ?C0200:
                                           ; SOURCE LINE # 850
002E E4                CLR     A
002F FD                MOV     R5,A
0030 7F22              MOV     R7,#022H
0032         ?C0385:
0032 020000      R     LJMP    ?C0398
                                           ; SOURCE LINE # 852
0035         ?C0202:
                                           ; SOURCE LINE # 854
0035 900000      R     MOV     DPTR,#current+01H
0038 E0                MOVX    A,@DPTR
0039 25E0              ADD     A,ACC
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#current
003F E0                MOVX    A,@DPTR
0040 33                RLC     A
0041 FE                MOV     R6,A
0042 EF                MOV     A,R7
0043 2410              ADD     A,#010H
0045 FF                MOV     R7,A
0046 EE                MOV     A,R6
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 101 

0047 3401              ADDC    A,#01H
0049 FE                MOV     R6,A
004A 7B01              MOV     R3,#01H
004C 7A00        R     MOV     R2,#HIGH tag
004E 7900        R     MOV     R1,#LOW tag
0050 7D01              MOV     R5,#01H
0052 7C00              MOV     R4,#00H
0054 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 855
0057 900000      R     MOV     DPTR,#current+01H
005A E0                MOVX    A,@DPTR
005B 25E0              ADD     A,ACC
005D FF                MOV     R7,A
005E 900000      R     MOV     DPTR,#current
0061 E0                MOVX    A,@DPTR
0062 33                RLC     A
0063 FE                MOV     R6,A
0064 EF                MOV     A,R7
0065 2419              ADD     A,#019H
0067 FF                MOV     R7,A
0068 EE                MOV     A,R6
0069 3401              ADDC    A,#01H
006B FE                MOV     R6,A
006C 7B01              MOV     R3,#01H
006E 7A00        R     MOV     R2,#HIGH body
0070 7900        R     MOV     R1,#LOW body
0072 7D02              MOV     R5,#02H
0074 7C00              MOV     R4,#00H
0076 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 856
0079 900000      R     MOV     DPTR,#body+01H
007C E0                MOVX    A,@DPTR
007D 25E0              ADD     A,ACC
007F FF                MOV     R7,A
0080 900000      R     MOV     DPTR,#body
0083 E0                MOVX    A,@DPTR
0084 33                RLC     A
0085 FE                MOV     R6,A
0086 EF                MOV     A,R7
0087 2413              ADD     A,#013H
0089 FF                MOV     R7,A
008A EE                MOV     A,R6
008B 3401              ADDC    A,#01H
008D FE                MOV     R6,A
008E 7B01              MOV     R3,#01H
0090 7A00        R     MOV     R2,#HIGH size
0092 7900        R     MOV     R1,#LOW size
0094 7D02              MOV     R5,#02H
0096 7C00              MOV     R4,#00H
0098 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 859
009B 900000      R     MOV     DPTR,#tag
009E E0                MOVX    A,@DPTR
009F 7004              JNZ     ?C0337
00A1 A3                INC     DPTR
00A2 E0                MOVX    A,@DPTR
00A3 644F              XRL     A,#04FH
00A5         ?C0337:
00A5 7006              JNZ     ?C0203
                                           ; SOURCE LINE # 860
00A7 FD                MOV     R5,A
00A8 7F13              MOV     R7,#013H
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 102 

00AA         ?C0386:
00AA 020000      R     LJMP    ?C0398
                                           ; SOURCE LINE # 862
00AD         ?C0203:
                                           ; SOURCE LINE # 865
00AD 900000      R     MOV     DPTR,#body+01H
00B0 E0                MOVX    A,@DPTR
00B1 25E0              ADD     A,ACC
00B3 FF                MOV     R7,A
00B4 900000      R     MOV     DPTR,#body
00B7 E0                MOVX    A,@DPTR
00B8 33                RLC     A
00B9 FE                MOV     R6,A
00BA EF                MOV     A,R7
00BB 2410              ADD     A,#010H
00BD FF                MOV     R7,A
00BE EE                MOV     A,R6
00BF 3401              ADDC    A,#01H
00C1 FE                MOV     R6,A
00C2 7B01              MOV     R3,#01H
00C4 7A00        R     MOV     R2,#HIGH structure
00C6 7900        R     MOV     R1,#LOW structure
00C8 7D01              MOV     R5,#01H
00CA 7C00              MOV     R4,#00H
00CC 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 866
00CF 900000      R     MOV     DPTR,#structure
00D2 E0                MOVX    A,@DPTR
00D3 FF                MOV     R7,A
00D4 6402              XRL     A,#02H
00D6 600C              JZ      ?C0204
00D8 EF                MOV     A,R7
00D9 6404              XRL     A,#04H
00DB 6007              JZ      ?C0204
                                           ; SOURCE LINE # 867
00DD E4                CLR     A
00DE FD                MOV     R5,A
00DF 7F13              MOV     R7,#013H
00E1         ?C0387:
00E1 020000      R     LJMP    ?C0398
                                           ; SOURCE LINE # 869
00E4         ?C0204:
                                           ; SOURCE LINE # 872
00E4 120000      E     LCALL   FS_GetAC
;---- Variable 'ac' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 873
00E7 EF                MOV     A,R7
00E8 20E007            JB      ACC.0,?C0205
                                           ; SOURCE LINE # 874
00EB         ?C0384:
00EB E4                CLR     A
00EC FD                MOV     R5,A
00ED 7F14              MOV     R7,#014H
00EF         ?C0388:
00EF 020000      R     LJMP    ?C0398
                                           ; SOURCE LINE # 876
00F2         ?C0205:
                                           ; SOURCE LINE # 879
00F2 900000      E     MOV     DPTR,#header+02H
00F5 E0                MOVX    A,@DPTR
00F6 7009              JNZ     ?C0206
                                           ; SOURCE LINE # 880
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 103 

00F8 120000      E     LCALL   State_GetCurrentRecord
00FB 900000      R     MOV     DPTR,#record_num
00FE EE                MOV     A,R6
                                           ; SOURCE LINE # 881
00FF 8009              SJMP    ?C0383
0101         ?C0206:
                                           ; SOURCE LINE # 882
0101 900000      E     MOV     DPTR,#header+02H
0104 E0                MOVX    A,@DPTR
0105 FF                MOV     R7,A
0106 900000      R     MOV     DPTR,#record_num
0109 E4                CLR     A
010A         ?C0383:
010A F0                MOVX    @DPTR,A
010B A3                INC     DPTR
010C EF                MOV     A,R7
010D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 883
010E         ?C0207:
                                           ; SOURCE LINE # 886
010E 900000      R     MOV     DPTR,#size
0111 E0                MOVX    A,@DPTR
0112 FE                MOV     R6,A
0113 A3                INC     DPTR
0114 E0                MOVX    A,@DPTR
0115 FF                MOV     R7,A
0116 D3                SETB    C
0117 900000      R     MOV     DPTR,#record_num+01H
011A E0                MOVX    A,@DPTR
011B 9F                SUBB    A,R7
011C 900000      R     MOV     DPTR,#record_num
011F E0                MOVX    A,@DPTR
0120 9E                SUBB    A,R6
0121 4007              JC      ?C0208
                                           ; SOURCE LINE # 887
0123 E4                CLR     A
0124 FD                MOV     R5,A
0125 7F22              MOV     R7,#022H
0127         ?C0389:
0127 020000      R     LJMP    ?C0398
                                           ; SOURCE LINE # 889
012A         ?C0208:
                                           ; SOURCE LINE # 893
012A 900000      E     MOV     DPTR,#header+01H
012D E0                MOVX    A,@DPTR
012E FF                MOV     R7,A
012F 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 894
0132 900000      E     MOV     DPTR,#header+03H
0135 E0                MOVX    A,@DPTR
0136 20E203            JB      ACC.2,$ + 6H
0139 020000      R     LJMP    ?C0209
                                           ; SOURCE LINE # 896
013C 5403              ANL     A,#03H
013E 7003              JNZ     ?C0210
                                           ; SOURCE LINE # 897
                                           ; SOURCE LINE # 898
0140 020000      R     LJMP    ?C0391
0143         ?C0210:
                                           ; SOURCE LINE # 899
0143 900000      E     MOV     DPTR,#header+03H
0146 E0                MOVX    A,@DPTR
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 104 

0147 5403              ANL     A,#03H
0149 6401              XRL     A,#01H
014B 7032              JNZ     ?C0212
                                           ; SOURCE LINE # 900
014D 900000      R     MOV     DPTR,#record_num
0150 A3                INC     DPTR
0151 E0                MOVX    A,@DPTR
0152 A3                INC     DPTR
0153 F0                MOVX    @DPTR,A
0154         ?C0213:
0154 900000      R     MOV     DPTR,#i
0157 E0                MOVX    A,@DPTR
0158 F9                MOV     R1,A
0159 FF                MOV     R7,A
015A 900000      R     MOV     DPTR,#size
015D E0                MOVX    A,@DPTR
015E FA                MOV     R2,A
015F A3                INC     DPTR
0160 E0                MOVX    A,@DPTR
0161 FB                MOV     R3,A
0162 C3                CLR     C
0163 9F                SUBB    A,R7
0164 EA                MOV     A,R2
0165 9400              SUBB    A,#00H
0167 5003              JNC     $ + 5H
0169 020000      R     LJMP    ?C0222
                                           ; SOURCE LINE # 901
016C 900000      R     MOV     DPTR,#body
016F E0                MOVX    A,@DPTR
0170 FC                MOV     R4,A
0171 A3                INC     DPTR
0172 E0                MOVX    A,@DPTR
0173 FD                MOV     R5,A
0174 120000      R     LCALL   L?0433
                                           ; SOURCE LINE # 902
0177 900000      R     MOV     DPTR,#i
017A E0                MOVX    A,@DPTR
017B 04                INC     A
017C F0                MOVX    @DPTR,A
017D 80D5              SJMP    ?C0213
                                           ; SOURCE LINE # 903
017F         ?C0212:
                                           ; SOURCE LINE # 904
017F 900000      E     MOV     DPTR,#header+03H
0182 E0                MOVX    A,@DPTR
0183 5403              ANL     A,#03H
0185 6402              XRL     A,#02H
0187 7039              JNZ     ?C0217
                                           ; SOURCE LINE # 905
0189 900000      R     MOV     DPTR,#size
018C A3                INC     DPTR
018D E0                MOVX    A,@DPTR
018E 900000      R     MOV     DPTR,#i
0191 F0                MOVX    @DPTR,A
0192         ?C0218:
0192 900000      R     MOV     DPTR,#i
0195 E0                MOVX    A,@DPTR
0196 F9                MOV     R1,A
0197 FF                MOV     R7,A
0198 D3                SETB    C
0199 900000      R     MOV     DPTR,#record_num+01H
019C E0                MOVX    A,@DPTR
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 105 

019D 9F                SUBB    A,R7
019E 900000      R     MOV     DPTR,#record_num
01A1 E0                MOVX    A,@DPTR
01A2 9400              SUBB    A,#00H
01A4 4003              JC      $ + 5H
01A6 020000      R     LJMP    ?C0222
                                           ; SOURCE LINE # 906
01A9 900000      R     MOV     DPTR,#body
01AC E0                MOVX    A,@DPTR
01AD FC                MOV     R4,A
01AE A3                INC     DPTR
01AF E0                MOVX    A,@DPTR
01B0 FD                MOV     R5,A
01B1 A3                INC     DPTR
01B2 E0                MOVX    A,@DPTR
01B3 FA                MOV     R2,A
01B4 A3                INC     DPTR
01B5 E0                MOVX    A,@DPTR
01B6 FB                MOV     R3,A
01B7 120000      R     LCALL   L?0433
                                           ; SOURCE LINE # 907
01BA 900000      R     MOV     DPTR,#i
01BD E0                MOVX    A,@DPTR
01BE 14                DEC     A
01BF F0                MOVX    @DPTR,A
01C0 80D0              SJMP    ?C0218
                                           ; SOURCE LINE # 908
01C2         ?C0217:
                                           ; SOURCE LINE # 909
01C2 E4                CLR     A
01C3 FD                MOV     R5,A
01C4 7F22              MOV     R7,#022H
01C6         ?C0390:
01C6 020000      R     LJMP    ?C0398
                                           ; SOURCE LINE # 911
                                           ; SOURCE LINE # 912
01C9         ?C0209:
                                           ; SOURCE LINE # 914
01C9 900000      E     MOV     DPTR,#header+03H
01CC E0                MOVX    A,@DPTR
01CD 5403              ANL     A,#03H
01CF 701F              JNZ     ?C0223
                                           ; SOURCE LINE # 915
01D1 900000      R     MOV     DPTR,#record_num
01D4 F0                MOVX    @DPTR,A
01D5 A3                INC     DPTR
01D6 04                INC     A
01D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 916
01D8 900000      R     MOV     DPTR,#body
01DB E0                MOVX    A,@DPTR
01DC FC                MOV     R4,A
01DD A3                INC     DPTR
01DE E0                MOVX    A,@DPTR
01DF FD                MOV     R5,A
01E0 A3                INC     DPTR
01E1 E0                MOVX    A,@DPTR
01E2 FA                MOV     R2,A
01E3 A3                INC     DPTR
01E4 E0                MOVX    A,@DPTR
01E5 FB                MOV     R3,A
01E6 900000      R     MOV     DPTR,#?_Read_One_Record?BYTE+05H
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 106 

01E9 E4                CLR     A
01EA F0                MOVX    @DPTR,A
01EB A3                INC     DPTR
01EC 04                INC     A
                                           ; SOURCE LINE # 917
01ED 020000      R     LJMP    ?C0396
01F0         ?C0223:
                                           ; SOURCE LINE # 918
01F0 900000      E     MOV     DPTR,#header+03H
01F3 E0                MOVX    A,@DPTR
01F4 5403              ANL     A,#03H
01F6 6401              XRL     A,#01H
01F8 7042              JNZ     ?C0225
                                           ; SOURCE LINE # 919
01FA 900000      R     MOV     DPTR,#size
01FD E0                MOVX    A,@DPTR
01FE FA                MOV     R2,A
01FF A3                INC     DPTR
0200 E0                MOVX    A,@DPTR
0201 FB                MOV     R3,A
0202 900000      R     MOV     DPTR,#record_num
0205 E0                MOVX    A,@DPTR
0206 6A                XRL     A,R2
0207 7003              JNZ     ?C0338
0209 A3                INC     DPTR
020A E0                MOVX    A,@DPTR
020B 6B                XRL     A,R3
020C         ?C0338:
020C 6027              JZ      ?C0226
                                           ; SOURCE LINE # 920
020E 900000      R     MOV     DPTR,#record_num+01H
0211 E0                MOVX    A,@DPTR
0212 04                INC     A
0213 F0                MOVX    @DPTR,A
0214 7006              JNZ     ?C0339
0216 900000      R     MOV     DPTR,#record_num
0219 E0                MOVX    A,@DPTR
021A 04                INC     A
021B F0                MOVX    @DPTR,A
021C         ?C0339:
                                           ; SOURCE LINE # 921
021C 900000      R     MOV     DPTR,#body
021F E0                MOVX    A,@DPTR
0220 FC                MOV     R4,A
0221 A3                INC     DPTR
0222 E0                MOVX    A,@DPTR
0223 FD                MOV     R5,A
0224 900000      R     MOV     DPTR,#record_num
0227 E0                MOVX    A,@DPTR
0228 FF                MOV     R7,A
0229 A3                INC     DPTR
022A E0                MOVX    A,@DPTR
022B 900000      R     MOV     DPTR,#?_Read_One_Record?BYTE+05H
022E CF                XCH     A,R7
022F F0                MOVX    @DPTR,A
0230 A3                INC     DPTR
0231 EF                MOV     A,R7
0232         ?C0393:
                                           ; SOURCE LINE # 922
0232 020000      R     LJMP    ?C0396
0235         ?C0226:
                                           ; SOURCE LINE # 923
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 107 

0235 E4                CLR     A
0236 FD                MOV     R5,A
0237 7F22              MOV     R7,#022H
0239         ?C0392:
0239 020000      R     LJMP    ?C0398
                                           ; SOURCE LINE # 925
                                           ; SOURCE LINE # 926
023C         ?C0225:
                                           ; SOURCE LINE # 927
023C 900000      E     MOV     DPTR,#header+03H
023F E0                MOVX    A,@DPTR
0240 5403              ANL     A,#03H
0242 6402              XRL     A,#02H
0244 703E              JNZ     ?C0229
                                           ; SOURCE LINE # 928
0246 900000      R     MOV     DPTR,#record_num
0249 E0                MOVX    A,@DPTR
024A 7004              JNZ     ?C0340
024C A3                INC     DPTR
024D E0                MOVX    A,@DPTR
024E 6401              XRL     A,#01H
0250         ?C0340:
0250 602C              JZ      ?C0230
                                           ; SOURCE LINE # 929
0252 900000      R     MOV     DPTR,#record_num+01H
0255 E0                MOVX    A,@DPTR
0256 24FF              ADD     A,#0FFH
0258 F0                MOVX    @DPTR,A
0259 900000      R     MOV     DPTR,#record_num
025C E0                MOVX    A,@DPTR
025D 34FF              ADDC    A,#0FFH
025F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 930
0260         ?C0391:
0260 900000      R     MOV     DPTR,#body
0263 E0                MOVX    A,@DPTR
0264 FC                MOV     R4,A
0265 A3                INC     DPTR
0266 E0                MOVX    A,@DPTR
0267 FD                MOV     R5,A
0268 A3                INC     DPTR
0269 E0                MOVX    A,@DPTR
026A FA                MOV     R2,A
026B A3                INC     DPTR
026C E0                MOVX    A,@DPTR
026D FB                MOV     R3,A
026E 900000      R     MOV     DPTR,#record_num
0271 E0                MOVX    A,@DPTR
0272 FF                MOV     R7,A
0273 A3                INC     DPTR
0274 E0                MOVX    A,@DPTR
0275 900000      R     MOV     DPTR,#?_Read_One_Record?BYTE+05H
0278 CF                XCH     A,R7
0279 F0                MOVX    @DPTR,A
027A A3                INC     DPTR
027B EF                MOV     A,R7
027C         ?C0394:
                                           ; SOURCE LINE # 931
027C 8036              SJMP    ?C0396
027E         ?C0230:
                                           ; SOURCE LINE # 932
027E E4                CLR     A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 108 

027F FD                MOV     R5,A
0280 7F22              MOV     R7,#022H
0282         ?C0395:
0282 803E              SJMP    ?C0398
                                           ; SOURCE LINE # 934
                                           ; SOURCE LINE # 935
0284         ?C0229:
                                           ; SOURCE LINE # 936
0284 900000      E     MOV     DPTR,#header+03H
0287 E0                MOVX    A,@DPTR
0288 5403              ANL     A,#03H
028A FF                MOV     R7,A
028B BF032B            CJNE    R7,#03H,?C0233
                                           ; SOURCE LINE # 937
028E 900000      R     MOV     DPTR,#size
0291 E0                MOVX    A,@DPTR
0292 FA                MOV     R2,A
0293 A3                INC     DPTR
0294 E0                MOVX    A,@DPTR
0295 FB                MOV     R3,A
0296 900000      R     MOV     DPTR,#record_num
0299 EA                MOV     A,R2
029A F0                MOVX    @DPTR,A
029B A3                INC     DPTR
029C EB                MOV     A,R3
029D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 938
029E 900000      R     MOV     DPTR,#body
02A1 E0                MOVX    A,@DPTR
02A2 FC                MOV     R4,A
02A3 A3                INC     DPTR
02A4 E0                MOVX    A,@DPTR
02A5 FD                MOV     R5,A
02A6 900000      R     MOV     DPTR,#record_num
02A9 E0                MOVX    A,@DPTR
02AA FF                MOV     R7,A
02AB A3                INC     DPTR
02AC E0                MOVX    A,@DPTR
02AD 900000      R     MOV     DPTR,#?_Read_One_Record?BYTE+05H
02B0 CF                XCH     A,R7
02B1 F0                MOVX    @DPTR,A
02B2 A3                INC     DPTR
02B3 EF                MOV     A,R7
02B4         ?C0396:
02B4 120000      R     LCALL   L?0434
                                           ; SOURCE LINE # 939
02B7 8006              SJMP    ?C0222
02B9         ?C0233:
                                           ; SOURCE LINE # 940
02B9 E4                CLR     A
02BA FD                MOV     R5,A
02BB 7F22              MOV     R7,#022H
02BD         ?C0397:
02BD 8003              SJMP    ?C0398
                                           ; SOURCE LINE # 942
                                           ; SOURCE LINE # 943
02BF         ?C0222:
                                           ; SOURCE LINE # 945
02BF E4                CLR     A
02C0 FD                MOV     R5,A
02C1 FF                MOV     R7,A
02C2         ?C0398:
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 109 

02C2 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 946
02C5         ?C0199:
02C5 22                RET     
             ; FUNCTION Command_ReadRecord (END)

             ; FUNCTION Command_UpdateRecord (BEGIN)
                                           ; SOURCE LINE # 948
                                           ; SOURCE LINE # 953
0000 120000      E     LCALL   State_GetCurrentSecurity
;---- Variable 'security' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 954
0003 EF                MOV     A,R7
0004 C3                CLR     C
0005 9401              SUBB    A,#01H
0007 4003              JC      ?C0236
0009 D3                SETB    C
000A 8001              SJMP    ?C0237
000C         ?C0236:
000C C3                CLR     C
000D         ?C0237:
000D 4003              JC      ?C0235
                                           ; SOURCE LINE # 955
000F 020000      R     LJMP    ?C0400
                                           ; SOURCE LINE # 957
0012         ?C0235:
                                           ; SOURCE LINE # 960
0012 900000      E     MOV     DPTR,#header+03H
0015 E0                MOVX    A,@DPTR
0016 54F8              ANL     A,#0F8H
0018 7014              JNZ     ?C0239
                                           ; SOURCE LINE # 962
001A 120000      E     LCALL   State_GetCurrent
001D 900000      R     MOV     DPTR,#current
0020 EE                MOV     A,R6
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 963
0025 4E                ORL     A,R6
0026 700D              JNZ     ?C0241
                                           ; SOURCE LINE # 964
0028 FD                MOV     R5,A
0029 7F18              MOV     R7,#018H
002B 020000      R     LJMP    ?C0413
                                           ; SOURCE LINE # 966
                                           ; SOURCE LINE # 967
002E         ?C0239:
                                           ; SOURCE LINE # 968
002E E4                CLR     A
002F FD                MOV     R5,A
0030 7F22              MOV     R7,#022H
0032         ?C0401:
0032 020000      R     LJMP    ?C0413
                                           ; SOURCE LINE # 970
0035         ?C0241:
                                           ; SOURCE LINE # 972
0035 120000      E     LCALL   State_GetCurrent
0038 900000      R     MOV     DPTR,#current
003B EE                MOV     A,R6
003C F0                MOVX    @DPTR,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 110 

003D A3                INC     DPTR
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 973
0040 E0                MOVX    A,@DPTR
0041 25E0              ADD     A,ACC
0043 FF                MOV     R7,A
0044 900000      R     MOV     DPTR,#current
0047 E0                MOVX    A,@DPTR
0048 33                RLC     A
0049 FE                MOV     R6,A
004A EF                MOV     A,R7
004B 2410              ADD     A,#010H
004D FF                MOV     R7,A
004E EE                MOV     A,R6
004F 3401              ADDC    A,#01H
0051 FE                MOV     R6,A
0052 7B01              MOV     R3,#01H
0054 7A00        R     MOV     R2,#HIGH tag
0056 7900        R     MOV     R1,#LOW tag
0058 7D01              MOV     R5,#01H
005A 7C00              MOV     R4,#00H
005C 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 974
005F 900000      R     MOV     DPTR,#current+01H
0062 E0                MOVX    A,@DPTR
0063 25E0              ADD     A,ACC
0065 FF                MOV     R7,A
0066 900000      R     MOV     DPTR,#current
0069 E0                MOVX    A,@DPTR
006A 33                RLC     A
006B FE                MOV     R6,A
006C EF                MOV     A,R7
006D 2419              ADD     A,#019H
006F FF                MOV     R7,A
0070 EE                MOV     A,R6
0071 3401              ADDC    A,#01H
0073 FE                MOV     R6,A
0074 7B01              MOV     R3,#01H
0076 7A00        R     MOV     R2,#HIGH body
0078 7900        R     MOV     R1,#LOW body
007A 7D02              MOV     R5,#02H
007C 7C00              MOV     R4,#00H
007E 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 975
0081 900000      R     MOV     DPTR,#body+01H
0084 E0                MOVX    A,@DPTR
0085 25E0              ADD     A,ACC
0087 FF                MOV     R7,A
0088 900000      R     MOV     DPTR,#body
008B E0                MOVX    A,@DPTR
008C 33                RLC     A
008D FE                MOV     R6,A
008E EF                MOV     A,R7
008F 2413              ADD     A,#013H
0091 FF                MOV     R7,A
0092 EE                MOV     A,R6
0093 3401              ADDC    A,#01H
0095 FE                MOV     R6,A
0096 7B01              MOV     R3,#01H
0098 7A00        R     MOV     R2,#HIGH size
009A 7900        R     MOV     R1,#LOW size
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 111 

009C 7D02              MOV     R5,#02H
009E 7C00              MOV     R4,#00H
00A0 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 978
00A3 900000      R     MOV     DPTR,#tag
00A6 E0                MOVX    A,@DPTR
00A7 7004              JNZ     ?C0341
00A9 A3                INC     DPTR
00AA E0                MOVX    A,@DPTR
00AB 644F              XRL     A,#04FH
00AD         ?C0341:
00AD 7006              JNZ     ?C0242
                                           ; SOURCE LINE # 979
00AF FD                MOV     R5,A
00B0 7F13              MOV     R7,#013H
00B2         ?C0402:
00B2 020000      R     LJMP    ?C0413
                                           ; SOURCE LINE # 981
00B5         ?C0242:
                                           ; SOURCE LINE # 984
00B5 900000      R     MOV     DPTR,#body+01H
00B8 E0                MOVX    A,@DPTR
00B9 25E0              ADD     A,ACC
00BB FF                MOV     R7,A
00BC 900000      R     MOV     DPTR,#body
00BF E0                MOVX    A,@DPTR
00C0 33                RLC     A
00C1 FE                MOV     R6,A
00C2 EF                MOV     A,R7
00C3 2410              ADD     A,#010H
00C5 FF                MOV     R7,A
00C6 EE                MOV     A,R6
00C7 3401              ADDC    A,#01H
00C9 FE                MOV     R6,A
00CA 7B01              MOV     R3,#01H
00CC 7A00        R     MOV     R2,#HIGH structure
00CE 7900        R     MOV     R1,#LOW structure
00D0 7D01              MOV     R5,#01H
00D2 7C00              MOV     R4,#00H
00D4 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 985
00D7 900000      R     MOV     DPTR,#structure
00DA E0                MOVX    A,@DPTR
00DB FF                MOV     R7,A
00DC 6402              XRL     A,#02H
00DE 600C              JZ      ?C0243
00E0 EF                MOV     A,R7
00E1 6404              XRL     A,#04H
00E3 6007              JZ      ?C0243
                                           ; SOURCE LINE # 986
00E5 E4                CLR     A
00E6 FD                MOV     R5,A
00E7 7F13              MOV     R7,#013H
00E9         ?C0403:
00E9 020000      R     LJMP    ?C0413
                                           ; SOURCE LINE # 988
00EC         ?C0243:
                                           ; SOURCE LINE # 991
00EC 120000      E     LCALL   FS_GetAC
;---- Variable 'ac' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 992
00EF EF                MOV     A,R7
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 112 

00F0 20E007            JB      ACC.0,?C0244
                                           ; SOURCE LINE # 993
00F3         ?C0400:
00F3 E4                CLR     A
00F4 FD                MOV     R5,A
00F5 7F14              MOV     R7,#014H
00F7         ?C0404:
00F7 020000      R     LJMP    ?C0413
                                           ; SOURCE LINE # 995
00FA         ?C0244:
                                           ; SOURCE LINE # 998
00FA 900000      E     MOV     DPTR,#header+02H
00FD E0                MOVX    A,@DPTR
00FE 7009              JNZ     ?C0245
                                           ; SOURCE LINE # 999
0100 120000      E     LCALL   State_GetCurrentRecord
0103 900000      R     MOV     DPTR,#record_num
0106 EE                MOV     A,R6
                                           ; SOURCE LINE # 1000
0107 8009              SJMP    ?C0399
0109         ?C0245:
                                           ; SOURCE LINE # 1001
0109 900000      E     MOV     DPTR,#header+02H
010C E0                MOVX    A,@DPTR
010D FF                MOV     R7,A
010E 900000      R     MOV     DPTR,#record_num
0111 E4                CLR     A
0112         ?C0399:
0112 F0                MOVX    @DPTR,A
0113 A3                INC     DPTR
0114 EF                MOV     A,R7
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1002
0116         ?C0246:
                                           ; SOURCE LINE # 1005
0116 900000      R     MOV     DPTR,#size
0119 E0                MOVX    A,@DPTR
011A FE                MOV     R6,A
011B A3                INC     DPTR
011C E0                MOVX    A,@DPTR
011D FF                MOV     R7,A
011E D3                SETB    C
011F 900000      R     MOV     DPTR,#record_num+01H
0122 E0                MOVX    A,@DPTR
0123 9F                SUBB    A,R7
0124 900000      R     MOV     DPTR,#record_num
0127 E0                MOVX    A,@DPTR
0128 9E                SUBB    A,R6
0129 4007              JC      ?C0247
                                           ; SOURCE LINE # 1006
012B E4                CLR     A
012C FD                MOV     R5,A
012D 7F22              MOV     R7,#022H
012F         ?C0405:
012F 020000      R     LJMP    ?C0413
                                           ; SOURCE LINE # 1008
0132         ?C0247:
                                           ; SOURCE LINE # 1011
0132 900000      E     MOV     DPTR,#header+03H
0135 E0                MOVX    A,@DPTR
0136 30E203            JNB     ACC.2,?C0248
                                           ; SOURCE LINE # 1012
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 113 

                                           ; SOURCE LINE # 1013
0139 020000      R     LJMP    ?C0407
013C         ?C0248:
                                           ; SOURCE LINE # 1015
013C 900000      E     MOV     DPTR,#header+03H
013F E0                MOVX    A,@DPTR
0140 5403              ANL     A,#03H
0142 701F              JNZ     ?C0250
                                           ; SOURCE LINE # 1016
0144 900000      R     MOV     DPTR,#record_num
0147 F0                MOVX    @DPTR,A
0148 A3                INC     DPTR
0149 04                INC     A
014A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1017
014B 900000      R     MOV     DPTR,#body
014E E0                MOVX    A,@DPTR
014F FC                MOV     R4,A
0150 A3                INC     DPTR
0151 E0                MOVX    A,@DPTR
0152 FD                MOV     R5,A
0153 A3                INC     DPTR
0154 E0                MOVX    A,@DPTR
0155 FA                MOV     R2,A
0156 A3                INC     DPTR
0157 E0                MOVX    A,@DPTR
0158 FB                MOV     R3,A
0159 900000      R     MOV     DPTR,#?_Update_One_Record?BYTE+05H
015C E4                CLR     A
015D F0                MOVX    @DPTR,A
015E A3                INC     DPTR
015F 04                INC     A
                                           ; SOURCE LINE # 1018
0160 020000      R     LJMP    ?C0411
0163         ?C0250:
                                           ; SOURCE LINE # 1019
0163 900000      E     MOV     DPTR,#header+03H
0166 E0                MOVX    A,@DPTR
0167 5403              ANL     A,#03H
0169 6401              XRL     A,#01H
016B 7041              JNZ     ?C0252
                                           ; SOURCE LINE # 1020
016D 900000      R     MOV     DPTR,#size
0170 E0                MOVX    A,@DPTR
0171 FA                MOV     R2,A
0172 A3                INC     DPTR
0173 E0                MOVX    A,@DPTR
0174 FB                MOV     R3,A
0175 900000      R     MOV     DPTR,#record_num
0178 E0                MOVX    A,@DPTR
0179 6A                XRL     A,R2
017A 7003              JNZ     ?C0342
017C A3                INC     DPTR
017D E0                MOVX    A,@DPTR
017E 6B                XRL     A,R3
017F         ?C0342:
017F 6026              JZ      ?C0253
                                           ; SOURCE LINE # 1021
0181 900000      R     MOV     DPTR,#record_num+01H
0184 E0                MOVX    A,@DPTR
0185 04                INC     A
0186 F0                MOVX    @DPTR,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 114 

0187 7006              JNZ     ?C0343
0189 900000      R     MOV     DPTR,#record_num
018C E0                MOVX    A,@DPTR
018D 04                INC     A
018E F0                MOVX    @DPTR,A
018F         ?C0343:
                                           ; SOURCE LINE # 1022
018F 900000      R     MOV     DPTR,#body
0192 E0                MOVX    A,@DPTR
0193 FC                MOV     R4,A
0194 A3                INC     DPTR
0195 E0                MOVX    A,@DPTR
0196 FD                MOV     R5,A
0197 900000      R     MOV     DPTR,#record_num
019A E0                MOVX    A,@DPTR
019B FF                MOV     R7,A
019C A3                INC     DPTR
019D E0                MOVX    A,@DPTR
019E 900000      R     MOV     DPTR,#?_Update_One_Record?BYTE+05H
01A1 CF                XCH     A,R7
01A2 F0                MOVX    @DPTR,A
01A3 A3                INC     DPTR
01A4 EF                MOV     A,R7
01A5         ?C0408:
                                           ; SOURCE LINE # 1023
01A5 8075              SJMP    ?C0411
01A7         ?C0253:
                                           ; SOURCE LINE # 1024
01A7 E4                CLR     A
01A8 FD                MOV     R5,A
01A9 7F22              MOV     R7,#022H
01AB         ?C0406:
01AB 020000      R     LJMP    ?C0413
                                           ; SOURCE LINE # 1026
                                           ; SOURCE LINE # 1027
01AE         ?C0252:
                                           ; SOURCE LINE # 1028
01AE 900000      E     MOV     DPTR,#header+03H
01B1 E0                MOVX    A,@DPTR
01B2 5403              ANL     A,#03H
01B4 6402              XRL     A,#02H
01B6 703E              JNZ     ?C0256
                                           ; SOURCE LINE # 1029
01B8 900000      R     MOV     DPTR,#record_num
01BB E0                MOVX    A,@DPTR
01BC 7004              JNZ     ?C0344
01BE A3                INC     DPTR
01BF E0                MOVX    A,@DPTR
01C0 6401              XRL     A,#01H
01C2         ?C0344:
01C2 602C              JZ      ?C0257
                                           ; SOURCE LINE # 1030
01C4 900000      R     MOV     DPTR,#record_num+01H
01C7 E0                MOVX    A,@DPTR
01C8 24FF              ADD     A,#0FFH
01CA F0                MOVX    @DPTR,A
01CB 900000      R     MOV     DPTR,#record_num
01CE E0                MOVX    A,@DPTR
01CF 34FF              ADDC    A,#0FFH
01D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1031
01D2         ?C0407:
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 115 

01D2 900000      R     MOV     DPTR,#body
01D5 E0                MOVX    A,@DPTR
01D6 FC                MOV     R4,A
01D7 A3                INC     DPTR
01D8 E0                MOVX    A,@DPTR
01D9 FD                MOV     R5,A
01DA A3                INC     DPTR
01DB E0                MOVX    A,@DPTR
01DC FA                MOV     R2,A
01DD A3                INC     DPTR
01DE E0                MOVX    A,@DPTR
01DF FB                MOV     R3,A
01E0 900000      R     MOV     DPTR,#record_num
01E3 E0                MOVX    A,@DPTR
01E4 FF                MOV     R7,A
01E5 A3                INC     DPTR
01E6 E0                MOVX    A,@DPTR
01E7 900000      R     MOV     DPTR,#?_Update_One_Record?BYTE+05H
01EA CF                XCH     A,R7
01EB F0                MOVX    @DPTR,A
01EC A3                INC     DPTR
01ED EF                MOV     A,R7
01EE         ?C0409:
                                           ; SOURCE LINE # 1032
01EE 802C              SJMP    ?C0411
01F0         ?C0257:
                                           ; SOURCE LINE # 1033
01F0 E4                CLR     A
01F1 FD                MOV     R5,A
01F2 7F22              MOV     R7,#022H
01F4         ?C0410:
01F4 804A              SJMP    ?C0413
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
01F6         ?C0256:
                                           ; SOURCE LINE # 1037
01F6 900000      R     MOV     DPTR,#size
01F9 E0                MOVX    A,@DPTR
01FA FA                MOV     R2,A
01FB A3                INC     DPTR
01FC E0                MOVX    A,@DPTR
01FD FB                MOV     R3,A
01FE 900000      R     MOV     DPTR,#record_num
0201 EA                MOV     A,R2
0202 F0                MOVX    @DPTR,A
0203 A3                INC     DPTR
0204 EB                MOV     A,R3
0205 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1038
0206 900000      R     MOV     DPTR,#body
0209 E0                MOVX    A,@DPTR
020A FC                MOV     R4,A
020B A3                INC     DPTR
020C E0                MOVX    A,@DPTR
020D FD                MOV     R5,A
020E 900000      R     MOV     DPTR,#record_num
0211 E0                MOVX    A,@DPTR
0212 FF                MOV     R7,A
0213 A3                INC     DPTR
0214 E0                MOVX    A,@DPTR
0215 900000      R     MOV     DPTR,#?_Update_One_Record?BYTE+05H
0218 CF                XCH     A,R7
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 116 

0219 F0                MOVX    @DPTR,A
021A A3                INC     DPTR
021B EF                MOV     A,R7
021C         ?C0411:
021C F0                MOVX    @DPTR,A
021D 900000      E     MOV     DPTR,#header+04H
0220 E0                MOVX    A,@DPTR
0221 900000      R     MOV     DPTR,#?_Update_One_Record?BYTE+07H
0224 F0                MOVX    @DPTR,A
0225 900000      R     MOV     DPTR,#structure
0228 E0                MOVX    A,@DPTR
0229 FF                MOV     R7,A
022A 120000      R     LCALL   _Update_One_Record
022D 900000      R     MOV     DPTR,#status
0230 EF                MOV     A,R7
0231 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1039
                                           ; SOURCE LINE # 1040
0232         ?C0249:
                                           ; SOURCE LINE # 1042
0232 900000      R     MOV     DPTR,#status
0235 E0                MOVX    A,@DPTR
0236 FD                MOV     R5,A
0237 6004              JZ      ?C0260
                                           ; SOURCE LINE # 1043
0239 7F0C              MOV     R7,#0CH
023B         ?C0412:
023B 8003              SJMP    ?C0413
                                           ; SOURCE LINE # 1045
023D         ?C0260:
                                           ; SOURCE LINE # 1047
023D E4                CLR     A
023E FD                MOV     R5,A
023F FF                MOV     R7,A
0240         ?C0413:
0240 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 1048
0243         ?C0238:
0243 22                RET     
             ; FUNCTION Command_UpdateRecord (END)

             ; FUNCTION Command_WriteRecord (BEGIN)
                                           ; SOURCE LINE # 1050
                                           ; SOURCE LINE # 1055
0000 120000      E     LCALL   State_GetCurrentSecurity
;---- Variable 'security' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1056
0003 EF                MOV     A,R7
0004 C3                CLR     C
0005 9401              SUBB    A,#01H
0007 4003              JC      ?C0262
0009 D3                SETB    C
000A 8001              SJMP    ?C0263
000C         ?C0262:
000C C3                CLR     C
000D         ?C0263:
000D 4003              JC      ?C0261
                                           ; SOURCE LINE # 1057
000F 020000      R     LJMP    ?C0415
                                           ; SOURCE LINE # 1059
0012         ?C0261:
                                           ; SOURCE LINE # 1062
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 117 

0012 900000      E     MOV     DPTR,#header+03H
0015 E0                MOVX    A,@DPTR
0016 54F8              ANL     A,#0F8H
0018 7014              JNZ     ?C0265
                                           ; SOURCE LINE # 1064
001A 120000      E     LCALL   State_GetCurrent
001D 900000      R     MOV     DPTR,#current
0020 EE                MOV     A,R6
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1065
0025 4E                ORL     A,R6
0026 700D              JNZ     ?C0267
                                           ; SOURCE LINE # 1066
0028 FD                MOV     R5,A
0029 7F18              MOV     R7,#018H
002B 020000      R     LJMP    ?C0428
                                           ; SOURCE LINE # 1068
                                           ; SOURCE LINE # 1069
002E         ?C0265:
                                           ; SOURCE LINE # 1070
002E E4                CLR     A
002F FD                MOV     R5,A
0030 7F22              MOV     R7,#022H
0032         ?C0416:
0032 020000      R     LJMP    ?C0428
                                           ; SOURCE LINE # 1072
0035         ?C0267:
                                           ; SOURCE LINE # 1074
0035 120000      E     LCALL   State_GetCurrent
0038 900000      R     MOV     DPTR,#current
003B EE                MOV     A,R6
003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1075
0040 E0                MOVX    A,@DPTR
0041 25E0              ADD     A,ACC
0043 FF                MOV     R7,A
0044 900000      R     MOV     DPTR,#current
0047 E0                MOVX    A,@DPTR
0048 33                RLC     A
0049 FE                MOV     R6,A
004A EF                MOV     A,R7
004B 2410              ADD     A,#010H
004D FF                MOV     R7,A
004E EE                MOV     A,R6
004F 3401              ADDC    A,#01H
0051 FE                MOV     R6,A
0052 7B01              MOV     R3,#01H
0054 7A00        R     MOV     R2,#HIGH tag
0056 7900        R     MOV     R1,#LOW tag
0058 7D01              MOV     R5,#01H
005A 7C00              MOV     R4,#00H
005C 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 1076
005F 900000      R     MOV     DPTR,#current+01H
0062 E0                MOVX    A,@DPTR
0063 25E0              ADD     A,ACC
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 118 

0065 FF                MOV     R7,A
0066 900000      R     MOV     DPTR,#current
0069 E0                MOVX    A,@DPTR
006A 33                RLC     A
006B FE                MOV     R6,A
006C EF                MOV     A,R7
006D 2419              ADD     A,#019H
006F FF                MOV     R7,A
0070 EE                MOV     A,R6
0071 3401              ADDC    A,#01H
0073 FE                MOV     R6,A
0074 7B01              MOV     R3,#01H
0076 7A00        R     MOV     R2,#HIGH body
0078 7900        R     MOV     R1,#LOW body
007A 7D02              MOV     R5,#02H
007C 7C00              MOV     R4,#00H
007E 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 1077
0081 900000      R     MOV     DPTR,#body+01H
0084 E0                MOVX    A,@DPTR
0085 25E0              ADD     A,ACC
0087 FF                MOV     R7,A
0088 900000      R     MOV     DPTR,#body
008B E0                MOVX    A,@DPTR
008C 33                RLC     A
008D FE                MOV     R6,A
008E EF                MOV     A,R7
008F 2413              ADD     A,#013H
0091 FF                MOV     R7,A
0092 EE                MOV     A,R6
0093 3401              ADDC    A,#01H
0095 FE                MOV     R6,A
0096 7B01              MOV     R3,#01H
0098 7A00        R     MOV     R2,#HIGH size
009A 7900        R     MOV     R1,#LOW size
009C 7D02              MOV     R5,#02H
009E 7C00              MOV     R4,#00H
00A0 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 1080
00A3 900000      R     MOV     DPTR,#tag
00A6 E0                MOVX    A,@DPTR
00A7 7004              JNZ     ?C0345
00A9 A3                INC     DPTR
00AA E0                MOVX    A,@DPTR
00AB 644F              XRL     A,#04FH
00AD         ?C0345:
00AD 7006              JNZ     ?C0268
                                           ; SOURCE LINE # 1081
00AF FD                MOV     R5,A
00B0 7F13              MOV     R7,#013H
00B2         ?C0417:
00B2 020000      R     LJMP    ?C0428
                                           ; SOURCE LINE # 1083
00B5         ?C0268:
                                           ; SOURCE LINE # 1086
00B5 900000      R     MOV     DPTR,#body+01H
00B8 E0                MOVX    A,@DPTR
00B9 25E0              ADD     A,ACC
00BB FF                MOV     R7,A
00BC 900000      R     MOV     DPTR,#body
00BF E0                MOVX    A,@DPTR
00C0 33                RLC     A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 119 

00C1 FE                MOV     R6,A
00C2 EF                MOV     A,R7
00C3 2410              ADD     A,#010H
00C5 FF                MOV     R7,A
00C6 EE                MOV     A,R6
00C7 3401              ADDC    A,#01H
00C9 FE                MOV     R6,A
00CA 7B01              MOV     R3,#01H
00CC 7A00        R     MOV     R2,#HIGH structure
00CE 7900        R     MOV     R1,#LOW structure
00D0 7D01              MOV     R5,#01H
00D2 7C00              MOV     R4,#00H
00D4 120000      E     LCALL   _Memory_ReadBlock
                                           ; SOURCE LINE # 1087
00D7 900000      R     MOV     DPTR,#structure
00DA E0                MOVX    A,@DPTR
00DB FF                MOV     R7,A
00DC 6402              XRL     A,#02H
00DE 600C              JZ      ?C0269
00E0 EF                MOV     A,R7
00E1 6404              XRL     A,#04H
00E3 6007              JZ      ?C0269
                                           ; SOURCE LINE # 1088
00E5 E4                CLR     A
00E6 FD                MOV     R5,A
00E7 7F13              MOV     R7,#013H
00E9         ?C0418:
00E9 020000      R     LJMP    ?C0428
                                           ; SOURCE LINE # 1090
00EC         ?C0269:
                                           ; SOURCE LINE # 1093
00EC 120000      E     LCALL   FS_GetAC
;---- Variable 'ac' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1094
00EF EF                MOV     A,R7
00F0 20E007            JB      ACC.0,?C0270
                                           ; SOURCE LINE # 1095
00F3         ?C0415:
00F3 E4                CLR     A
00F4 FD                MOV     R5,A
00F5 7F14              MOV     R7,#014H
00F7         ?C0419:
00F7 020000      R     LJMP    ?C0428
                                           ; SOURCE LINE # 1097
00FA         ?C0270:
                                           ; SOURCE LINE # 1100
00FA 900000      E     MOV     DPTR,#header+02H
00FD E0                MOVX    A,@DPTR
00FE 7009              JNZ     ?C0271
                                           ; SOURCE LINE # 1101
0100 120000      E     LCALL   State_GetCurrentRecord
0103 900000      R     MOV     DPTR,#record_num
0106 EE                MOV     A,R6
                                           ; SOURCE LINE # 1102
0107 8009              SJMP    ?C0414
0109         ?C0271:
                                           ; SOURCE LINE # 1103
0109 900000      E     MOV     DPTR,#header+02H
010C E0                MOVX    A,@DPTR
010D FF                MOV     R7,A
010E 900000      R     MOV     DPTR,#record_num
0111 E4                CLR     A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 120 

0112         ?C0414:
0112 F0                MOVX    @DPTR,A
0113 A3                INC     DPTR
0114 EF                MOV     A,R7
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1104
0116         ?C0272:
                                           ; SOURCE LINE # 1107
0116 900000      R     MOV     DPTR,#size
0119 E0                MOVX    A,@DPTR
011A FE                MOV     R6,A
011B A3                INC     DPTR
011C E0                MOVX    A,@DPTR
011D FF                MOV     R7,A
011E D3                SETB    C
011F 900000      R     MOV     DPTR,#record_num+01H
0122 E0                MOVX    A,@DPTR
0123 9F                SUBB    A,R7
0124 900000      R     MOV     DPTR,#record_num
0127 E0                MOVX    A,@DPTR
0128 9E                SUBB    A,R6
0129 4007              JC      ?C0273
                                           ; SOURCE LINE # 1108
012B E4                CLR     A
012C FD                MOV     R5,A
012D 7F22              MOV     R7,#022H
012F         ?C0420:
012F 020000      R     LJMP    ?C0428
                                           ; SOURCE LINE # 1110
0132         ?C0273:
                                           ; SOURCE LINE # 1113
0132 900000      E     MOV     DPTR,#header+03H
0135 E0                MOVX    A,@DPTR
0136 30E203            JNB     ACC.2,?C0274
                                           ; SOURCE LINE # 1114
                                           ; SOURCE LINE # 1115
0139 020000      R     LJMP    ?C0422
013C         ?C0274:
                                           ; SOURCE LINE # 1117
013C 900000      E     MOV     DPTR,#header+03H
013F E0                MOVX    A,@DPTR
0140 5403              ANL     A,#03H
0142 701F              JNZ     ?C0276
                                           ; SOURCE LINE # 1118
0144 900000      R     MOV     DPTR,#record_num
0147 F0                MOVX    @DPTR,A
0148 A3                INC     DPTR
0149 04                INC     A
014A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1119
014B 900000      R     MOV     DPTR,#body
014E E0                MOVX    A,@DPTR
014F FC                MOV     R4,A
0150 A3                INC     DPTR
0151 E0                MOVX    A,@DPTR
0152 FD                MOV     R5,A
0153 A3                INC     DPTR
0154 E0                MOVX    A,@DPTR
0155 FA                MOV     R2,A
0156 A3                INC     DPTR
0157 E0                MOVX    A,@DPTR
0158 FB                MOV     R3,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 121 

0159 900000      R     MOV     DPTR,#?_Write_One_Record?BYTE+05H
015C E4                CLR     A
015D F0                MOVX    @DPTR,A
015E A3                INC     DPTR
015F 04                INC     A
                                           ; SOURCE LINE # 1120
0160 020000      R     LJMP    ?C0423
0163         ?C0276:
                                           ; SOURCE LINE # 1121
0163 900000      E     MOV     DPTR,#header+03H
0166 E0                MOVX    A,@DPTR
0167 5403              ANL     A,#03H
0169 6401              XRL     A,#01H
016B 7033              JNZ     ?C0278
                                           ; SOURCE LINE # 1122
016D 900000      R     MOV     DPTR,#size
0170 E0                MOVX    A,@DPTR
0171 FA                MOV     R2,A
0172 A3                INC     DPTR
0173 E0                MOVX    A,@DPTR
0174 FB                MOV     R3,A
0175 900000      R     MOV     DPTR,#record_num
0178 E0                MOVX    A,@DPTR
0179 6A                XRL     A,R2
017A 7003              JNZ     ?C0346
017C A3                INC     DPTR
017D E0                MOVX    A,@DPTR
017E 6B                XRL     A,R3
017F         ?C0346:
017F 6018              JZ      ?C0279
                                           ; SOURCE LINE # 1123
0181 900000      R     MOV     DPTR,#record_num+01H
0184 E0                MOVX    A,@DPTR
0185 04                INC     A
0186 F0                MOVX    @DPTR,A
0187 7006              JNZ     ?C0347
0189 900000      R     MOV     DPTR,#record_num
018C E0                MOVX    A,@DPTR
018D 04                INC     A
018E F0                MOVX    @DPTR,A
018F         ?C0347:
                                           ; SOURCE LINE # 1124
018F 900000      R     MOV     DPTR,#body
0192 E0                MOVX    A,@DPTR
0193 FC                MOV     R4,A
0194 A3                INC     DPTR
0195 E0                MOVX    A,@DPTR
0196 FD                MOV     R5,A
                                           ; SOURCE LINE # 1125
0197 8039              SJMP    ?C0424
0199         ?C0279:
                                           ; SOURCE LINE # 1126
0199 E4                CLR     A
019A FD                MOV     R5,A
019B 7F22              MOV     R7,#022H
019D         ?C0421:
019D 020000      R     LJMP    ?C0428
                                           ; SOURCE LINE # 1128
                                           ; SOURCE LINE # 1129
01A0         ?C0278:
                                           ; SOURCE LINE # 1130
01A0 900000      E     MOV     DPTR,#header+03H
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 122 

01A3 E0                MOVX    A,@DPTR
01A4 5403              ANL     A,#03H
01A6 6402              XRL     A,#02H
01A8 704F              JNZ     ?C0282
                                           ; SOURCE LINE # 1131
01AA 900000      R     MOV     DPTR,#record_num
01AD E0                MOVX    A,@DPTR
01AE 7004              JNZ     ?C0348
01B0 A3                INC     DPTR
01B1 E0                MOVX    A,@DPTR
01B2 6401              XRL     A,#01H
01B4         ?C0348:
01B4 603D              JZ      ?C0283
                                           ; SOURCE LINE # 1132
01B6 900000      R     MOV     DPTR,#record_num+01H
01B9 E0                MOVX    A,@DPTR
01BA 24FF              ADD     A,#0FFH
01BC F0                MOVX    @DPTR,A
01BD 900000      R     MOV     DPTR,#record_num
01C0 E0                MOVX    A,@DPTR
01C1 34FF              ADDC    A,#0FFH
01C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1133
01C4         ?C0422:
01C4 900000      R     MOV     DPTR,#body
01C7 E0                MOVX    A,@DPTR
01C8 FC                MOV     R4,A
01C9 A3                INC     DPTR
01CA E0                MOVX    A,@DPTR
01CB FD                MOV     R5,A
01CC A3                INC     DPTR
01CD E0                MOVX    A,@DPTR
01CE FA                MOV     R2,A
01CF A3                INC     DPTR
01D0 E0                MOVX    A,@DPTR
01D1 FB                MOV     R3,A
01D2         ?C0424:
01D2 900000      R     MOV     DPTR,#record_num
01D5 E0                MOVX    A,@DPTR
01D6 FF                MOV     R7,A
01D7 A3                INC     DPTR
01D8 E0                MOVX    A,@DPTR
01D9 900000      R     MOV     DPTR,#?_Update_One_Record?BYTE+05H
01DC CF                XCH     A,R7
01DD F0                MOVX    @DPTR,A
01DE A3                INC     DPTR
01DF EF                MOV     A,R7
01E0 F0                MOVX    @DPTR,A
01E1 900000      E     MOV     DPTR,#header+04H
01E4 E0                MOVX    A,@DPTR
01E5 900000      R     MOV     DPTR,#?_Update_One_Record?BYTE+07H
01E8 F0                MOVX    @DPTR,A
01E9 900000      R     MOV     DPTR,#structure
01EC E0                MOVX    A,@DPTR
01ED FF                MOV     R7,A
01EE 120000      R     LCALL   _Update_One_Record
                                           ; SOURCE LINE # 1134
01F1 803D              SJMP    ?C0426
01F3         ?C0283:
                                           ; SOURCE LINE # 1135
01F3 E4                CLR     A
01F4 FD                MOV     R5,A
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 123 

01F5 7F22              MOV     R7,#022H
01F7         ?C0425:
01F7 804A              SJMP    ?C0428
                                           ; SOURCE LINE # 1137
                                           ; SOURCE LINE # 1138
01F9         ?C0282:
                                           ; SOURCE LINE # 1139
01F9 900000      R     MOV     DPTR,#size
01FC E0                MOVX    A,@DPTR
01FD FA                MOV     R2,A
01FE A3                INC     DPTR
01FF E0                MOVX    A,@DPTR
0200 FB                MOV     R3,A
0201 900000      R     MOV     DPTR,#record_num
0204 EA                MOV     A,R2
0205 F0                MOVX    @DPTR,A
0206 A3                INC     DPTR
0207 EB                MOV     A,R3
0208 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1140
0209 900000      R     MOV     DPTR,#body
020C E0                MOVX    A,@DPTR
020D FC                MOV     R4,A
020E A3                INC     DPTR
020F E0                MOVX    A,@DPTR
0210 FD                MOV     R5,A
0211 900000      R     MOV     DPTR,#record_num
0214 E0                MOVX    A,@DPTR
0215 FF                MOV     R7,A
0216 A3                INC     DPTR
0217 E0                MOVX    A,@DPTR
0218 900000      R     MOV     DPTR,#?_Write_One_Record?BYTE+05H
021B CF                XCH     A,R7
021C F0                MOVX    @DPTR,A
021D A3                INC     DPTR
021E EF                MOV     A,R7
021F         ?C0423:
021F F0                MOVX    @DPTR,A
0220 900000      E     MOV     DPTR,#header+04H
0223 E0                MOVX    A,@DPTR
0224 900000      R     MOV     DPTR,#?_Write_One_Record?BYTE+07H
0227 F0                MOVX    @DPTR,A
0228 900000      R     MOV     DPTR,#structure
022B E0                MOVX    A,@DPTR
022C FF                MOV     R7,A
022D 120000      R     LCALL   _Write_One_Record
0230         ?C0426:
0230 900000      R     MOV     DPTR,#status
0233 EF                MOV     A,R7
0234 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1141
                                           ; SOURCE LINE # 1142
0235         ?C0275:
                                           ; SOURCE LINE # 1144
0235 900000      R     MOV     DPTR,#status
0238 E0                MOVX    A,@DPTR
0239 FD                MOV     R5,A
023A 6004              JZ      ?C0286
                                           ; SOURCE LINE # 1145
023C 7F0C              MOV     R7,#0CH
023E         ?C0427:
023E 8003              SJMP    ?C0428
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 124 

                                           ; SOURCE LINE # 1147
0240         ?C0286:
                                           ; SOURCE LINE # 1149
0240 E4                CLR     A
0241 FD                MOV     R5,A
0242 FF                MOV     R7,A
0243         ?C0428:
0243 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 1150
0246         ?C0264:
0246 22                RET     
             ; FUNCTION Command_WriteRecord (END)

             ; FUNCTION Command_Verify (BEGIN)
                                           ; SOURCE LINE # 1154
                                           ; SOURCE LINE # 1158
0000 900000      E     MOV     DPTR,#header+04H
0003 E0                MOVX    A,@DPTR
0004 6404              XRL     A,#04H
0006 6006              JZ      ?C0287
                                           ; SOURCE LINE # 1159
0008 E4                CLR     A
0009 FD                MOV     R5,A
000A 7F0C              MOV     R7,#0CH
000C 805E              SJMP    ?C0431
                                           ; SOURCE LINE # 1161
000E         ?C0287:
                                           ; SOURCE LINE # 1163
000E E4                CLR     A
000F 900000      R     MOV     DPTR,#i
0012 F0                MOVX    @DPTR,A
0013         ?C0289:
                                           ; SOURCE LINE # 1164
0013 900000      E     MOV     DPTR,#header+01H
0016 E0                MOVX    A,@DPTR
0017 F4                CPL     A
0018 FF                MOV     R7,A
0019 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 1165
001C 120000      E     LCALL   Transmission_GetByte
001F 900000      R     MOV     DPTR,#i
0022 E0                MOVX    A,@DPTR
0023 2400        R     ADD     A,#LOW pin
0025 F582              MOV     DPL,A
0027 E4                CLR     A
0028 3400        R     ADDC    A,#HIGH pin
002A F583              MOV     DPH,A
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1166
002E 900000      R     MOV     DPTR,#i
0031 E0                MOVX    A,@DPTR
0032 04                INC     A
0033 F0                MOVX    @DPTR,A
0034 E0                MOVX    A,@DPTR
0035 C3                CLR     C
0036 9404              SUBB    A,#04H
0038 40D9              JC      ?C0289
003A         ?C0290:
                                           ; SOURCE LINE # 1167
003A 900000      E     MOV     DPTR,#header+01H
003D E0                MOVX    A,@DPTR
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 125 

003E FF                MOV     R7,A
003F 120000      E     LCALL   _Transmission_SendByte
                                           ; SOURCE LINE # 1169
0042 120000      E     LCALL   State_Verify
0045 EE                MOV     A,R6
0046 7027              JNZ     ?C0288
0048 EF                MOV     A,R7
0049 24FE              ADD     A,#0FEH
004B 6012              JZ      ?C0295
004D 14                DEC     A
004E 6009              JZ      ?C0294
0050 2403              ADD     A,#03H
0052 701B              JNZ     ?C0288
                                           ; SOURCE LINE # 1170
0054         ?C0293:
                                           ; SOURCE LINE # 1171
0054 E4                CLR     A
0055 FD                MOV     R5,A
0056 FF                MOV     R7,A
0057         ?C0429:
                                           ; SOURCE LINE # 1172
0057 8013              SJMP    ?C0431
                                           ; SOURCE LINE # 1173
0059         ?C0294:
                                           ; SOURCE LINE # 1174
0059 E4                CLR     A
005A FD                MOV     R5,A
005B 7F15              MOV     R7,#015H
005D         ?C0430:
                                           ; SOURCE LINE # 1175
005D 800D              SJMP    ?C0431
                                           ; SOURCE LINE # 1176
005F         ?C0295:
                                           ; SOURCE LINE # 1177
005F 7F1E              MOV     R7,#01EH
0061 7E00              MOV     R6,#00H
0063 120000      E     LCALL   _Memory_ReadByte
;---- Variable 'retries' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1178
0066 EF                MOV     A,R7
0067 540F              ANL     A,#0FH
0069 FD                MOV     R5,A
006A 7F09              MOV     R7,#09H
006C         ?C0431:
006C 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 1179
                                           ; SOURCE LINE # 1180
006F         ?C0288:
006F 22                RET     
             ; FUNCTION Command_Verify (END)

             ; FUNCTION Command_Interpreter (BEGIN)
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1286
0000 900000      E     MOV     DPTR,#header
0003 E0                MOVX    A,@DPTR
0004 54FC              ANL     A,#0FCH
0006 6480              XRL     A,#080H
0008 6003              JZ      $ + 5H
000A 020000      R     LJMP    ?C0296
                                           ; SOURCE LINE # 1287
000D A3                INC     DPTR
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 126 

000E E0                MOVX    A,@DPTR
000F 54FE              ANL     A,#0FEH
0011 120000      E     LCALL   ?C?CCASE
0014 0000        R     DW      ?C0298
0016 02                DB      02H
0017 0000        R     DW      ?C0299
0019 04                DB      04H
001A 0000        R     DW      ?C0315
001C 06                DB      06H
001D 0000        R     DW      ?C0302
001F 0A                DB      0AH
0020 0000        R     DW      ?C0308
0022 0E                DB      0EH
0023 0000        R     DW      ?C0311
0025 20                DB      020H
0026 0000        R     DW      ?C0300
0028 22                DB      022H
0029 0000        R     DW      ?C0301
002B 24                DB      024H
002C 0000        R     DW      ?C0303
002E 26                DB      026H
002F 0000        R     DW      ?C0304
0031 28                DB      028H
0032 0000        R     DW      ?C0313
0034 82                DB      082H
0035 0000        R     DW      ?C0312
0037 84                DB      084H
0038 0000        R     DW      ?C0305
003A A4                DB      0A4H
003B 0000        R     DW      ?C0306
003D B0                DB      0B0H
003E 0000        R     DW      ?C0316
0040 B2                DB      0B2H
0041 0000        R     DW      ?C0314
0043 C0                DB      0C0H
0044 0000        R     DW      ?C0319
0046 D0                DB      0D0H
0047 0000        R     DW      ?C0318
0049 D2                DB      0D2H
004A 0000        R     DW      ?C0307
004C D6                DB      0D6H
004D 0000        R     DW      ?C0317
004F DC                DB      0DCH
0050 0000        R     DW      ?C0309
0052 E0                DB      0E0H
0053 0000        R     DW      ?C0310
0055 E4                DB      0E4H
0056 0000              DW      00H
0058 0000        R     DW      ?C0320
                                           ; SOURCE LINE # 1288
005A         ?C0298:
                                           ; SOURCE LINE # 1289
005A 020000      R     LJMP    Command_Write
                                           ; SOURCE LINE # 1290
                                           ; SOURCE LINE # 1291
005D         ?C0299:
                                           ; SOURCE LINE # 1292
005D 020000      R     LJMP    Command_Read
                                           ; SOURCE LINE # 1293
                                           ; SOURCE LINE # 1294
0060         ?C0300:
                                           ; SOURCE LINE # 1295
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 127 

0060 020000      R     LJMP    Command_GetCurrent
                                           ; SOURCE LINE # 1296
                                           ; SOURCE LINE # 1297
0063         ?C0301:
                                           ; SOURCE LINE # 1298
0063 020000      R     LJMP    Command_GetSecurity
                                           ; SOURCE LINE # 1299
                                           ; SOURCE LINE # 1300
0066         ?C0302:
                                           ; SOURCE LINE # 1301
0066 020000      R     LJMP    Command_Format
                                           ; SOURCE LINE # 1302
                                           ; SOURCE LINE # 1303
0069         ?C0303:
                                           ; SOURCE LINE # 1304
0069 020000      R     LJMP    Command_Encrypt
                                           ; SOURCE LINE # 1305
                                           ; SOURCE LINE # 1306
006C         ?C0304:
                                           ; SOURCE LINE # 1307
006C 020000      R     LJMP    Command_GetCurrentChallenge
                                           ; SOURCE LINE # 1308
                                           ; SOURCE LINE # 1309
006F         ?C0305:
                                           ; SOURCE LINE # 1310
006F 020000      R     LJMP    Command_Select
                                           ; SOURCE LINE # 1311
                                           ; SOURCE LINE # 1312
0072         ?C0306:
                                           ; SOURCE LINE # 1313
0072 020000      R     LJMP    Command_ReadBinary
                                           ; SOURCE LINE # 1314
                                           ; SOURCE LINE # 1315
0075         ?C0307:
                                           ; SOURCE LINE # 1316
0075 020000      R     LJMP    Command_UpdateBinary
                                           ; SOURCE LINE # 1317
                                           ; SOURCE LINE # 1318
0078         ?C0308:
                                           ; SOURCE LINE # 1319
0078 020000      R     LJMP    Command_EraseBinary
                                           ; SOURCE LINE # 1320
                                           ; SOURCE LINE # 1321
007B         ?C0309:
                                           ; SOURCE LINE # 1322
007B 020000      R     LJMP    Command_CreateFile
                                           ; SOURCE LINE # 1323
                                           ; SOURCE LINE # 1324
007E         ?C0310:
                                           ; SOURCE LINE # 1325
007E 020000      R     LJMP    Command_DeleteFile
                                           ; SOURCE LINE # 1326
                                           ; SOURCE LINE # 1327
0081         ?C0311:
                                           ; SOURCE LINE # 1328
0081 020000      R     LJMP    Command_Verify
                                           ; SOURCE LINE # 1329
                                           ; SOURCE LINE # 1330
0084         ?C0312:
                                           ; SOURCE LINE # 1331
0084 020000      E     LJMP    Command_GetChallenge
                                           ; SOURCE LINE # 1332
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 128 

                                           ; SOURCE LINE # 1333
0087         ?C0313:
                                           ; SOURCE LINE # 1334
0087 020000      E     LJMP    Command_ExternalAuth
                                           ; SOURCE LINE # 1335
                                           ; SOURCE LINE # 1336
008A         ?C0314:
                                           ; SOURCE LINE # 1337
008A 020000      E     LJMP    Command_GetResponse
                                           ; SOURCE LINE # 1338
                                           ; SOURCE LINE # 1339
008D         ?C0315:
                                           ; SOURCE LINE # 1340
008D 020000      R     LJMP    Command_ReadSHM
                                           ; SOURCE LINE # 1341
                                           ; SOURCE LINE # 1342
0090         ?C0316:
                                           ; SOURCE LINE # 1343
0090 020000      R     LJMP    Command_ReadRecord
                                           ; SOURCE LINE # 1344
                                           ; SOURCE LINE # 1345
0093         ?C0317:
                                           ; SOURCE LINE # 1346
0093 020000      R     LJMP    Command_UpdateRecord
                                           ; SOURCE LINE # 1347
                                           ; SOURCE LINE # 1348
0096         ?C0318:
                                           ; SOURCE LINE # 1349
0096 020000      R     LJMP    Command_WriteRecord
                                           ; SOURCE LINE # 1350
                                           ; SOURCE LINE # 1351
0099         ?C0319:
                                           ; SOURCE LINE # 1352
0099 020000      R     LJMP    Command_WriteBinary
                                           ; SOURCE LINE # 1353
                                           ; SOURCE LINE # 1354
009C         ?C0320:
                                           ; SOURCE LINE # 1355
009C E4                CLR     A
009D FD                MOV     R5,A
009E 7F27              MOV     R7,#027H
                                           ; SOURCE LINE # 1356
00A0 8004              SJMP    ?C0432
                                           ; SOURCE LINE # 1357
                                           ; SOURCE LINE # 1358
00A2         ?C0296:
                                           ; SOURCE LINE # 1359
00A2 E4                CLR     A
00A3 FD                MOV     R5,A
00A4 7F28              MOV     R7,#028H
00A6         ?C0432:
00A6 120000      E     LCALL   _Response_SetSW
                                           ; SOURCE LINE # 1360
                                           ; SOURCE LINE # 1361
00A9         ?C0322:
00A9 22                RET     
             ; FUNCTION Command_Interpreter (END)

C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 129 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


Command_CreateFile . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  tag. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  file_size. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  fid. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  ac . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  record_le. . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  result . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  df . . . . . . . . . . . . . . . . .  AUTO     XDATA  STRUCT   0007H  22
  ef . . . . . . . . . . . . . . . . .  AUTO     XDATA  STRUCT   001DH  11
  filetype . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0028H  1
  rfu1 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0029H  1
  rfu2 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   002AH  1
Command_EraseBinary. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  offset . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  length . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  le . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  ac . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Command_ExternalAuth . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Memory_WriteByte. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Response_Warning_Unchanged . . . . . .  E_CONST  -----  U_CHAR   -----  1
Command_ReadRecord . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  current. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  body . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  tag. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  record_num . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
  security . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  structure. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
  ac . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Response_CmdNotAllowed_Incompatible_FS  E_CONST  -----  U_CHAR   -----  1
FSFormat . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Response_CLANotSupported . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Command_Select . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  current. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  body . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  length . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  fid. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  record_num . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  structure. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
BC3_decrypt_k_sequential . . . . . . .  EXTERN   CODE   PROC     -----  -----
Response_Auth_Success. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Response_Warning_FilledUp. . . . . . .  E_CONST  -----  U_CHAR   -----  1
Command_ReadBinary . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  offset . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  length . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  le . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  data_binary. . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  ac . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Command_ReadSHM. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  data_to_read . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  address_SHM. . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_Response_SetSW. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Command_Encrypt. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 130 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
Command_Format . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
BC3_encrypt_k_sequential . . . . . . .  EXTERN   CODE   PROC     -----  -----
_read_data_independent . . . . . . . .  EXTERN   CODE   PROC     -----  -----
FSSelectMF . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
Response_CmdNotAllowed_SecurityStatus.  E_CONST  -----  U_CHAR   -----  1
Response_NotSupported_LogicalChannel .  E_CONST  -----  U_CHAR   -----  1
Command_WriteRecord. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  current. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  body . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  tag. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  record_num . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  security . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  structure. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
  ac . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  status . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
_Transmission_SendByte . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Command_GetResponse. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Command_WriteBinary. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  offset . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  length . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  le . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  data_binary. . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  data_read. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  data_write . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0009H  1
  ac . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Command_Verify . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  retries. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Response_Warning_Changed . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FS_GetAC . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Response_INSNotSupported . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_write_data_independent. . . . . . . .  EXTERN   CODE   PROC     -----  -----
Response_Normal. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Command_Read . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  length . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  address_EEPROM . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  data_to_read . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
Command_GetSecurity. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  security . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  acread . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Response_NotSupported_SecureMessaging.  E_CONST  -----  U_CHAR   -----  1
Response_NotSupported_LastCommandExpec  E_CONST  -----  U_CHAR   -----  1
Transmission_GetByte . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Response_WrongLength . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_Update_One_Record . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  structure. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  body . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  record_num . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0005H  2
  length . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  record_le. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 131 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  databyte . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0009H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
  record_current_addr. . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
  record_next_addr . . . . . . . . . .  AUTO     XDATA  U_CHAR   000CH  1
  offset . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000DH  2
Command_GetCurrent . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  current. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  body . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  length . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  record_num . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  ac . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
  structure. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0009H  1
  tag. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
  record_current_addr. . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
  record_next_addr . . . . . . . . . .  AUTO     XDATA  U_CHAR   000CH  1
state_struct . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  current. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  currentKey . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  currentRecord. . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  securityState. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  challenge. . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0007H  8
Response_FatalError. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Response_CmdNotAllowed_ExpectSecureMsg  E_CONST  -----  U_CHAR   -----  1
Response_CmdNotAllowed_ConditionNotSat  E_CONST  -----  U_CHAR   -----  1
_FS_SelectFID. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Command_Write. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  length . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  data_to_write. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  address_EEPROM . . . . . . . . . . .  AUTO     XDATA  U_INT    0005H  2
Response_NotSupported. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Response_Error_Unchanged . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Command_GetCurrentChallenge. . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  buf. . . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0001H  8
Response_WrongP1P2_FuncNotSupported. .  E_CONST  -----  U_CHAR   -----  1
_read_data_sequential. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Response_WrongP1P2_FileExist . . . . .  E_CONST  -----  U_CHAR   -----  1
Response_WrongP1P2_NCInconsistentTLV .  E_CONST  -----  U_CHAR   -----  1
Response_NotSupported_CommandChain . .  E_CONST  -----  U_CHAR   -----  1
Command_Interpreter. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Response_WrongP1P2_RecordNotFound. . .  E_CONST  -----  U_CHAR   -----  1
Response_Warning_EndOfFile . . . . . .  E_CONST  -----  U_CHAR   -----  1
_FS_SearchAllFID . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Read_One_Record . . . . . . . . . . .  PUBLIC   CODE   PROC     000DH  -----
  structure. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  body . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  record_num . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0005H  2
  record_le. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  databyte . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
  record_current_addr. . . . . . . . .  AUTO     XDATA  U_CHAR   0009H  1
  record_next_addr . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
  offset . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000BH  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000DH  2
pin. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0000H  4
HASH_sequential. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 132 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_Memory_ReadBlock. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Response_WrongP1P2_DFNameExist . . . .  E_CONST  -----  U_CHAR   -----  1
Response_WrongP1P2 . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Response_CmdNotAllowed . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Response_WrongP1P2_NCInconsistentP1P2.  E_CONST  -----  U_CHAR   -----  1
State_GetCurrentSecurity . . . . . . .  EXTERN   CODE   PROC     -----  -----
Response_OK. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Command_GetChallenge . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Command_Tes. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  result . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
Response_Error_Changed . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
State_GetCurrentRecord . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DF_st. . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  FID. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  DFname . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  16
  asc_flag . . . . . . . . . . . . . .  MEMBER   -----  CHAR     0012H  1
  asc. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0013H  3
EF_st. . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  FID. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  structure. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  AC . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  ptr_body . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  3
  file_size. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  record_le. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
encrypted. . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0004H  8
_Write_One_Record. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  structure. . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  body . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  record_num . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0005H  2
  length . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  record_le. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
  databyte . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0009H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
  data_write . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
  data_read. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000CH  1
  record_current_addr. . . . . . . . .  AUTO     XDATA  U_CHAR   000DH  1
  record_next_addr . . . . . . . . . .  AUTO     XDATA  U_CHAR   000EH  1
  offset . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000FH  2
Response_Warning_Counter . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Response_WrongP1P2_IncorrectData . . .  E_CONST  -----  U_CHAR   -----  1
_Initial_Binary_Check. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  length . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  offset . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  current. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  body . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  fid. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  tag. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
  tempLength . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000CH  2
  security . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  structure. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000EH  1
_FSAccessBinary. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Response_Warning_FileDeactivated . . .  E_CONST  -----  U_CHAR   -----  1
Response_CmdNotAllowed_RefDataNotUsable E_CONST  -----  U_CHAR   -----  1
State_Verify . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_State_SetCurrentRecord. . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.01   COMMAND                                                               02/22/2017 16:00:37 PAGE 133 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


Response_CmdNotAllowed_NoCurrentEF . .  E_CONST  -----  U_CHAR   -----  1
Response_WrongP1P2_IncorrectP1P2 . . .  E_CONST  -----  U_CHAR   -----  1
Response_WrongP1P2_FileNotFound. . . .  E_CONST  -----  U_CHAR   -----  1
Response_Warning_DataCorrupt . . . . .  E_CONST  -----  U_CHAR   -----  1
Response_WrongP1P2_NotEnoughMem. . . .  E_CONST  -----  U_CHAR   -----  1
rspn_type. . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
header . . . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  5
Command_UpdateRecord . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  current. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  body . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  size . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  tag. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  record_num . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  security . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  structure. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
  ac . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  status . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000BH  1
ECC_sequential . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
State_GetCurrent . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Response_CmdNotAllowed_IncorrectSecure  E_CONST  -----  U_CHAR   -----  1
_Memory_ReadByte . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_FSDeleteFile. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Command_UpdateBinary . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  offset . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  length . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  le . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  data_binary. . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  ac . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
response . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    000CH  90
_FSCreateFile. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
State_GetCurrentChallenge. . . . . . .  EXTERN   CODE   PROC     -----  -----
Response_WrongP1P2_RefDataNotFound . .  E_CONST  -----  U_CHAR   -----  1
Response_CmdNotAllowed_AuthBlocked . .  E_CONST  -----  U_CHAR   -----  1
Command_DeleteFile . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fid. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
buffer . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0066H  8
resplen. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   006EH  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   7520    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    111     228
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
